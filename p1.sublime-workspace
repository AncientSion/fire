{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"combatl",
				"combatlogWrapper"
			],
			[
				"create",
				"createDeployEntries"
			],
			[
				"dra",
				"drawFacing"
			],
			[
				"getAc",
				"getActiveSystem"
			],
			[
				"getSy",
				"getSystemLocation"
			],
			[
				"get_",
				"get_class"
			],
			[
				"ongo",
				"ongoingGames"
			],
			[
				"getHit",
				"getHitSystem"
			],
			[
				"update",
				"updateSystemLoad"
			],
			[
				"game",
				"gameid"
			],
			[
				"inia",
				"initiateFlight"
			],
			[
				"assem",
				"assembleBallistics"
			],
			[
				"system",
				"systemid"
			],
			[
				"destro",
				"isDestroyedThisTurn"
			],
			[
				"handleBallistic",
				"handleBallisticMovementPhase"
			],
			[
				"getCurrent",
				"getCurrentImpulse"
			],
			[
				"getCurr",
				"getCurrentImpulse"
			],
			[
				"handleF",
				"handleFighterMovementPhase"
			],
			[
				"flig",
				"flightDeploy"
			],
			[
				"getSyste",
				"getSystemById"
			],
			[
				"backg",
				"background-color"
			],
			[
				"targe",
				"targetData1"
			],
			[
				"to",
				"totalDmg"
			],
			[
				"getEW",
				"getEWMode"
			],
			[
				"getBoost",
				"getBoostEffectElements"
			],
			[
				"getOutputmod",
				"getOutputModeMods"
			],
			[
				"Db",
				"DBManager"
			],
			[
				"getSystem",
				"getSystemByName"
			],
			[
				"initDe",
				"initDeploymentWrapper"
			],
			[
				"getC",
				"getCurrentReinforceCost"
			],
			[
				"parentI",
				"parentIntegrity"
			],
			[
				"getImp",
				"getImpulseProfileMod"
			],
			[
				"impul",
				"impulseString"
			],
			[
				"isIn",
				"isInEWArc"
			],
			[
				"getBas",
				"getBaseOffsetPos"
			],
			[
				"power",
				"powerReq"
			],
			[
				"DBM",
				"DBManager"
			],
			[
				"drawMove",
				"drawMoveRange"
			],
			[
				"back",
				"background-color"
			],
			[
				"remove",
				"removeClass"
			],
			[
				"resol",
				"resolveBallisticFireOrder"
			],
			[
				"getOut",
				"getOutput"
			],
			[
				"getBase",
				"getBaseOffsetPos"
			],
			[
				"getElement",
				"getElementsByClassName"
			],
			[
				"senSor",
				"checkSensorHighlight"
			],
			[
				"r",
				"echoReturn"
			],
			[
				"Salv",
				"salvoCtx"
			],
			[
				"salvo",
				"salvoCtx"
			],
			[
				"getUni",
				"getUnitById"
			],
			[
				"ele",
				"element"
			],
			[
				"pro",
				"prototype"
			],
			[
				"pto",
				"prototype"
			],
			[
				"getout",
				"getOutputUsage"
			],
			[
				"traver",
				"traverseMod"
			],
			[
				"getimda",
				"getAimDataLocation"
			],
			[
				"getAimData",
				"getAimDataTarget"
			],
			[
				"getTrav",
				"getTraverseRating"
			],
			[
				"getTraverse",
				"getTraverseRating"
			],
			[
				"var_",
				"var_export"
			],
			[
				"interc",
				"interceptVector"
			],
			[
				"getSyst",
				"getSystemDetailsDiv"
			],
			[
				"prio",
				"priority"
			],
			[
				"getRem",
				"getRemainingAmmo"
			],
			[
				"output",
				"outputMod"
			],
			[
				"setSystem",
				"setSystemImage"
			],
			[
				"getA",
				"getActiveWeapon"
			],
			[
				"outp",
				"outputMask"
			],
			[
				"getAcc",
				"getAccelSteps"
			],
			[
				"getBoos",
				"getBoostLevel"
			],
			[
				"getU",
				"getUnitById"
			],
			[
				"reinfo",
				"reinforceTable"
			],
			[
				"damage",
				"damageInflicted"
			],
			[
				"getRe",
				"getRelevantBallistics"
			],
			[
				"sort",
				"sortBallistics"
			],
			[
				"intercept",
				"interceptDist"
			],
			[
				"canAd",
				"canAdvanceFromLobby"
			],
			[
				"weapon",
				"weaponLoadoutDiv"
			],
			[
				"open",
				"openGamesElement"
			],
			[
				"animateSh",
				"animateShipExplosions"
			],
			[
				"an",
				"animations"
			],
			[
				"class",
				"classname"
			],
			[
				"var",
				"var_dump"
			],
			[
				"getCrit",
				"getCritDuration"
			],
			[
				"z",
				"z-index"
			],
			[
				"glo",
				"globalCompositeOperation"
			],
			[
				"fps",
				"fpsInterval"
			],
			[
				"ballisti",
				"ballisticInterceptionHover"
			],
			[
				"fire",
				"fireOrders"
			],
			[
				"drae",
				"drawBeamExplosion"
			],
			[
				"draw",
				"drawExplosion"
			],
			[
				"getReman",
				"getRemainingIntegrity"
			],
			[
				"rema",
				"getRemainingDelay"
			],
			[
				"getTurns",
				"getTurnStartPosition"
			],
			[
				"handle",
				"handleFireOrders"
			],
			[
				"has",
				"hasSystemsSelected"
			],
			[
				"getStruct",
				"getStructureById"
			],
			[
				"getRema",
				"getRemainingIntegrity"
			],
			[
				"clasname",
				"classname"
			],
			[
				"font",
				"font-size"
			],
			[
				"target",
				"targetInfo"
			],
			[
				"array_m",
				"array_merge"
			],
			[
				"stru",
				"structures"
			],
			[
				"getRemaining",
				"getRemainingIntegrity"
			],
			[
				"prima",
				"primaryContainer"
			],
			[
				"is",
				"isInArc"
			],
			[
				"db",
				"dbManager"
			],
			[
				"hangar",
				"hangarLoadoutDiv"
			],
			[
				"getE",
				"getElementById"
			],
			[
				"flight",
				"flightSelection"
			],
			[
				"explo",
				"exploAnimated"
			],
			[
				"struc",
				"structureid"
			],
			[
				"addDama",
				"addDamagesToShip"
			],
			[
				"move",
				"movementResolved"
			],
			[
				"resolve",
				"resolveBallisticMovement"
			],
			[
				"getR",
				"getRemainingIntegrity"
			],
			[
				"reSolve",
				"resolveFireOrder"
			],
			[
				"animateShV",
				"animateShipVsBallisticsFire"
			],
			[
				"getShipV",
				"getShipVsBallisticsAnimationDetails"
			],
			[
				"arm",
				"armourDmg"
			],
			[
				"insertBs",
				"insertBallisticActions"
			],
			[
				"Struct",
				"structDiv"
			],
			[
				"vecto",
				"vectorDiv"
			],
			[
				"int",
				"integrity"
			],
			[
				"getRemain",
				"getRemainingImpulse"
			],
			[
				"getF",
				"getPlannedFacingToMove"
			],
			[
				"getRemai",
				"getRemainingDelay"
			],
			[
				"vector",
				"drawVectorIndicator"
			],
			[
				"getIm",
				"getImpulseChangeCost"
			]
		]
	},
	"buffers":
	[
		{
			"file": "ajax.js",
			"settings":
			{
				"buffer_size": 7178,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/classes.php",
			"settings":
			{
				"buffer_size": 5274,
				"encoding": "UTF-8",
				"line_ending": "Windows",
				"name": "<?php"
			}
		},
		{
			"file": "classes.js",
			"settings":
			{
				"buffer_size": 15680,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "salvo.js",
			"settings":
			{
				"buffer_size": 9307,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "style.css",
			"settings":
			{
				"buffer_size": 21567,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "test.php",
			"settings":
			{
				"buffer_size": 2951,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "shipclasses.js",
			"settings":
			{
				"buffer_size": 84965,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "debug.php",
			"settings":
			{
				"buffer_size": 0,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "mixed.js",
			"settings":
			{
				"buffer_size": 14179,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "mathLib.js",
			"settings":
			{
				"buffer_size": 6275,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/mixed.php",
			"settings":
			{
				"buffer_size": 6622,
				"line_ending": "Windows"
			}
		},
		{
			"file": "global.php",
			"settings":
			{
				"buffer_size": 457,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/math.php",
			"settings":
			{
				"buffer_size": 3193,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/systems/weapons/particle.php",
			"settings":
			{
				"buffer_size": 2968,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "game.php",
			"settings":
			{
				"buffer_size": 22940,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "server/manager.php",
			"settings":
			{
				"buffer_size": 47304,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/flight.php",
			"settings":
			{
				"buffer_size": 1800,
				"encoding": "UTF-8",
				"line_ending": "Windows",
				"name": "<?php"
			}
		},
		{
			"file": "server/ships/omega.php",
			"settings":
			{
				"buffer_size": 3642,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/ships/hyperion.php",
			"settings":
			{
				"buffer_size": 2777,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/ships/saggitarius.php",
			"settings":
			{
				"buffer_size": 2571,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/ships/artemis.php",
			"settings":
			{
				"buffer_size": 2256,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/ships/tethys.php",
			"settings":
			{
				"buffer_size": 1613,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "systems.js",
			"settings":
			{
				"buffer_size": 88832,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "imageloader.js",
			"settings":
			{
				"buffer_size": 3929,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/ships/battlecrab.php",
			"settings":
			{
				"buffer_size": 1686,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/systems/structure.php",
			"settings":
			{
				"buffer_size": 5299,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "postGameData.php",
			"settings":
			{
				"buffer_size": 3022,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/systems/weapons/dual.php",
			"settings":
			{
				"buffer_size": 2688,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "cam.js",
			"settings":
			{
				"buffer_size": 2799,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/systems/system.php",
			"settings":
			{
				"buffer_size": 5697,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "server/systems/weapon.php",
			"settings":
			{
				"buffer_size": 4497,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "server/systems/weapons/em.php",
			"settings":
			{
				"buffer_size": 2481,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/systems/weapons/area.php",
			"settings":
			{
				"buffer_size": 1057,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/systems/nonweapon.php",
			"settings":
			{
				"buffer_size": 6234,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "server/systems/weapons/laser.php",
			"settings":
			{
				"buffer_size": 6750,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/systems/weapons/launcher.php",
			"settings":
			{
				"buffer_size": 1982,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/fighter.php",
			"settings":
			{
				"buffer_size": 4488,
				"encoding": "UTF-8",
				"line_ending": "Windows",
				"name": "<php"
			}
		},
		{
			"file": "server/ship.php",
			"settings":
			{
				"buffer_size": 31189,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/salvo.php",
			"settings":
			{
				"buffer_size": 1654,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/systems/weapons/pulse.php",
			"settings":
			{
				"buffer_size": 4270,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "graphics.js",
			"settings":
			{
				"buffer_size": 8626,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/ships/olympus.php",
			"settings":
			{
				"buffer_size": 1910,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/debug.php",
			"settings":
			{
				"buffer_size": 188,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "createGame.php",
			"settings":
			{
				"buffer_size": 1418,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "script.js",
			"settings":
			{
				"buffer_size": 14129,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "lobby.php",
			"settings":
			{
				"buffer_size": 8127,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "game.js",
			"settings":
			{
				"buffer_size": 68668,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "Searching 73 files for \"deployment l\"\n\nC:\\xampp\\htdocs\\fire\\game.js:\n 1335  \t\t$(\"#combatlogWrapper\")\n 1336  \t\t.show()\n 1337: \t\t.find(\".combatLogHeader\").html(\"Deployment Log\").end()\n 1338  \t\t.find(\"#combatLog\").children().children().remove();\n 1339  \n\n1 match in 1 file\n\n\nSearching 73 files for \"was deployed\"\n\nC:\\xampp\\htdocs\\fire\\game.js:\n 2051  \t\t\t\t\t\tcolor = \"#27e627\";\n 2052  \t\t\t\t\t}\n 2053: \t\t\t\t\thtml = \"<span><font color='\" + color + \"'>Flight #\" + this.ships[i].id + \"</font> was deployed</span>\";\n 2054  \n 2055  \t\t\t\t\t$(\"#combatLog\").find(\"tbody\").append($(\"<tr>\")\n\n1 match in 1 file\n\n\nSearching 73 files for \"adjustZoom\"\n\nC:\\xampp\\htdocs\\fire\\cam.js:\n   41  \t},\n   42  \t\n   43: \tadjustZoom: function(e, pos){\n   44  \t\tif (e.originalEvent.wheelDelta == 120) {\n   45  \t\t\tthis.z = Math.min(2, this.z + 0.2);\n\nC:\\xampp\\htdocs\\fire\\script.js:\n   88  \tvar pos = new Point(e.clientX - offset.x, e.clientY - offset.y);\n   89  \tif (game){\n   90: \t\tcam.adjustZoom(e, pos);\n   91  \t\t//game.draw();\n   92  \t}\t\n\n2 matches across 2 files\n\n\nSearching 73 files for \"setFacing\"\n\nC:\\xampp\\htdocs\\fire\\server\\manager.php:\n  971  \tpublic function setupShips(){\n  972  \t\tfor ($i = 0; $i < sizeof($this->ships); $i++){\n  973: \t\t\t$this->ships[$i]->setFacing();\n  974  \t\t\t$this->ships[$i]->setPosition();\n  975  \t\t\t$this->ships[$i]->setupForDamage();\n\nC:\\xampp\\htdocs\\fire\\server\\ship.php:\n  758  \t}\n  759  \n  760: \tpublic function setFacing(){\n  761  \t\tfor ($i = 0; $i < sizeof($this->actions); $i++){\n  762  \t\t\tif ($this->actions[$i]->type == \"turn\"){\n\n2 matches across 2 files\n\n\nSearching 14 files for \"facing = \"\n\nC:\\xampp\\htdocs\\fire\\game.js:\n  199  \t\telse {\n  200  \t\t\ts.mission = mission;\n  201: \t\t\ts.facing = getAngleFromTo(o, dest);\n  202  \t\t\ts.setTarget();\n  203  \t\t\ts.setSize();\n  ...\n  237  \t\tvar hangar = s.getSystemById(this.flightDeploy.id)\n  238  \t\tvar o = s.getPlannedPos();\n  239: \t\tvar facing = getAngleFromTo(o, dest);\n  240  \t\tvar p = getPointInDirection(s.size/2, facing, o.x, o.y);\n  241  \t\tvar mission = {unitid: aUnit, turn: this.turn, type: this.flightDeploy.mission, targetid: t.id || 0, x: dest.x, y: dest.y, arrived: 0, new: 1};\n  ...\n 1110  \t\t\tif (!sensor.ew.length){continue;}\n 1111  \t\t\tvar loc = this.ships[i].getPlannedPos();\n 1112: \t\t\tvar facing = this.ships[i].getPlannedFacing();\n 1113  \t\t\tvar ew = sensor.ew[sensor.ew.length-1];\n 1114  \t\t\tvar str = sensor.getOutput();\n ....\n 1571  \t\t\t\t\t\t\t\tvar step = 1;\n 1572  \t\t\t\t\t\t\t\tif (action.a > 0){\n 1573: \t\t\t\t\t\t\t\t\tgame.ships[i].drawFacing = addToDirection(game.ships[i].drawFacing, step);\n 1574  \t\t\t\t\t\t\t\t\tgame.ships[i].actions[j].angle -= step;\n 1575  \t\t\t\t\t\t\t\t}\n 1576  \t\t\t\t\t\t\t\telse {\n 1577: \t\t\t\t\t\t\t\t\tgame.ships[i].drawFacing = addToDirection(game.ships[i].drawFacing, -step);\n 1578  \t\t\t\t\t\t\t\t\tgame.ships[i].actions[j].angle += step;\n 1579  \t\t\t\t\t\t\t\t}\n ....\n 2373  \t\t\t\t\t\t\t\tif (ship.salvo){return;}\n 2374  \t\t\t\t\t\t\t\tvar shipLoc = ship.getPlannedPos();\n 2375: \t\t\t\t\t\t\t\tvar facing = ship.getPlannedFacing();\n 2376  \t\t\t\t\t\t\t\tif (ship.hasWeaponsSelected()){\n 2377  \t\t\t\t\t\t\t\t\tif (ship.id != vessel.id){\n\nC:\\xampp\\htdocs\\fire\\mixed.js:\n   25  }\n   26  \n   27: Mixed.prototype.getPlannedFacing = function(){\n   28  \tif (game.phase < 2){\n   29  \t\treturn this.facing;\n   ..\n   33  }\n   34  \n   35: Mixed.prototype.getDrawFacing = function(){\n   36  \treturn this.facing;\n   37  }\n   ..\n  243  \tif (this.mission.type == 1){  // patrol goal\n  244  \t\tthis.finalStep = {x: this.mission.x, y: this.mission.y};\n  245: \t\t//this.facing = getAngleFromTo(p, this.finalStep);\n  246  \t\td = getDistance(p, this.finalStep);\n  247  \t\tif (d < i){\n  ...\n  254  \t\t\tif (target.ship){\n  255  \t\t\t\tthis.finalStep = target.getPlannedPos();\n  256: \t\t\t\tthis.facing = getAngleFromTo(this, this.finalStep);\n  257  \t\t\t\td = getDistance(p, this.finalStep);\n  258  \t\t\t\tif (d < i){\n  ...\n  265  \t\t\t\t}\n  266  \t\t\t\tthis.finalStep = target.nextStep;\n  267: \t\t\t\t//this.facing = getAngleFromTo(p, this.finalStep);\n  268  \t\t\t\td = getDistance(p, target.nextStep);\n  269  \t\t\t\tif (d < i){\n  ...\n  284  }\n  285  \n  286: Mixed.prototype.setPreMoveFacing = function(){\n  287  \t//if (this.salvo){console.log(\"setPreMoveFacing\");}\n  288  \tif (this.mission.turn == game.turn){\n  289: \t\tthis.facing = getAngleFromTo(this.getPlannedPos(), this.getTargetPosition());\n  290  \t}\n  291  }\n  292  \n  293: Mixed.prototype.setPostMoveFacing = function(){\n  294  \t//if (this.salvo){console.log(\"setPostMoveFacing\");}\n  295  \tif (this.mission.turn == game.turn){\n  296: \t\tthis.facing = getAngleFromTo(this.getPlannedPos(), this.getTargetPosition());\n  297  \t}\n  298  }\n\nC:\\xampp\\htdocs\\fire\\script.js:\n  119  \n  120  \tvar shooterLoc = shooter.getPlannedPos();\n  121: \tvar facing = shooter.getPlannedFacing();\t\t\t\t\t\n  122  \tvar targetData1 = $(\"#game\").find(\"#weaponAimTableWrapper\").find(\"#targetInfo\").find(\"#targetData1\");\n  123  \tvar targetData2 = $(\"#game\").find(\"#weaponAimTableWrapper\").find(\"#targetInfo\").find(\"#targetData2\");\n  ...\n  371  \t\tif (game.vector){\n  372  \t\t\t\tshipLoc = ship.getPlannedPos();\n  373: \t\t\t\tfacing = ship.getPlannedFacing();\n  374  \t\t\tvar dist = Math.floor(getDistance(shipLoc, pos));\n  375  \t\t\tvar a = getAngleFromTo(shipLoc, pos);\n  ...\n  381  \t\telse if (game.sensorMode){\n  382  \t\t\tshipLoc = ship.getPlannedPos();\n  383: \t\t\tfacing = ship.getPlannedFacing();\n  384  \t\t\tsensorEvent(false, ship, shipLoc, facing, Math.floor(getDistance(shipLoc, pos)), addAngle(facing, getAngleFromTo(shipLoc, pos)));\n  385  \t\t\treturn;\n  ...\n  387  \t\telse if (game.turnMode){\n  388  \t\t\tshipLoc = ship.getPlannedPos();\n  389: \t\t\tfacing = ship.getPlannedFacing();\n  390  \t\t\tship.handleTurning(e, shipLoc, facing, pos);\n  391  \t\t}\n  ...\n  408  \n  409  function sensorize(ship, pos){\n  410: \tvar facing = ship.getPlannedFacing();\n  411  \tvar shipLoc = ship.getPlannedPos();\n  412  \tvar a = addAngle(facing, getAngleFromTo(shipLoc, pos));\n\nC:\\xampp\\htdocs\\fire\\shipclasses.js:\n    7  \tthis.x = data.x || 0;\n    8  \tthis.y = data.y || 0;\n    9: \tthis.facing = data.facing || 0;\n   10  \tthis.faction = data.faction;\n   11  \tthis.mass = data.mass;\n   ..\n   46  \tthis.friendly;\n   47  \tthis.deployed;\n   48: \tthis.drawFacing = 0;\n   49  \tthis.drawX = 0;\n   50  \tthis.drawY = 0;\n   ..\n  184  \t\t}\n  185  \t\telse {\n  186: \t\t\tvar facing = 0;\n  187  \t\t\tvar index;\n  188  \t\t\tfor (var i = 0; i < playerstatus.length; i++){\n  ...\n  191  \t\t\t\t}\n  192  \t\t\t}\n  193: \t\t\tfacing = 0 + (180 * (index % 2));\n  194  \t\t\tthis.actions.push(new Move(-1, \"deploy\", 0, pos.x, pos.y, facing, 0, 0, 1, 1, 0));\n  195  \t\t\tthis.deployed = true;\n  196: \t\t\tthis.facing = facing;\n  197: \t\t\tthis.drawFacing = facing;\n  198  \t\t\tthis.x = pos.x;\n  199  \t\t\tthis.y = pos.y;\n  ...\n 1267  \t\t\t} else if (this.actions[0].a < 0){this.actions[0].a += 360;}\n 1268  \t\t\tconsole.log(this.actions[0].a);\n 1269: \t\t\tthis.drawFacing = this.actions[0].a;\n 1270: \t\t\tthis.facing = this.actions[0].a;\n 1271  \t\t\tgame.redraw()\n 1272  \t\t}\n ....\n 1701  }\n 1702  \n 1703: Ship.prototype.setPreMoveFacing = function(){\n 1704  \tif (this.actions.length && this.actions[0].type == \"deploy\"){\n 1705: \t\tthis.drawFacing = 0;\n 1706  \t\tfor (var i = 0; i < Math.min(this.actions.length, 2); i++){\n 1707  \t\t\tthis.drawFacing += this.actions[i].a;\n ....\n 1709  \t}\n 1710  \telse {\n 1711: \t\tthis.drawFacing = this.facing;\n 1712  \t}\n 1713  }\n 1714  \n 1715: Ship.prototype.setPostMoveFacing = function(){\n 1716: \tthis.drawFacing = this.facing;\n 1717  \tfor (var i = 0; i < this.actions.length; i++){\n 1718  \t\tif (this.actions[i].type == \"turn\"){\n ....\n 2014  }\n 2015  \n 2016: Ship.prototype.getPlannedFacing = function(){\n 2017  \tvar angle = 0;\n 2018  \n ....\n 2025  }\n 2026  \n 2027: Ship.prototype.getDrawFacing = function(){\n 2028  \treturn this.drawFacing;\n 2029  }\n ....\n 2896  \t\tvar fSize = 24;\n 2897  \t\tvar tresh = 20;\n 2898: \t\tvar drawFacing = this.getDrawFacing();\n 2899  \n 2900  \t\tvar t = document.createElement(\"canvas\");\n\nC:\\xampp\\htdocs\\fire\\systems.js:\n 1204  \t\tvar ew = this.ew[this.ew.length-1];\n 1205  \t\tvar str = this.getOutput();\n 1206: \t\tvar facing = ship.getPlannedFacing();\n 1207  \t\tvar w;\n 1208  \t\tif (ew.angle == -1){\n\n37 matches across 5 files\n\n\nSearching 14 files for \".facing = \"\n\nC:\\xampp\\htdocs\\fire\\game.js:\n  199  \t\telse {\n  200  \t\t\ts.mission = mission;\n  201: \t\t\ts.facing = getAngleFromTo(o, dest);\n  202  \t\t\ts.setTarget();\n  203  \t\t\ts.setSize();\n\nC:\\xampp\\htdocs\\fire\\mixed.js:\n  243  \tif (this.mission.type == 1){  // patrol goal\n  244  \t\tthis.finalStep = {x: this.mission.x, y: this.mission.y};\n  245: \t\t//this.facing = getAngleFromTo(p, this.finalStep);\n  246  \t\td = getDistance(p, this.finalStep);\n  247  \t\tif (d < i){\n  ...\n  254  \t\t\tif (target.ship){\n  255  \t\t\t\tthis.finalStep = target.getPlannedPos();\n  256: \t\t\t\tthis.facing = getAngleFromTo(this, this.finalStep);\n  257  \t\t\t\td = getDistance(p, this.finalStep);\n  258  \t\t\t\tif (d < i){\n  ...\n  265  \t\t\t\t}\n  266  \t\t\t\tthis.finalStep = target.nextStep;\n  267: \t\t\t\t//this.facing = getAngleFromTo(p, this.finalStep);\n  268  \t\t\t\td = getDistance(p, target.nextStep);\n  269  \t\t\t\tif (d < i){\n  ...\n  287  \t//if (this.salvo){console.log(\"setPreMoveFacing\");}\n  288  \tif (this.mission.turn == game.turn){\n  289: \t\tthis.facing = getAngleFromTo(this.getPlannedPos(), this.getTargetPosition());\n  290  \t}\n  291  }\n  ...\n  294  \t//if (this.salvo){console.log(\"setPostMoveFacing\");}\n  295  \tif (this.mission.turn == game.turn){\n  296: \t\tthis.facing = getAngleFromTo(this.getPlannedPos(), this.getTargetPosition());\n  297  \t}\n  298  }\n\nC:\\xampp\\htdocs\\fire\\shipclasses.js:\n    7  \tthis.x = data.x || 0;\n    8  \tthis.y = data.y || 0;\n    9: \tthis.facing = data.facing || 0;\n   10  \tthis.faction = data.faction;\n   11  \tthis.mass = data.mass;\n   ..\n  194  \t\t\tthis.actions.push(new Move(-1, \"deploy\", 0, pos.x, pos.y, facing, 0, 0, 1, 1, 0));\n  195  \t\t\tthis.deployed = true;\n  196: \t\t\tthis.facing = facing;\n  197  \t\t\tthis.drawFacing = facing;\n  198  \t\t\tthis.x = pos.x;\n  ...\n 1268  \t\t\tconsole.log(this.actions[0].a);\n 1269  \t\t\tthis.drawFacing = this.actions[0].a;\n 1270: \t\t\tthis.facing = this.actions[0].a;\n 1271  \t\t\tgame.redraw()\n 1272  \t\t}\n\n9 matches across 3 files\n\n\nSearching 14 files for \".facing = \"\n\nC:\\xampp\\htdocs\\fire\\game.js:\n  199  \t\telse {\n  200  \t\t\ts.mission = mission;\n  201: \t\t\ts.facing = getAngleFromTo(o, dest);\n  202  \t\t\ts.setTarget();\n  203  \t\t\ts.setSize();\n\nC:\\xampp\\htdocs\\fire\\mixed.js:\n  243  \tif (this.mission.type == 1){  // patrol goal\n  244  \t\tthis.finalStep = {x: this.mission.x, y: this.mission.y};\n  245: \t\t//this.facing = getAngleFromTo(p, this.finalStep);\n  246  \t\td = getDistance(p, this.finalStep);\n  247  \t\tif (d < i){\n  ...\n  254  \t\t\tif (target.ship){\n  255  \t\t\t\tthis.finalStep = target.getPlannedPos();\n  256: \t\t\t\tthis.facing = getAngleFromTo(this, this.finalStep);\n  257  \t\t\t\td = getDistance(p, this.finalStep);\n  258  \t\t\t\tif (d < i){\n  ...\n  265  \t\t\t\t}\n  266  \t\t\t\tthis.finalStep = target.nextStep;\n  267: \t\t\t\t//this.facing = getAngleFromTo(p, this.finalStep);\n  268  \t\t\t\td = getDistance(p, target.nextStep);\n  269  \t\t\t\tif (d < i){\n  ...\n  287  \t//if (this.salvo){console.log(\"setPreMoveFacing\");}\n  288  \tif (this.mission.turn == game.turn){\n  289: \t\tthis.facing = getAngleFromTo(this.getPlannedPos(), this.getTargetPosition());\n  290  \t}\n  291  }\n  ...\n  294  \t//if (this.salvo){console.log(\"setPostMoveFacing\");}\n  295  \tif (this.mission.turn == game.turn){\n  296: \t\tthis.facing = getAngleFromTo(this.getPlannedPos(), this.getTargetPosition());\n  297  \t}\n  298  }\n\nC:\\xampp\\htdocs\\fire\\shipclasses.js:\n    7  \tthis.x = data.x || 0;\n    8  \tthis.y = data.y || 0;\n    9: \tthis.facing = data.facing || 0;\n   10  \tthis.faction = data.faction;\n   11  \tthis.mass = data.mass;\n   ..\n  194  \t\t\tthis.actions.push(new Move(-1, \"deploy\", 0, pos.x, pos.y, facing, 0, 0, 1, 1, 0));\n  195  \t\t\tthis.deployed = true;\n  196: \t\t\tthis.facing = facing;\n  197  \t\t\tthis.drawFacing = facing;\n  198  \t\t\tthis.x = pos.x;\n  ...\n 1268  \t\t\tconsole.log(this.actions[0].a);\n 1269  \t\t\tthis.drawFacing = this.actions[0].a;\n 1270: \t\t\tthis.facing = this.actions[0].a;\n 1271  \t\t\tgame.redraw()\n 1272  \t\t}\n\n9 matches across 3 files\n\n\nSearching 14 files for \"id == 14\"\n\nC:\\xampp\\htdocs\\fire\\mixed.js:\n  238  \n  239  Mixed.prototype.setTarget = function(){\n  240: \tif (this.id == 14){\n  241  \t\tconsole.log(\"ding\");\n  242  \t}\n\nC:\\xampp\\htdocs\\fire\\shipclasses.js:\n 3019  \n 3020  Ship.prototype.animationSetupMove = function(){\n 3021: \tif (this.id == 14){\n 3022  \t\tconsole.log(\"ding\");\n 3023  \t}\n\n2 matches across 2 files\n\n\nSearching 14 files for \"var need\"\n\nC:\\xampp\\htdocs\\fire\\flights.js:\n  159  \n  160  \t//if (this.friendly && game.phase == -1 && this.available < game.turn){\n  161: \t\tvar need = 1;\n  162  \t\tvar elapsed = game.turn - this.mission.turn;\n  163  \t\tif (this.friendly && elapsed >= need && game.phase == -1){\n\nC:\\xampp\\htdocs\\fire\\shipclasses.js:\n 1176  \t\t\tvar min = 5;\n 1177  \t\t\tvar have = this.getRemainingEP();\n 1178: \t\t\tvar need = this.getTurnCost() * min;\n 1179  \t\t\tif (have >= need){\n 1180  \t\t\t\treturn true;\n ....\n 1454  \t\t\t\tif (system.getBoostLevel() < system.maxBoost){\n 1455  \t\t\t\t\tvar avail = this.getUnusedPower();\n 1456: \t\t\t\t\tvar need = system.getEffiency();\n 1457  \t\t\t\t\tif (avail >= need){\n 1458  \t\t\t\t\t\treturn true;\n\nC:\\xampp\\htdocs\\fire\\systems.js:\n  228  \tif (this.disabled || this.destroyed){return 0;}\n  229  \t\n  230: \tvar need = this.reload;\n  231  \tvar has = this.getTimeLoaded();\n  232  \tif (has / need > 1){\n\n4 matches across 3 files\n\n\nSearching 74 files for \"var need\"\n\nC:\\xampp\\htdocs\\fire\\flights.js:\n  159  \n  160  \t//if (this.friendly && game.phase == -1 && this.available < game.turn){\n  161: \t\tvar need = 1;\n  162  \t\tvar elapsed = game.turn - this.mission.turn;\n  163  \t\tif (this.friendly && elapsed >= need && game.phase == -1){\n\nC:\\xampp\\htdocs\\fire\\shipclasses.js:\n 1176  \t\t\tvar min = 5;\n 1177  \t\t\tvar have = this.getRemainingEP();\n 1178: \t\t\tvar need = this.getTurnCost() * min;\n 1179  \t\t\tif (have >= need){\n 1180  \t\t\t\treturn true;\n ....\n 1454  \t\t\t\tif (system.getBoostLevel() < system.maxBoost){\n 1455  \t\t\t\t\tvar avail = this.getUnusedPower();\n 1456: \t\t\t\t\tvar need = system.getEffiency();\n 1457  \t\t\t\t\tif (avail >= need){\n 1458  \t\t\t\t\t\treturn true;\n\nC:\\xampp\\htdocs\\fire\\systems.js:\n  228  \tif (this.disabled || this.destroyed){return 0;}\n  229  \t\n  230: \tvar need = this.reload;\n  231  \tvar has = this.getTimeLoaded();\n  232  \tif (has / need > 1){\n\n4 matches across 3 files\n\n\nSearching 74 files for \"\".not\"\n\n0 matches\n\nSearching 74 files for \"RoF\"\n\nC:\\xampp\\htdocs\\fire\\server\\mixed.php:\n    8  \tpublic $cost = 0;\n    9  \tpublic $mass = 0;\n   10: \tpublic $profile = 0;\n   11  \n   12  \tfunction __construct($id, $userid, $available, $status, $destroyed){\n\nC:\\xampp\\htdocs\\fire\\server\\ship.php:\n   30  \tpublic $traverse;\n   31  \tpublic $mass = 0;\n   32: \tpublic $profile = array();\n   33  \tpublic $index = 0;\n   34  \tpublic $actions = array();\n   ..\n  576  \t\t$multi += $fire->shooter->getOffensiveBonus($this->id);\n  577  \t\t//Debug::log($multi);\n  578: \t\t$multi += $this->getImpulseProfileMod($fire);\n  579  \t\t//Debug::log($multi);\n  580  \t\t$multi -= $this->getDefensiveBonus($fire->shooter->id);\n  ...\n  700  \t\n  701  \t\t$base = $this->getBaseHitChance();\n  702: \t\t$a = $base * $this->profile[0];\n  703: \t\t$b = $base * $this->profile[1];\n  704  \t\t$sub = ((90 - $angle) * $a) + (($angle - 0) * $b);\n  705  \t\t$sub /= (90 - 0);\n  ...\n  712  \t}\n  713  \n  714: \tpublic function getImpulseProfileMod($fire){\n  715  \t\tif (!$fire->shooter->ship || !$fire->target->ship){\n  716  \t\t\t//Debug::log(\"shooter or target is NOT A SHIP -> no impulse mod\");\n\nC:\\xampp\\htdocs\\fire\\server\\ships\\altarian.php:\n    7  \tpublic $size = 55;\n    8  \tpublic static $value = 525;\n    9: \tpublic $profile = array(0.93, 1.07);\n   10  \tpublic $mass = 4250;\n   11  \n\nC:\\xampp\\htdocs\\fire\\server\\ships\\artemis.php:\n    7  \tpublic $size = 50;\n    8  \tpublic static $value = 490;\n    9: \tpublic $profile = array(0.93, 1.07);\n   10  \tpublic $mass = 3500;\n   11  \n\nC:\\xampp\\htdocs\\fire\\server\\ships\\avenger.php:\n    7  \tpublic $size = 80;\n    8  \tpublic static $value = 400;\n    9: \tpublic $profile = array(0.91, 1.09);\n   10  \tpublic $mass = 10250;\n   11  \n\nC:\\xampp\\htdocs\\fire\\server\\ships\\battlecrab.php:\n    7  \tpublic $size = 100;\n    8  \tpublic static $value = 1200;\n    9: \tpublic $profile = array(0.88, 1.12);\n   10  \tpublic $mass = 14500;\n   11  \n\nC:\\xampp\\htdocs\\fire\\server\\ships\\darkner.php:\n    7  \tpublic $size = 50;\n    8  \tpublic static $value = 420;\n    9: \tpublic $profile = array(0.93, 1.07);\n   10  \tpublic $mass = 2000;\n   11  \n\nC:\\xampp\\htdocs\\fire\\server\\ships\\demos.php:\n    7  \tpublic $size = 50;\n    8  \tpublic static $value = 450;\n    9: \tpublic $profile = array(0.92, 1.08);\n   10  \tpublic $mass = 3000;\n   11  \n\nC:\\xampp\\htdocs\\fire\\server\\ships\\gquan.php:\n    7  \tpublic $size = 80;\n    8  \tpublic static $value = 875;\n    9: \tpublic $profile = array(0.95, 1.05);\n   10  \tpublic $mass = 8750;\n   11  \n\nC:\\xampp\\htdocs\\fire\\server\\ships\\haven.php:\n    7  \tpublic $size = 35;\n    8  \tpublic static $value = 240;\n    9: \tpublic $profile = array(0.9, 1.1);\n   10  \tpublic $mass = 750;\n   11  \n\nC:\\xampp\\htdocs\\fire\\server\\ships\\hyperion.php:\n    7  \tpublic $size = 80;\n    8  \tpublic static $value = 850;\n    9: \tpublic $profile = array(0.93, 1.07);\n   10  \tpublic $mass = 8000;\n   11  \n\nC:\\xampp\\htdocs\\fire\\server\\ships\\olympus.php:\n    7  \tpublic $size = 45;\n    8  \tpublic static $value = 410;\n    9: \tpublic $profile = array(0.94, 1.06);\n   10  \tpublic $mass = 2500;\n   11  \n\nC:\\xampp\\htdocs\\fire\\server\\ships\\omega.php:\n    7  \tpublic $size = 100;\n    8  \tpublic static $value = 1200;\n    9: \tpublic $profile = array(0.91, 1.09);\n   10  \tpublic $mass = 14500;\n   11  \n\nC:\\xampp\\htdocs\\fire\\server\\ships\\primus.php:\n    7  \tpublic $size = 100;\n    8  \tpublic static $value = 1080;\n    9: \tpublic $profile = array(0.92, 1.08);\n   10  \tpublic $mass = 12500;\n   11  \n\nC:\\xampp\\htdocs\\fire\\server\\ships\\saggitarius.php:\n    7  \tpublic $size = 60;\n    8  \tpublic static $value = 400;\n    9: \tpublic $profile = array(0.90, 1.10);\n   10  \tpublic $mass = 4500;\n   11  \n\nC:\\xampp\\htdocs\\fire\\server\\ships\\sharlin.php:\n    7  \tpublic $size = 120;\n    8  \tpublic static $value = 200;\n    9: \tpublic $profile = array(0.90, 1.1);\n   10  \tpublic $mass = 20000;\n   11  \n\nC:\\xampp\\htdocs\\fire\\server\\ships\\tethys.php:\n    7  \tpublic $size = 35;\n    8  \tpublic static $value = 220;\n    9: \tpublic $profile = array(0.95, 1.05);\n   10  \tpublic $mass = 1200;\n   11  \n\nC:\\xampp\\htdocs\\fire\\server\\ships\\tinashi.php:\n    7  \tpublic $size = 70;\n    8  \tpublic static $value = 875;\n    9: \tpublic $profile = array(0.9, 1.1);\n   10  \tpublic $mass = 4250;\n   11  \n\nC:\\xampp\\htdocs\\fire\\server\\ships\\vorchan.php:\n    7  \tpublic $size = 35;\n    8  \tpublic static $value = 360;\n    9: \tpublic $profile = array(0.95, 1.05);\n   10  \tpublic $mass = 1150;\n   11  \n\nC:\\xampp\\htdocs\\fire\\server\\ships\\whitestar.php:\n    7  \tpublic $size = 50;\n    8  \tpublic static $value = 600;\n    9: \tpublic $profile = array(0.95, 1.05);\n   10  \tpublic $mass = 2500;\n   11  \n\nC:\\xampp\\htdocs\\fire\\shipclasses.js:\n    1  function Ship(data){\n    2: \t//id, name, shipType, x, y, facing, faction, mass, cost, profile, size, userid, available, baseHitChance, baseImpulse\n    3  \n    4  \tthis.id = data.id;\n    .\n   11  \tthis.mass = data.mass;\n   12  \tthis.cost = data.cost;\n   13: \tthis.profile = data.profile;\n   14  \tthis.size = Math.floor(data.size/2);\n   15  \tthis.size = data.size;\n   ..\n 1435  \t}\n 1436  \n 1437: \tthis.getProfileMod = function(){\n 1438  \t\treturn Math.floor((1+((((this.getBaseImpulse() / this.getCurrentImpulse())-1)/3)))*100);\n 1439  \t}\n ....\n 1830  Ship.prototype.getStringHitChance = function(){\n 1831  \tvar baseHit = this.getBaseHitChance();\n 1832: \treturn (\"Base Hit: \" + Math.floor(this.profile[0] * baseHit) + \"% - \" + Math.floor(this.profile[1] * baseHit) + \"%\");\n 1833  }\n 1834  \n ....\n 2054  \n 2055  \tbase = this.getBaseHitChance();\n 2056: \ta = base * this.profile[0];\n 2057: \tb = base * this.profile[1];\n 2058  \tsub = ((90 - angle) * a) + ((angle - 0) * b);\n 2059  \tsub /= (90 - 0);\n\nC:\\xampp\\htdocs\\fire\\systems.js:\n 2581  \t\tvar th = document.createElement(\"th\"); th.innerHTML = \"Class\"; th.width = \"80px\"; tr.appendChild(th)\n 2582  \t\tvar th = document.createElement(\"th\"); th.innerHTML = \"Type\"; th.width = \"200px\"; tr.appendChild(th)\n 2583: \t\tvar th = document.createElement(\"th\"); th.innerHTML = \"RoF\"; th.width = \"40px\"; tr.appendChild(th)\n 2584  \t\tvar th = document.createElement(\"th\"); th.innerHTML = \"Cost\"; th.width = \"40px\"; tr.appendChild(th)\n 2585  \t\tvar th = document.createElement(\"th\"); th.innerHTML = \"\"; tr.appendChild(th)\n\n33 matches across 22 files\n\n\nSearching 74 files for \"RoF\"\"\n\nC:\\xampp\\htdocs\\fire\\systems.js:\n 2581  \t\tvar th = document.createElement(\"th\"); th.innerHTML = \"Class\"; th.width = \"80px\"; tr.appendChild(th)\n 2582  \t\tvar th = document.createElement(\"th\"); th.innerHTML = \"Type\"; th.width = \"200px\"; tr.appendChild(th)\n 2583: \t\tvar th = document.createElement(\"th\"); th.innerHTML = \"RoF\"; th.width = \"40px\"; tr.appendChild(th)\n 2584  \t\tvar th = document.createElement(\"th\"); th.innerHTML = \"Cost\"; th.width = \"40px\"; tr.appendChild(th)\n 2585  \t\tvar th = document.createElement(\"th\"); th.innerHTML = \"\"; tr.appendChild(th)\n\n1 match in 1 file\n\n\nSearching 58 files for \"launchRate\"\n\nC:\\xampp\\htdocs\\fire\\game.php:\n  459  \t\t\t</div>\n  460  \t\t\t<div class=\"header\">\n  461: \t\t\t\tCan launch up to <span id=\"launchRate\"></span> units per cycle.\n  462  \t\t\t</div>\n  463  \t\t\t<div class=\"header\">\n\nC:\\xampp\\htdocs\\fire\\gameSetup.php:\n  169  \t\t\t</div>\n  170  \t\t\t<div class=\"header\">\n  171: \t\t\t\tCan launch up to <span id=\"launchRate\"></span> units per cycle.\n  172  \t\t\t</div>\n  173  \t\t\t<div class=\"header\">\n\nC:\\xampp\\htdocs\\fire\\server\\systems\\weapons\\launcher.php:\n   10  \tpublic $mass = 22;\n   11  \tpublic $capacity = array();\n   12: \tpublic $launchRate = array();\n   13  \tpublic $powerReq = 2;\n   14  \tpublic $effiency = 1;\n   ..\n   19  \t\t\t$this->loads[] = new $loads[$i][0]($this->id, -1);\n   20  \t\t\t$this->capacity[] = $loads[$i][1];\n   21: \t\t\t$this->launchRate[] = $loads[$i][2];\n   22  \t\t}\n   23  \n\n4 matches across 3 files\n\n\nSearching 58 files for \"RoF\"\n\nC:\\xampp\\htdocs\\fire\\server\\mixed.php:\n    8  \tpublic $cost = 0;\n    9  \tpublic $mass = 0;\n   10: \tpublic $profile = 0;\n   11  \n   12  \tfunction __construct($id, $userid, $available, $status, $destroyed){\n\nC:\\xampp\\htdocs\\fire\\server\\ship.php:\n   30  \tpublic $traverse;\n   31  \tpublic $mass = 0;\n   32: \tpublic $profile = array();\n   33  \tpublic $index = 0;\n   34  \tpublic $actions = array();\n   ..\n  576  \t\t$multi += $fire->shooter->getOffensiveBonus($this->id);\n  577  \t\t//Debug::log($multi);\n  578: \t\t$multi += $this->getImpulseProfileMod($fire);\n  579  \t\t//Debug::log($multi);\n  580  \t\t$multi -= $this->getDefensiveBonus($fire->shooter->id);\n  ...\n  700  \t\n  701  \t\t$base = $this->getBaseHitChance();\n  702: \t\t$a = $base * $this->profile[0];\n  703: \t\t$b = $base * $this->profile[1];\n  704  \t\t$sub = ((90 - $angle) * $a) + (($angle - 0) * $b);\n  705  \t\t$sub /= (90 - 0);\n  ...\n  712  \t}\n  713  \n  714: \tpublic function getImpulseProfileMod($fire){\n  715  \t\tif (!$fire->shooter->ship || !$fire->target->ship){\n  716  \t\t\t//Debug::log(\"shooter or target is NOT A SHIP -> no impulse mod\");\n\nC:\\xampp\\htdocs\\fire\\server\\ships\\altarian.php:\n    7  \tpublic $size = 55;\n    8  \tpublic static $value = 525;\n    9: \tpublic $profile = array(0.93, 1.07);\n   10  \tpublic $mass = 4250;\n   11  \n\nC:\\xampp\\htdocs\\fire\\server\\ships\\artemis.php:\n    7  \tpublic $size = 50;\n    8  \tpublic static $value = 490;\n    9: \tpublic $profile = array(0.93, 1.07);\n   10  \tpublic $mass = 3500;\n   11  \n\nC:\\xampp\\htdocs\\fire\\server\\ships\\avenger.php:\n    7  \tpublic $size = 80;\n    8  \tpublic static $value = 400;\n    9: \tpublic $profile = array(0.91, 1.09);\n   10  \tpublic $mass = 10250;\n   11  \n\nC:\\xampp\\htdocs\\fire\\server\\ships\\battlecrab.php:\n    7  \tpublic $size = 100;\n    8  \tpublic static $value = 1200;\n    9: \tpublic $profile = array(0.88, 1.12);\n   10  \tpublic $mass = 14500;\n   11  \n\nC:\\xampp\\htdocs\\fire\\server\\ships\\darkner.php:\n    7  \tpublic $size = 50;\n    8  \tpublic static $value = 420;\n    9: \tpublic $profile = array(0.93, 1.07);\n   10  \tpublic $mass = 2000;\n   11  \n\nC:\\xampp\\htdocs\\fire\\server\\ships\\demos.php:\n    7  \tpublic $size = 50;\n    8  \tpublic static $value = 450;\n    9: \tpublic $profile = array(0.92, 1.08);\n   10  \tpublic $mass = 3000;\n   11  \n\nC:\\xampp\\htdocs\\fire\\server\\ships\\gquan.php:\n    7  \tpublic $size = 80;\n    8  \tpublic static $value = 875;\n    9: \tpublic $profile = array(0.95, 1.05);\n   10  \tpublic $mass = 8750;\n   11  \n\nC:\\xampp\\htdocs\\fire\\server\\ships\\haven.php:\n    7  \tpublic $size = 35;\n    8  \tpublic static $value = 240;\n    9: \tpublic $profile = array(0.9, 1.1);\n   10  \tpublic $mass = 750;\n   11  \n\nC:\\xampp\\htdocs\\fire\\server\\ships\\hyperion.php:\n    7  \tpublic $size = 80;\n    8  \tpublic static $value = 850;\n    9: \tpublic $profile = array(0.93, 1.07);\n   10  \tpublic $mass = 8000;\n   11  \n\nC:\\xampp\\htdocs\\fire\\server\\ships\\olympus.php:\n    7  \tpublic $size = 45;\n    8  \tpublic static $value = 410;\n    9: \tpublic $profile = array(0.94, 1.06);\n   10  \tpublic $mass = 2500;\n   11  \n\nC:\\xampp\\htdocs\\fire\\server\\ships\\omega.php:\n    7  \tpublic $size = 100;\n    8  \tpublic static $value = 1200;\n    9: \tpublic $profile = array(0.91, 1.09);\n   10  \tpublic $mass = 14500;\n   11  \n\nC:\\xampp\\htdocs\\fire\\server\\ships\\primus.php:\n    7  \tpublic $size = 100;\n    8  \tpublic static $value = 1080;\n    9: \tpublic $profile = array(0.92, 1.08);\n   10  \tpublic $mass = 12500;\n   11  \n\nC:\\xampp\\htdocs\\fire\\server\\ships\\saggitarius.php:\n    7  \tpublic $size = 60;\n    8  \tpublic static $value = 400;\n    9: \tpublic $profile = array(0.90, 1.10);\n   10  \tpublic $mass = 4500;\n   11  \n\nC:\\xampp\\htdocs\\fire\\server\\ships\\sharlin.php:\n    7  \tpublic $size = 120;\n    8  \tpublic static $value = 200;\n    9: \tpublic $profile = array(0.90, 1.1);\n   10  \tpublic $mass = 20000;\n   11  \n\nC:\\xampp\\htdocs\\fire\\server\\ships\\tethys.php:\n    7  \tpublic $size = 35;\n    8  \tpublic static $value = 220;\n    9: \tpublic $profile = array(0.95, 1.05);\n   10  \tpublic $mass = 1200;\n   11  \n\nC:\\xampp\\htdocs\\fire\\server\\ships\\tinashi.php:\n    7  \tpublic $size = 70;\n    8  \tpublic static $value = 875;\n    9: \tpublic $profile = array(0.9, 1.1);\n   10  \tpublic $mass = 4250;\n   11  \n\nC:\\xampp\\htdocs\\fire\\server\\ships\\vorchan.php:\n    7  \tpublic $size = 35;\n    8  \tpublic static $value = 360;\n    9: \tpublic $profile = array(0.95, 1.05);\n   10  \tpublic $mass = 1150;\n   11  \n\nC:\\xampp\\htdocs\\fire\\server\\ships\\whitestar.php:\n    7  \tpublic $size = 50;\n    8  \tpublic static $value = 600;\n    9: \tpublic $profile = array(0.95, 1.05);\n   10  \tpublic $mass = 2500;\n   11  \n\n24 matches across 20 files\n\n\nSearching 58 files for \"\"\"\n\nC:\\xampp\\htdocs\\fire\\balltest.php:\n    7  \n    8  \tfor ($i = 0; $i < 15; $i++){\n    9: \t\t$balls[] = new Salvo($i, 1, 0, \"Hasta\", \"launched\", 1, 0);\n   10  \n   11  \t\t$balls[$i]->shooterid = mt_rand(0, 10);\n   ..\n   18  \t\n   19  \tforeach ($balls as $ball){\n   20: \t\techo \"</br>\";\n   21: \t\techo $ball->id.\" - target: \". get_class($ball->target).\" #\".$ball->target->id;\n   22: \t\techo \"</br>\";\n   23  \t}\n   24  \n   ..\n   34  \t\t});\n   35  \n   36: \t\techo \"</br>\";\n   37: \t\techo \"</br>\";\n   38: \t\techo \"</br>\";\n   39  \n   40  \tforeach ($balls as $ball){\n   41: \t\techo \"</br>\";\n   42: \t\t//echo $ball->id.\" - target: \". get_class($ball->target).\" #\".$ball->target->id;\n   43: \t\techo $ball->id.\" - \".$ball->shooterid;\n   44: \t\techo \"</br>\";\n   45  \t}\n   46: \t\techo \"</br>\";\n   47: \t\techo \"</br>\";\n   48  \t\t\t\t$time += microtime(true); \n   49: \t\t\t\techo \"</br><span style='font-size: 20px'>Time: \".round($time, 3).\" seconds.\";\n   50  \t?>\n   51  \n\nC:\\xampp\\htdocs\\fire\\combattest.php:\n   17  \t\t\t$totalStruct = 0;\n   18  \n   19: \t\t\techo \"<table style='display:inline-block; margin-left:30px; margin-right: 60px; vertical-align: top'>\";\n   20  \n   21: \t\t\techo \"<tr><th style='font-size: 20px' colSpan=7>\".$guns.\"x \".get_class($fire->weapon).\" vs \".get_class($fire->target).\"</th></tr>\";\n   22  \n   23: \t\t\techo \"<tr style='font-size: 14px'>\";\n   24: \t\t\techo \"<th>Shot</th>\";\n   25: \t\t\techo \"<th>Structure</th>\";\n   26: \t\t\techo \"<th>TotalDMG</th>\";\n   27: \t\t\techo \"<th>StructDMG</th>\";\n   28: \t\t\techo \"<th>ArmourDMG</th>\";\n   29: \t\t\techo \"<th>Left Armour</th>\";\n   30: \t\t\techo \"</tr>\";\n   31  \n   32  \t\t\tfor ($i = 0; $i < $guns; $i++){\n   33: \t\t\t\techo \"<tr>\";\n   34  \n   35: \t\t\t\techo \"<td>#\";\n   36  \t\t\t\techo $i;\n   37: \t\t\t\techo \"</td>\";\n   38  \n   39: \t\t\t\techo \"<td>\";\n   40  \t\t\t\techo $target->primary->getRemainingIntegrity($fire);\n   41: \t\t\t\techo \"</td>\";\n   42  \n   43  \t\t\t\t$weapon->doDamage($fire, 0, $target->primary);\n   ..\n   55  \n   56  \t\t\t\t\tif ($details){\n   57: \t\t\t\t\t\techo \"<td>\";\n   58  \t\t\t\t\t\techo $armour + $struct;\n   59: \t\t\t\t\t\techo \"</td>\";\n   60  \n   61: \t\t\t\t\t\techo \"<td>\";\n   62  \t\t\t\t\t\techo $struct;\n   63: \t\t\t\t\t\techo \"</td>\";\n   64  \n   65: \t\t\t\t\t\techo \"<td>\";\n   66  \t\t\t\t\t\techo $target->structures[0]->armourDmg;\n   67: \t\t\t\t\t\techo \"</td>\";\n   68  \n   69: \t\t\t\t\t\techo \"<td>\";\n   70  \t\t\t\t\t\techo $target->structures[0]->getCurrentNegation();\n   71: \t\t\t\t\t\techo \"</td>\";\n   72  \t\t\t\t\t}\n   73  \t\t\t\t}\n   74  \t\t\t\t$fire->damages = array();\n   75  \t\t\t\t\t\t\n   76: \t\t\t\t//echo \"</tr>\";\n   77  \n   78  \t\t\t\tif ($target->primary->getRemainingIntegrity($fire) <= 0){\n   ..\n   81  \n   82  \t\t\t}\t\n   83: \t\t\techo \"<tr></tr>\";\t\n   84: \t\t\techo \"<tr></tr>\";\t\n   85: \t\t\techo \"<tr></tr>\";\t\n   86: \t\t\techo \"<tr></tr>\";\t\n   87: \t\t\techo \"<tr></tr>\";\t\n   88: \t\t\techo \"<tr></tr>\";\t\n   89: \t\t\techo \"<tr>\";\n   90: \t\t\techo \"<td>#\".$i.\"</td>\";\n   91: \t\t\techo \"<td>\".$target->primary->getRemainingIntegrity().\"</td>\";\n   92: \t\t\techo \"<td>\".$target->structures[0]->getCurrentNegation($fire).\"</td>\";\n   93: \t\t\techo \"<td>\".$totalStruct.\"</td>\";\n   94: \t\t\techo \"<td>\".$totalArmour.\"</td>\";\n   95: \t\t\techo \"<td>\".$target->structures[0]->getCurrentNegation().\"</td>\";\n   96: \t\t\techo \"</tr>\";\n   97  \n   98  \t}\n   ..\n  110  \t\t\t$time = -microtime(true);\n  111  \n  112: \t\t\tfoo(\"HeavyIon\", \"Hyperion\", 1);\n  113: \t\t\tfoo(\"HeavyIon\", \"Tinashi\", 1);\n  114  \n  115  \t\t\t$time += microtime(true); \n  116: \t\t\t//echo \"<span style='font-size: 20px'>Time: \".round($time, 3).\" seconds.\";\n  117  \t\t\n  118  \t\t?>\n\nC:\\xampp\\htdocs\\fire\\createGame.php:\n    3  include_once 'global.php';\n    4  \n    5: if (isset($_SESSION[\"userid\"])){\n    6: \tif (isset($_POST[\"gameName\"]) && isset($_POST[\"pointValue\"])){\n    7: \t\tif ( $_POST[\"gameName\"] != \"\" && $_POST[\"pointValue\"] != \"\"){\n    8: \t\t\tif (ctype_digit($_POST[\"pointValue\"])){\n    9  \t\t\t\t$dbManager = new DBManager();\n   10: \t\t\t\t$id = $dbManager->createNewGameAndJoin($_SESSION[\"userid\"], $_POST[\"gameName\"], $_POST[\"pointValue\"]);\n   11  \t\t\t\tif ($id){\n   12: \t\t\t\t\theader(\"Location: gameSetup.php?gameid=\".$id);\n   13  \t\t\t\t}\n   14  \t\t\t}\n   15  \t\t\telse {\n   16: \t\t\t\techo \"<span class='hinter'>Invalid point value entered</span>\";\n   17  \t\t\t}\n   18  \t\t}\n   19  \t\telse {\n   20: \t\t\t\techo \"<span class='hinter'>Please enter valid game data</span>\";\n   21  \t\t}\n   22  \t}\n   23  }\n   24  else {\n   25: \techo \"<span class='hinter'>Please login</span>\";\n   26  }\n   27  ?>\n   ..\n   31  <head>\n   32  \t<link rel='stylesheet' href='style.css'/>\n   33: \t<script src=\"jquery-2.1.1.min.js\"></script>\n   34  \t<script src='ajax.js'></script>\n   35  </head>\n   36  \t<body>\n   37: \t\t<div style=\"margin: auto; width: 50%\">\n   38  \t\t\t<div>\n   39  \t\t\t\t<span>Create a new game</span>\n   40  \t\t\t</div>\n   41: \t\t\t<form method=\"post\">\n   42  \t\t\t\t<table>\n   43  \t\t\t\t\t<tr>\n   44  \t\t\t\t\t\t<td>\n   45: \t\t\t\t\t\t\t<input type=\"form\" value='myGame' placeholder=\"Game Name\" name=\"gameName\"></input>\t\t\n   46  \t\t\t\t\t\t</td>\n   47  \t\t\t\t\t</tr>\n   48  \t\t\t\t\t<tr>\n   49  \t\t\t\t\t\t<td>\n   50: \t\t\t\t\t\t\t<input type=\"form\" placeholder=\"Point Value\" name=\"pointValue\"></input>\t\t\n   51  \t\t\t\t\t\t</td>\n   52  \t\t\t\t\t</tr>\n   53  \t\t\t\t\t<tr>\n   54  \t\t\t\t\t\t<td>\n   55: \t\t\t\t\t\t\t<input type=\"submit\" value=\"Create New Game\"></input>\t\n   56  \t\t\t\t\t\t</td>\n   57  \t\t\t\t\t</tr>\n\nC:\\xampp\\htdocs\\fire\\game.php:\n    6  \n    7  \n    8: $gameid = $_GET[\"gameid\"];\n    9  $userid;\n   10  $phase;\n   11  \n   12: if (isset($_SESSION[\"userid\"])) {\n   13: \t$userid = $_SESSION[\"userid\"];\n   14  } else $userid = 0;\n   15  \n   16  $manager = new Manager($userid, $gameid);\n   17: if ($manager->status == \"active\"){\n   18  \t$manager->getGameData();\n   19  } else {\n   20: \theader(\"Location: lobby.php\");\n   21  }\n   22  \n   23  \n   24: echo \"<script> window.gameid = \".$gameid.\"; window.userid = \".$userid.\";</script>\";\n   25  \n   26  \n   27  switch ($manager->phase){\n   28  \tcase -1:\n   29: \t\t$phase = \"Deployment / Initial\";\n   30  \t\tbreak;\n   31  \tcase 0:\n   32: \t\t$phase = \"Capital Movement\";\n   33  \t\tbreak;\n   34  \tcase 1:\n   35: \t\t$phase = \"Flight Movement\";\n   36  \t\tbreak;\n   37  \tcase 2:\n   38: \t\t$phase = \"Firing Orders\";\n   39  \t\tbreak;\n   40  \tcase 3:\n   41: \t\t$phase = \"Damage Control\";\n   42  \t\tbreak;\n   43  \tdefault:\n   ..\n   48  \n   49  foreach ($manager->playerstatus as $player){\n   50: \tif ($player[\"userid\"] == $userid){\n   51: \t\t$status = $player[\"status\"];\n   52  \t}\n   53  }\n   ..\n   56  $data = $manager->getClientData();\n   57  $post = json_encode($data, JSON_NUMERIC_CHECK);\n   58: echo \"<script>\";\n   59: echo \"window.game = \".$post.\";\";\n   60: echo \"window.playerstatus = \".json_encode($manager->playerstatus, JSON_NUMERIC_CHECK).\";\";\n   61: echo \"</script>\";\n   62  \n   63  ?>\n   ..\n   68  <head>\n   69  \t<link rel='stylesheet' href='style.css'/>\n   70: \t<script src=\"jquery-2.1.1.min.js\"></script>\n   71  \t<script src='mathLib.js'></script>\t\n   72  \t<script src='shared.js'></script>\n   ..\n   85  </head>\n   86  \t<body>\n   87: \t\t<div id=\"popupWrapper\">\n   88: \t\t\t<div id=\"popupText\">\n   89  \t\t\t</div>\n   90  \t\t</div>\n   91: \t\t<div id=\"instructWrapper\">\n   92: \t\t\t<div id=\"instructText\">\n   93  \t\t\t</div>\n   94  \t\t</div>\n   95: \t\t<div id=\"game\">\n   96: \t\t\t<div id=\"phaseSwitchDiv\">\n   97: \t\t\t\t<div id=\"phaseSwitchInnerDiv\" class=\"disabled\">\n   98  \t\t\t\t\t<div>\n   99  \t\t\t\t\t\t<?php\n  100: \t\t\t\t\t\t\techo \"Turn \".$manager->turn;\n  101  \t\t\t\t\t\t?>\n  102  \t\t\t\t\t</div>\n  ...\n  106  \t\t\t\t\t\t?>\n  107  \t\t\t\t\t</div>\n  108: \t\t\t\t\t<div class=\"hintDiv\">\n  109  \t\t\t\t\t\t<?php\n  110  \t\t\t\t\t\t\t$hints = array();\n  111: \t\t\t\t\t\t\t$hints[] = \"Press 'F' to cancel fire animations and display the combat log immediatly\";\n  112: \t\t\t\t\t\t\t$hints[] = \"Press 'M' to cancel move animations and immediatly position each unit\";\n  113: \t\t\t\t\t\t\t$hints[] = \"Press '+' or '-' to increase or decrease EP allocation for turn shortening\";\n  114: \t\t\t\t\t\t\t$hints[] = \"Press 'SPACE' to enable and disable a tool to measure distances and angles.\";\n  115: \t\t\t\t\t\t\t$hints[] = \"Matter weapons like the Railgun are able to penetrate enemy armour. They ignore 50 % of the target units armour.\";\n  116: \t\t\t\t\t\t\t$hints[] = \"In addition to dealing very high damage, Plasma weapons deal additional damage to the target units armour. However, Plasma weapons also lose potential damage the further the target away, as the plasma cools down rapidly.\";\n  117: \t\t\t\t\t\t\t$hints[] = \"Laser have an optimal focal point. The farther away the target unit (in either direction), the less damage the Laser will deal.\";\n  118: \t\t\t\t\t\t\t$hints[] = \"Laser rake over a target. As such they are likely to hit more than one system which also means their final damage is very dependant on the armour of the target unit.\";\n  119: \t\t\t\t\t\t\t$hints[] = \"Each Pulse weapon will score a fixed base amount of hits. This amount will then be increased further if you scored a good roll on the hit dice.\";\n  120: \t\t\t\t\t\t\t$hints[] = \"Pulse weapons fire a volley of several shots. All shots of a volley hit the same unit (or system). As such, armour is applied for each single hit.\";\n  121: \t\t\t\t\t\t\t$hints[] = \"Fighters are combined as a unit into a single flight, while Missiles and Torpedos are combined as a unit into a single Salvo.\";\n  122: \t\t\t\t\t\t\t$hints[] = \"Since Missiles and Torpedos (as units) are very fragile and often destroyed after a single hit, try to fire weapons with many shots, but low damage at them.\";\n  123: \t\t\t\t\t\t\t$hints[] = \"For the most part, weapons with more than 1 shot will spread all their shots over a target, instead of applying all of them on a single fighter or system.\";\n  124: \t\t\t\t\t\t\t$hints[] = \"If a weapon does less damage than the target has armour on the hit section or system, then the weapon will effectivly only deal half of that damage, counting as being unable to penetrade the armour. As such, light weapons are very ineffective against strongly armored ships but become more effective as a battle progresses and ship armor degrades.\";\n  125: \t\t\t\t\t\t\t$hints[] = \"Once deployed onto the battlezone, fighter flights can only change their objective / orders every 3 turns. Issueing new orders will reset a flights thrust back to 50 % of maximum thrust, regardless of new mission direction.\";\n  126: \t\t\t\t\t\t\t$hints[] = \"After deploying from a hangar (as well as receiving a new order), a fighter flight will reset its thrust and accelerate one turn, accomplashing maximum speed the turn after.\";\n  127: \t\t\t\t\t\t\t$hints[] = \"Missiles and Torpedos increase their thrust linear, becoming more fast every turn without speed being capped.\";\n  128: \t\t\t\t\t\t\t$hints[] = \"Having an active sensor lock (red circle overlay) increases the chance to hit a starship by 50 %. This bonus is doubled (to 100%) when targeting a locked Flight or Salvo. To be counted as 'active', the target must be within your sensor arc (red circle overlay)\";\n  129: \t\t\t\t\t\t\t$hints[] = \"Having a active sensor scramble (blue circle overlay), will decrease your starships chance to be hit by 50 %. To be counted as 'active', the ship firing at you need to be within your sensor arc (blue circle overlay).\";\n  130: \t\t\t\t\t\t\t$hints[] = \"A starship's main reactor icon shows the available power (deficit). The same value can also be seen at the top left (in white colro) on the ship layout element\";\n  131: \t\t\t\t\t\t\t$hints[] = \"Each unit is associated with a certain 'size' value, with goes from -4 to 3:</br></br><b>Salvo (-4)</b> - Ballistic Missile/Torpedo barrages</br><b>Flight (-3)</b> - Fighter / Bomber flights of any kind</br><b>Very Light Ship (-2)</b> - Non-military grade Police Cutter, Border Patrol etc.<b></br>Light Ship (-1)</b> - Corvettes , Light Frigates</br><b>Medium Ship (0)</b> - Frigates, Support/Light Destroyers></br><b>Heavy Ship (1)</b> - Main Destroyers, Cruisers</br><b>Super Heavy Ship (2)</b> - Attack/Battle Cruiser, Light Battleships, Support Carriers</br><b>Ultra Heavy Ship (3)</b> - Heavy Battleships, Dreadnaughts, Main Carrier\";\n  132: \t\t\t\t\t\t\t$hints[] = \"Each unit is associated with a certain 'size' value, with goes from -4 to 3:</br>Salvo (-4) - Ballistic Missile/Torpedo barrages</br>Flight (-3) - Fighter / Bomber flights of any kind</br> Very Light Ship (-2) - Non-military grade Police Cutter, Border Patrol etc.</br>Light Ship (-1) - Corvettes , Light Frigates</br>Medium Ship (0) - Frigates, Support/Light Destroyers></br>Heavy Ship (1) - Main Destroyers, Cruisers</br>Super Heavy Ship (2) - Attack/Battle Cruiser, Light Battleships, Support Carriers</br>Ultra Heavy Ship (3) - Heavy Battleships, Dreadnaughts, Main Carrier\";\n  133: \t\t\t\t\t\t\t$hints[] = \"Weapons each have a 'tracking' stat (-4 to 3) that correspond with the 'size' stat of every unit. Thisindicates the weapons ability to track units by size. If a weapon can only track relativly large targets but is trying to aim at say a cutter or fighter, it will come with a harsh penalty, indicated by a loss of accuracy (seen in the overlay).\";\n  134: \t\t\t\t\t\t\t$hints[] = \"Weapons each have a 'tracking' stat (-4 to 3) that correspond with the 'size' stat of every unit. </br>This indicates the weapons ability to track units by size.</br>If a weapon can only track relativly large targets but is trying to aim at say a cutter or fighter, it will come with a harsh penalty, indicated by a loss of accuracy (seen in the overlay).\";\n  135  \t\t\t\t\t\t\techo $hints[mt_rand(0, sizeof($hints)-1)];\n  136  \t\t\t\t\t\t\t//echo $hints[sizeof($hints)-4];\n  ...\n  139  \t\t\t\t</div>\n  140  \t\t\t</div>\n  141: \t\t\t<div id=\"plusImpulse\" class=\"ui\">\n  142: \t\t\t\t<img src=\"varIcons/plus.png\" style=\"width: 25px; height: 25px\">\n  143  \t\t\t</div>\n  144: \t\t\t<div id=\"minusImpulse\" class=\"ui\">\n  145: \t\t\t\t<img src=\"varIcons/minus.png\" style=\"width: 25px; height: 25px\">\n  146  \t\t\t</div>\n  147: \t\t\t<div id=\"undoLastAction\" class=\"ui\">\n  148: \t\t\t\t<img src=\"varIcons/destroyed.png\" style=\"width: 25px; height: 25px\">\n  149  \t\t\t</div>\n  150: \t\t\t<div id=\"turnButton\" class=\"turnEle ui disabled\">\n  151: \t\t\t\t<table class=\"doTurn\" style=\"margin:auto; width: 100%;\">\n  152  \t\t\t\t\t<tr>\n  153: \t\t\t\t\t\t<th style=\"text-align: left\">\n  154  \t\t\t\t\t\t\t Turning\n  155  \t\t\t\t\t\t</th>\n  156: \t\t\t\t\t\t<th id=\"turnMode\" style=\"text-align: center\">\n  157  \t\t\t\t\t\t\t OFF\n  158  \t\t\t\t\t\t</th>\n  159  \t\t\t\t\t</tr>\n  160  \t\t\t\t\t<tr>\n  161: \t\t\t\t\t\t<th style=\"text-align: left\">\n  162  \t\t\t\t\t\t\t Speed\n  163  \t\t\t\t\t\t</th>\n  164: \t\t\t\t\t\t<th id=\"impulseMod\" style=\"text-align: center\">\n  165  \t\t\t\t\t\t</th>\n  166  \t\t\t\t\t</tr>\n  167  \t\t\t\t\t<tr>\n  168: \t\t\t\t\t\t<th style=\"text-align: left\">\n  169  \t\t\t\t\t\t\tCost / 1\n  170  \t\t\t\t\t\t</th>\n  171: \t\t\t\t\t\t<th id=\"turnCost\" style=\"width: 55px, text-align: center\">\n  172  \t\t\t\t\t\t</th>\n  173  \t\t\t\t\t</tr>\n  174  \t\t\t\t\t<tr>\n  175: \t\t\t\t\t\t<th style=\"text-align: left\">\n  176  \t\t\t\t\t\t\tDelay / 1\n  177  \t\t\t\t\t\t</th>\n  178: \t\t\t\t\t\t<th id=\"turnDelay\" style=\"width: 55px; text-align: center\">\n  179  \t\t\t\t\t\t</th>\n  180  \t\t\t\t\t</tr>\n  181  \t\t\t\t\t<tr>\n  182: \t\t\t\t\t\t<th style=\"text-align: left\">\n  183  \t\t\t\t\t\t\tEP Mod\n  184  \t\t\t\t\t\t</th>\n  185: \t\t\t\t\t\t<th id=\"turnMod\" style=\"width: 55px; text-align: center\">\n  186  \t\t\t\t\t\t</th>\n  187  \t\t\t\t\t</tr>\n  188: \t\t\t\t\t<tr id=\"shortenTurn\" class=\"disabled\">\n  189  \t\t\t\t\t\t<td>\n  190: \t\t\t\t\t\t\t<div class=\"doShortenTurn\">\n  191: \t\t\t\t\t\t\t\t<img class=\"size20\" src=\"varIcons/plusWhite.png\">\n  192  \t\t\t\t\t\t\t</div>\n  193  \t\t\t\t\t\t</td>\n  194  \t\t\t\t\t\t<td>\n  195: \t\t\t\t\t\t\t<div class=\"doUndoShortenTurn\">\n  196: \t\t\t\t\t\t\t\t<img class=\"size20\" src=\"varIcons/minusWhite.png\">\n  197  \t\t\t\t\t\t\t</div>\n  198  \t\t\t\t\t\t</td>\n  ...\n  200  \t\t\t\t</table>\n  201  \t\t\t</div>\n  202: \t\t\t<div id=\"epButton\" class=\"turnEle ui disabled\">\n  203: \t\t\t\t<table style=\"margin:auto; width: 100%;\">\n  204  \t\t\t\t\t<tr>\n  205: \t\t\t\t\t\t<th style=\"width: 60%; text-align: left\">\n  206  \t\t\t\t\t\t\t Engine Power\n  207  \t\t\t\t\t\t</th>\n  208: \t\t\t\t\t\t<th id=\"remEP\" style=\"text-align: center\">\n  209  \t\t\t\t\t\t</th>\n  210  \t\t\t\t\t</tr>\n  211  \t\t\t\t\t<tr>\n  212: \t\t\t\t\t\t<th id=\"impulseText\" style=\"text-align: left\">\n  213  \t\t\t\t\t\t\t Thrust Change \n  214  \t\t\t\t\t\t</th>\n  215: \t\t\t\t\t\t<th id=\"ImpulseCost\" style=\"text-align: center\">\n  216  \t\t\t\t\t\t</th>\n  217  \t\t\t\t\t</tr>\n  218  \t\t\t\t</table>\n  219  \t\t\t</div>\n  220: \t\t\t<div id=\"maxCutVector\" class=\"ui disabled\">\n  221  \t\t\t\t<div></div>\n  222  \t\t\t</div>\n  223: \t\t\t<div id=\"maxTurnVector\" class=\"ui disabled\">\n  224  \t\t\t\t<div></div>\n  225  \t\t\t</div>\n  226: \t\t\t<div id=\"maxVector\" class=\"ui disabled\">\n  227  \t\t\t\t<div></div>\n  228  \t\t\t</div>\n  229: \t\t\t<div id=\"upperGUI\">\n  230: \t\t\t\t<table id=\"overview\">\n  231  \t\t\t\t\t<tr>\n  232: \t\t\t\t\t\t<th width=\"10%\">\n  233  \t\t\t\t\t\t\tTurn\n  234  \t\t\t\t\t\t</th>\n  235: \t\t\t\t\t\t<th width=\"55%\">\n  236  \t\t\t\t\t\t\tPhase\n  237  \t\t\t\t\t\t</th>\n  238: \t\t\t\t\t\t<th width=\"35%\">\n  239  \t\t\t\t\t\t\tReinforce\n  240  \t\t\t\t\t\t</th>\n  ...\n  247  \t\t\t\t\t\t\t<?php echo $phase; ?>\n  248  \t\t\t\t\t\t</td>\n  249: \t\t\t\t\t\t<td id=\"reinforce\">\n  250  \t\t\t\t\t\t\t<?php\n  251  \t\t\t\t\t\t\t\techo $manager->value;\n  ...\n  256  \t\t\t\t\t\t<?php \n  257  \t\t\t\t\t\t\tif (!$status){\n  258: \t\t\t\t\t\t\t\techo '<td colSpan=3 class=\"buttonTD\" style=\"background-color: yellow;\">Anonymus Mode</td>';\n  259  \t\t\t\t\t\t\t}\n  260: \t\t\t\t\t\t\telse if ($status == \"ready\"){\n  261: \t\t\t\t\t\t\t\techo '<td colSpan=3 class=\"buttonTD\" style=\"background-color: lightGreen;\">Waiting for Opponent</td>';\n  262  \t\t\t\t\t\t\t}\n  263: \t\t\t\t\t\t\telse echo '<td colSpan=3 class=\"buttonTD\" style=\"font-size: 20px\" onclick=\"this.disabled=true;game.endPhase()\">Confirm Orders</td>';\n  264  \t\t\t\t\t\t\t?>\n  265  \t\t\t\t\t</tr>\n  266  \t\t\t\t</table>\n  267  \t\t\t</div>\n  268: \t\t\t<div id=\"unitGUI\">\n  269  \t\t\t</div>\n  270: \t\t\t<div id=\"canvasDiv\">\n  271: \t\t\t\t<canvas id=\"canvas\"></canvas>\n  272: \t\t\t\t<canvas id=\"fxCanvas\"></canvas>\n  273: \t\t\t\t<canvas id=\"planCanvas\"></canvas>\n  274: \t\t\t\t<canvas id=\"moveCanvas\"></canvas>\n  275: \t\t\t\t<canvas id=\"salvoCanvas\"></canvas>\n  276: \t\t\t\t<canvas id=\"mouseCanvas\"></canvas>\n  277: \t\t\t\t<canvas id=\"drawCanvas\"></canvas>\n  278  \t\t\t</div>\n  279: \t\t\t<div id=\"shortInfo\" class=\"disabled\">\t\t\t\t\n  280  \t\t\t</div>\n  281: \t\t\t<div id=\"weaponAimTableWrapper\" class=\"disabled\">\n  282: \t\t\t\t<table id=\"targetInfo\">\n  283  \t\t\t\t\t<tr>\n  284  \t\t\t\t\t\t<th width=20%>Target</th>\n  ...\n  288  \t\t\t\t\t\t<th width=20%>Dist</th>\n  289  \t\t\t\t\t</tr>\n  290: \t\t\t\t\t<tr id=\"targetData1\">\n  291  \t\t\t\t\t\t<td></td>\n  292  \t\t\t\t\t\t<td></td>\n  ...\n  303  \t\t\t\t\t\t<th>Result</th>\n  304  \t\t\t\t\t</tr>\n  305: \t\t\t\t\t<tr id=\"targetData2\">\n  306  \t\t\t\t\t\t<td></td>\n  307  \t\t\t\t\t\t<td></td>\n  ...\n  311  \t\t\t\t\t</tr>\n  312  \t\t\t\t</table>\n  313: \t\t\t\t<table id=\"weaponInfo\">\n  314  \t\t\t\t\t<tr>\n  315  \t\t\t\t\t\t<th width=47%>Weapon</th>\n  ...\n  321  \t\t\t\t</table>\n  322  \t\t\t</div>\n  323: \t\t\t<div id=\"combatlogWrapper\" class=\"disabled\">\n  324: \t\t\t\t<div class=\"combatLogHeader\">\n  325  \t\t\t\t\tCombat Log\n  326  \t\t\t\t</div>\n  327: \t\t\t\t<table id=\"combatLog\">\n  328  \t\t\t\t\t<tr>\n  329  \t\t\t\t\t\t<th width=70px>Type</th>\n  ...\n  339  \t\t\t\t</table>\n  340  \t\t\t</div>\n  341: \t\t\t<div id=\"deployLogWrapper\" class=\"disabled\">\n  342: \t\t\t\t<table id=\"deloyLog\">\n  343  \t\t\t\t\t<tr>\n  344  \t\t\t\t\t\t<th width=100%>val</th>\n  ...\n  346  \t\t\t\t</table>\n  347  \t\t\t</div>\n  348: \t\t\t<div id=\"deployWrapper\" class=\"disabled\">\n  349: \t\t\t\t<table id=\"deployTable\">\n  350  \t\t\t\t\t<tr>\n  351: \t\t\t\t\t\t<th class=\"head\" colSpan=3>\n  352  \t\t\t\t\t\t\tIncoming Units\n  353  \t\t\t\t\t\t</th>\n  354  \t\t\t\t\t</tr>\n  355  \t\t\t\t\t<tr>\n  356: \t\t\t\t\t\t<th  width=\"50%\" colSpan=\"2\">\n  357  \t\t\t\t\t\t\tClass\n  358  \t\t\t\t\t\t</th>\n  359: \t\t\t\t\t\t<th colSpan=2 width=\"20%\" >\n  360  \t\t\t\t\t\t\tETA\n  361  \t\t\t\t\t\t</th>\n  ...\n  364  \t\t\t\t\t\tforeach ($manager->ships as $ship){\n  365  \t\t\t\t\t\t\tif ($ship->ship && $manager->phase < 1 && $ship->userid == $manager->userid && $ship->available == $manager->turn){\n  366: \t\t\t\t\t\t\t\techo \"<tr class='deployNow \".$ship->id.\"'</td>\";\n  367: \t\t\t\t\t\t\t\techo \"<td><img class='img50' src=shipIcons/\".strtolower($ship->name).\".png></td>\";\n  368: \t\t\t\t\t\t\t\techo \"<td class='green font20'>\".$ship->name.\"</td>\";\n  369: \t\t\t\t\t\t\t\techo \"<td class='green font20'> NOW </td>\";\n  370: \t\t\t\t\t\t\t\techo \"</tr>\";\n  371  \t\t\t\t\t\t\t}\t\t\t\t\t\t\t\n  372  \t\t\t\t\t\t\telse if ($ship->ship && $manager->phase < 1 && $ship->userid != $manager->userid && $ship->available == $manager->turn){\n  373  \t\t\t\t\t\t\t\tif ($manager->phase == -1){\n  374: \t\t\t\t\t\t\t\t\techo \"<tr class='deployNow \".$ship->id.\"'</td>\";\n  375: \t\t\t\t\t\t\t\t\techo \"<td><img class='img50' src=varIcons/vortex.png></td>\";\n  376: \t\t\t\t\t\t\t\t\techo \"<td class='red font20'>Unknown</td>\";\n  377: \t\t\t\t\t\t\t\t\techo \"<td class='red font20'> NOW </td>\";\n  378: \t\t\t\t\t\t\t\t\techo \"</tr>\";\n  379  \t\t\t\t\t\t\t\t}\n  380  \t\t\t\t\t\t\t\telse if ($manager->phase == 0){\n  381: \t\t\t\t\t\t\t\t\techo \"<tr class='deployNow \".$ship->id.\"'</td>\";\n  382: \t\t\t\t\t\t\t\t\techo \"<td><img class='img50' src=shipIcons/\".strtolower($ship->name).\".png></td>\";\n  383: \t\t\t\t\t\t\t\t\techo \"<td class='red font20'>\".$ship->name.\"</td>\";\n  384: \t\t\t\t\t\t\t\t\techo \"<td class='red font20'> NOW </td>\";\n  385: \t\t\t\t\t\t\t\t\techo \"</tr>\";\n  386  \t\t\t\t\t\t\t\t}\n  387  \t\t\t\t\t\t\t}\n  388  \t\t\t\t\t\t}\n  389  \t\t\t\t\t\tfor ($i = 0; $i < sizeof($manager->incoming); $i++){\n  390: \t\t\t\t\t\t\tif ($manager->incoming[$i][\"userid\"] == $manager->userid){\n  391: \t\t\t\t\t\t\t\t$val = \"deployLater \".$manager->incoming[$i][\"id\"];\n  392: \t\t\t\t\t\t\t\techo \"<tr class='\".$val.\"'</td>\";\n  393: \t\t\t\t\t\t\t\techo \"<td><img class='img50' src=shipIcons/\".strtolower($manager->incoming[$i][\"name\"]).\".png></td>\";\n  394: \t\t\t\t\t\t\t\techo \"<td class='green font20'>\".$manager->incoming[$i][\"name\"].\"</td>\";\n  395: \t\t\t\t\t\t\t\t$rem = $manager->incoming[$i][\"available\"] - $manager->turn;\n  396  \t\t\t\t\t\t\t\tif ($rem == 1){\n  397: \t\t\t\t\t\t\t\t\techo \"<td class='font20'>1 Turn</td></tr>\";\n  398: \t\t\t\t\t\t\t\t} else echo \"<td class='font20'>\".$rem.\" Turns</td></tr>\";\n  399  \t\t\t\t\t\t\t}\n  400: \t\t\t\t\t\t\telse if ($manager->incoming[$i][\"userid\"] != $manager->userid && $manager->incoming[$i][\"available\"] == $manager->turn+1){\n  401: \t\t\t\t\t\t\t\t$val = \"deployLater \".$manager->incoming[$i][\"id\"];\n  402: \t\t\t\t\t\t\t\techo \"<tr class='\".$val.\"'</td>\";\n  403: \t\t\t\t\t\t\t\techo \"<td><img class='img50' src=varIcons/vortex.png></td>\";\n  404: \t\t\t\t\t\t\t\techo \"<td class='red font20'>Unknown</td>\";\n  405: \t\t\t\t\t\t\t\techo \"<td class='font20'>1 Turn</td></tr>\";\n  406  \t\t\t\t\t\t\t}\n  407  \t\t\t\t\t\t}\n  408  \t\t\t\t\t?>\n  409  \t\t\t\t</table>\n  410: \t\t\t\t<table id=\"reinforceTable\">\n  411  \t\t\t\t\t<tr>\n  412: \t\t\t\t\t\t<th class=\"head\" colSpan=4>\n  413  \t\t\t\t\t\t\tReinforcements\n  414  \t\t\t\t\t\t</th>\n  415  \t\t\t\t\t</tr>\n  416  \t\t\t\t\t<tr>\n  417: \t\t\t\t\t\t<th  width=\"50%\" colSpan=\"2\">\n  418  \t\t\t\t\t\t\tClass\n  419  \t\t\t\t\t\t</th>\n  420: \t\t\t\t\t\t<th  width=\"30%\" >\n  421  \t\t\t\t\t\t\tETA\n  422  \t\t\t\t\t\t</th>\n  423: \t\t\t\t\t\t<th  width=\"20%\" >\n  424  \t\t\t\t\t\t\tCost\n  425  \t\t\t\t\t\t</th>\n  ...\n  427  \t\t\t\t\t<?php\n  428  \t\t\t\t\t\tif (sizeof($manager->rdyReinforcements)){\n  429: \t\t\t\t\t\t\t//echo \"<script>console.log(window.reinforcements)</script>\";\n  430  \t\t\t\t\t\t\tforeach ($manager->rdyReinforcements as $ship){\n  431  \t\t\t\t\t\t\t\t\tif ($ship->userid != $manager->userid){continue;}\n  432: \t\t\t\t\t\t\t\t\techo \"<tr class='requestReinforcements'>\";\n  433: \t\t\t\t\t\t\t\t\techo \"<td><img class='img50' src=shipIcons/\".strtolower($ship->name).\".png></td>\";\n  434: \t\t\t\t\t\t\t\t\techo \"<td>\".$ship->name.\"</td>\";\n  435: \t\t\t\t\t\t\t\t\techo \"<td>\".($ship->available - $manager->turn).\" turn/s</td>\";\n  436: \t\t\t\t\t\t\t\t\techo \"<td class='cost'>\".$ship->cost.\"</td>\";\n  437: \t\t\t\t\t\t\t\t\techo \"</tr>\";\n  438  \t\t\t\t\t\t\t\t}\n  439  \n  440: \t\t\t\t\t\t\techo \"<tr>\";\n  441: \t\t\t\t\t\t\techo \"<td style='border: none; background-color: black;'></td>\";\n  442: \t\t\t\t\t\t\techo \"<td style='border: none; background-color: black;'></td>\";\n  443: \t\t\t\t\t\t\techo \"<td style='padding: 5px; font-size: 12px'> Total Cost</td>\";\n  444: \t\t\t\t\t\t\techo \"<td style='padding: 5px; font-size: 15px' id='totalRequestCost'>0</td>\";\n  445: \t\t\t\t\t\t\techo \"</tr>\";\n  446  \t\t\t\t\t\t}\n  447  \t\t\t\t\t?>\n  448  \t\t\t\t</table>\n  449  \t\t\t</div>\n  450: \t\t\t<div id=\"deployOverlay\" class=\"disabled\">\n  451: \t\t\t\t<span id=\"deployType\"></span>\t\n  452: \t\t\t\t<span id=\"deployTarget\"</span>\t\n  453: \t\t\t\t<div class=\"img\"></div>\t\t\t\n  454  \t\t\t</div>\n  455: \t\t\t<div id=\"vectorDiv\" class=\"disabled\"></div>\n  456: \t\t\t<div id=\"hangarLoadoutDiv\" class=\"disabled\">\n  457: \t\t\t<div class=\"header\">\n  458  \t\t\t\tAssemble and launch a flight\n  459  \t\t\t</div>\n  460: \t\t\t<div class=\"header\">\n  461: \t\t\t\tCan launch up to <span id=\"launchRate\"></span> units per cycle.\n  462  \t\t\t</div>\n  463: \t\t\t<div class=\"header\">\n  464: \t\t\t\tHas a capacity of <span id=\"capacity\"></span> tons\n  465  \t\t\t</div>\n  466: \t\t\t<table id=\"hangarTable\">\n  467  \t\t\t</table>\n  468: \t\t\t<div id =\"missionType\">\n  469: \t\t\t\t<table style=\"border: 1px solid white\">\n  470  \t\t\t\t\t<tr><th colSpan=3>Select Mission Type</th></tr>\n  471  \t\t\t\t\t<tr><td></td><td width=70%>Patrol Location</td><td></td></tr>\n  ...\n  473  \t\t\t\t</table>\n  474  \t\t\t</div>\n  475: \t\t\t<div class=\"header\">\n  476: \t\t\t\t<div class=\"buttonTD disabled\" onclick=\"game.enableFlightDeployment()\">Launch Flight</div>\n  477  \t\t\t</div>\n  478  \t\t</div>\n  ...\n  482  <?php \n  483  \t$time += microtime(true); \n  484: \t//Debug::log(\"serve gamedata time: \".round($time, 3).\" seconds.\");\n  485  ?>\n  486  \n  ...\n  489  \tfunction reset(){\n  490  \t\t$.ajax({\n  491: \t\t\ttype: \"POST\",\n  492: \t\t\turl: \"postGameData.php\",\n  493: \t\t\tdatatype: \"json\",\n  494: \t\t\tdata: {type: \"reset\"},\n  495  \t\t\terror: ajax.error,\n  496  \t\t});\n  ...\n  500  \t\twindow.res.x = window.innerWidth-1;\n  501  \t\twindow.res.y = window.innerHeight-1;\n  502: \t\t$(\"#mouseCanvas\").on(\"mouseleave\", function(){\n  503: \t\t\t$(\"#weaponAimTableWrapper\").hide();\n  504  \t\t})\n  505: \t\t$(\"#combatLog\").contextmenu(function(e){\n  506  \t\t\te.stopPropagation();\n  507  \t\t})\n  508: \t\t$(\"#combatlogWrapper\").contextmenu(function(e){\n  509  \t\t\te.preventDefault(); e.stopPropagation();\n  510: \t\t\t$(this).find(\"#combatLog\").toggleClass(\"disabled\");\n  511  \t\t})\n  512  \n  513  \t\twindow.initiateKeyDowns();\n  514  \n  515: \t\tdocument.getElementById(\"combatlogWrapper\").onmousedown = function(){\n  516  \t\t    _drag_init(this);\n  517  \t\t    return false;\n  518  \t\t};\n  519  \n  520: \t\t$(\"#plusImpulse\")\n  521  \t\t.click(function(){\n  522  \t\t\tgame.getUnit(aUnit).doIncreaseImpulse();\n  523  \t\t});\n  524  \n  525: \t\t$(\"#minusImpulse\")\n  526  \t\t.click(function(){\n  527  \t\t\tgame.getUnit(aUnit).doDecreaseImpulse();\n  528  \t\t});\n  529  \n  530: \t\t$(\"#undoLastAction\")\n  531  \t\t.click(function(){\n  532  \t\t\tgame.getUnit(aUnit).undoLastAction()\n  533  \t\t});\n  534  \n  535: \t\t$(\".doTurn\")\n  536  \t\t.click(function(){\n  537: \t\t\t//console.log(\"issueTurn\")\n  538: \t\t//\tgame.getUnit($(this).data(\"shipid\")).issueTurn($(this).data(\"a\"))\n  539: \t\t//\tgame.getUnit($(this).data(\"shipid\")).switchTurnMode();\n  540  \n  541  \t\t})\n  542: \t\t$(\"#turnButton\")\n  543  \t\t.click(function(){\n  544  \t\t\tgame.getUnit(aUnit).switchTurnMode();\n  545  \t\t})\n  546  \n  547: \t\t$(\".doShortenTurn\")\n  548  \t\t.click(function(e){\n  549  \t\t\te.stopPropagation();\n  ...\n  556  \t\t})\n  557  \n  558: \t\t$(\".doUndoShortenTurn\")\n  559  \t\t.click(function(e){\n  560  \t\t\te.stopPropagation();\n  ...\n  567  \t\t})\n  568  \n  569: \t/*\t$(\"#maxVector\")\n  570  \t\t.click(function(){\n  571: \t\t\t//console.log(\"maxVector\")\n  572: \t\t\tgame.getUnit($(this).data(\"shipid\")).moveToMaxVector();\n  573  \t\t})\n  574  \n  575: \t\t$(\"#maxTurnVector\")\n  576  \t\t.click(function(){\n  577: \t\t\t//console.log(\"maxTurnVector\")\n  578: \t\t\tgame.getUnit($(this).data(\"shipid\")).moveToMaxTurnVector();\n  579  \t\t})\n  580  \n  581: \t\t$(\"#maxCutVector\")\n  582  \t\t.click(function(){\n  583: \t\t\t//console.log(\"maxTurnVector\")\n  584: \t\t\tgame.getUnit($(this).data(\"shipid\")).moveToMaxCutVector();\n  585  \t\t})\n  586  \t*/\n  587  \t\n  588: \t\t$(\"#maxCutVector\")\n  589  \t\t.click(function(){\n  590: \t\t\t//console.log(\"maxVector\")\n  591: \t\t\tgame.getUnit($(this).data(\"shipid\")).moveInVector($(this).data(\"dist\"));\n  592  \t\t})\t\n  593: \t\t$(\"#maxTurnVector\")\n  594  \t\t.click(function(){\n  595: \t\t\t//console.log(\"maxVector\")\n  596: \t\t\tgame.getUnit($(this).data(\"shipid\")).moveInVector($(this).data(\"dist\"));\n  597  \t\t})\t\n  598: \t\t$(\"#maxVector\")\n  599  \t\t.click(function(){\n  600: \t\t\t//console.log(\"maxVector\")\n  601: \t\t\tgame.getUnit($(this).data(\"shipid\")).moveInVector($(this).data(\"dist\"));\n  602  \t\t})\n  603  \t})\n  ...\n  623  \t\t\t\t\tif (game.vector){\n  624  \t\t\t\t\t\tgame.vector = false;\n  625: \t\t\t\t\t\t$(\"#vectorDiv\").addClass(\"disabled\");\n  626  \t\t\t\t\t\tmouseCtx.clearRect(0, 0, res.x, res.y);\n  627  \t\t\t\t\t}\n  628  \t\t\t\t\telse {\n  629  \t\t\t\t\t\tgame.vector = true;\n  630: \t\t\t\t\t\t$(\"#vectorDiv\").removeClass(\"disabled\");\n  631  \t\t\t\t\t}\n  632  \t\t\t\t//console.log(game.vector);\n  ...\n  637  \t\t\t\t\t\twindow.cancelAnimationFrame(anim);\n  638  \t\t\t\t\t\tfxCtx.clearRect(0, 0, res.x, res.y);\n  639: \t\t\t\t\t\t$(\"#combatLog\").find(\"tr\").each(function(i){\n  640  \t\t\t\t\t\t\tif (i){\n  641  \t\t\t\t\t\t\t\t$(this).remove()\n\nC:\\xampp\\htdocs\\fire\\gameSetup.php:\n    3  include_once 'global.php';\n    4  \n    5: if (isset($_SESSION[\"userid\"])){\n    6: \t$gameid = $_GET[\"gameid\"];\n    7: \t$playerid = $_SESSION[\"userid\"];\n    8  \n    9: \t$_SESSION[\"gameid\"] = $_GET[\"gameid\"];\n   10: \techo \"<script>var gameid = \".$gameid.\"; var playerid = \".$playerid.\";</script>\";\n   11  \t$dbManager = DBManager::app($gameid);\n   12  \t$game = $dbManager->getGameDetails($gameid);\n   13  \tif (!$game){\n   14: \t\theader(\"Location: lobby.php\");\n   15  \t}\n   16  \n   17: \tif ($game[\"status\"] == \"active\"){\n   18: \t\theader(\"Location: game.php?gameid=\".$game[\"id\"]);\n   19  \t}\n   20  \t$manager = new Manager($playerid);\n   21  \t$players = $dbManager->getPlayersInGame($gameid);\n   22: \techo \"<script>\";\n   23: \techo \"window.players = \".json_encode($players).\";\";\n   24: \techo \"window.factions = \".json_encode($manager->getFactions()).\";\";\n   25: \techo \"window.maxPoints = \".$game[\"pv\"].\";\";\n   26: \techo \"window.userid = \".$playerid.\";\";\n   27: \techo \"</script>\";\n   28  \t$joined = false;\n   29  \t$ready = false;\n   30  \n   31: \t$element = \"<table class='gameSetupStatus'\";\n   32: \t$element .= \"<tr>\";\n   33: \t$element .= \"<th colSpan=2 style='font-size: 20px; border: 2px solid white'>\".$game[\"name\"].\" - \".$game[\"pv\"].\" points</th>\";\n   34  \n   35: \t$element .= \"<tr>\";\n   36: \t$element .= \"<th>Player Name</th>\";\n   37: \t$element .= \"<th>Status</th>\";\n   38: \t$element .= \"</tr>\";\n   39  \n   40  \tif (!$players){\n   41: \t\t$element .= \"<tr>\";\n   42: \t\t$element .= \"<td colSpan='2'>No Player ingame yet</td>\";\n   43: \t\t$element .= \"</tr>\";\n   44  \t}\n   45  \telse {\n   46  \t\tforeach ($players as $player){\n   47: \t\t\tif ($player[\"userid\"] == $playerid) {\n   48: \t\t\t\tif ($player[\"status\"] == \"ready\") {\n   49  \t\t\t\t\t$ready = true;\n   50  \t\t\t\t}\n   51: \t\t\t\telse if ($player[\"status\"] == \"joined\") {\n   52  \t\t\t\t\t$joined = true;\n   53  \t\t\t\t}\n   54  \t\t\t}\n   55: \t\t\t$element .= \"<tr>\";\n   56: \t\t\t$element .= \"<td style='border-bottom: 1px solid white; text-align: center'>\".$player[\"username\"].\"</td>\";\n   57  \n   58: \t\t\t$status = $player[\"status\"];\n   59: \t\t\tif ($status == \"ready\"){\n   60: \t\t\t\t$element .= \"<td style='color: black; background-color: lightGreen; border-bottom: 1px solid white; text-align: center'>\".$status.\"</td>\";\n   61  \n   62  \t\t\t}\n   63: \t\t\telse if ($status == \"joined\"){\n   64: \t\t\t\t$element .= \"<td style='color: black; background-color: yellow; border-bottom: 1px solid white; text-align: center'>\".$status.\"</td>\";\n   65  \t\t\t}\n   66  \n   67: \t\t\t$element .= \"</tr>\";\n   68  \t\t}\n   69  \t}\n   ..\n   72  \t}\n   73  \telse if ($joined){\n   74: \t\t$element .= \"<tr><td colSpan='2' class='leaveGame' onclick='leaveGame()'>Leave Game</td></tr>\";\t\n   75  \t}\n   76  \telse {\n   77: \t\t$element .= \"<tr><td colSpan='2' class='joinGame' onclick='joinGame()'>Join Game</td></tr>\";\t\n   78  \t}\n   79: \t\t$element .= \"<tr><td colSpan='2' class='toLobby' onclick='window.goToLobby()'>Return to Lobby</td></tr>\";\t\n   80  \n   81: \t$element .= \"</table>\";\n   82  \n   83  \tif ($ready){\n   84: \t\techo \"<script> window.ready = true;</script>\";\n   85  \t}\n   86  \telse if ($joined){\n   87: \t\techo \"<script> window.joined = true;</script>\";\n   88  \t}\n   89  \n   90  }\n   91  else {\n   92: \t$element = \"<span>PLEASE LOGIN</span>\";\n   93  }\n   94  ?>\n   ..\n   98  <head>\n   99  \t<link rel='stylesheet' href='style.css'/>\n  100: \t<script src=\"jquery-2.1.1.min.js\"></script>\n  101  \t<script src='mathLib.js'></script>\t\n  102  \t<script src='shared.js'></script>\n  ...\n  113  \t<script src='ajax.js'></script>\n  114  </head>\n  115: \t<body style=\"padding: 20px\">\n  116: \t\t<div id =\"popupWrapper\">\n  117: \t\t\t<div id=\"popupText\">\n  118  \t\t\t</div>\n  119  \t\t</div>\n  120: \t\t<table style=\"height: 200px; width: 700px;\">\n  121  \t\t\t<tr>\n  122: \t\t\t\t<td style=\"vertical-align: top;\">\n  123: \t\t\t\t\t<div style=\"margin: auto\">\n  124  \t\t\t\t\t\t<?php echo $element; ?>\n  125  \t\t\t\t\t</div>\n  126  \t\t\t\t</td>\n  127: \t\t\t\t<td style=\"vertical-align: top;\">\n  128: \t\t\t\t\t<div style=\"margin: auto; margin-left: 30px;\">\n  129: \t\t\t\t\t\t<table id =\"shipsBoughtTable\">\n  130  \t\t\t\t\t\t\t<tr>\n  131: \t\t\t\t\t\t\t\t<th colSpan=2 style=\"width: 300px; font-size: 20px\">\n  132  \t\t\t\t\t\t\t\t\tCurrent Fleet Selection\n  133  \t\t\t\t\t\t\t\t</th>\n  134  \t\t\t\t\t\t\t</tr>\n  135  \t\t\t\t\t\t\t<tr>\n  136: \t\t\t\t\t\t\t\t<th style=\"font-size: 14px;\">\n  137  \t\t\t\t\t\t\t\t\tTotal Fleet Cost:\n  138  \t\t\t\t\t\t\t\t</th>\n  139: \t\t\t\t\t\t\t\t<th id=\"totalFleetCost\" style=\"font-size: 14px; width:50px\">\n  140  \t\t\t\t\t\t\t\t\t0\n  141  \t\t\t\t\t\t\t\t</th>\n  142  \t\t\t\t\t\t\t</tr>\n  143  \t\t\t\t\t\t\t<tr>\n  144: \t\t\t\t\t\t\t\t<th class=\"buttonTD disabled\" onclick=\"confirmFleetPurchase()\" colSpan=2>\n  145  \t\t\t\t\t\t\t\t\tConfirm Fleet Selection\n  146  \t\t\t\t\t\t\t\t</th>\n  ...\n  153  \t\t<table>\n  154  \t\t\t<tr>\n  155: \t\t\t\t<td style=\"vertical-align: top;\">\n  156: \t\t\t\t\t<div id=\"factionDiv\">\t\t\t\n  157  \t\t\t\t\t</div>\n  158  \t\t\t\t</td>\n  159  \t\t\t</tr>\n  160  \t\t</table>\n  161: \t\t<div id=\"game\" class=\"disabled\" style=\"width: 420px; height: 400px; top: 650px; left: 125px\">\n  162: \t\t\t<canvas id=\"canvas\" style='z-index: 0'></canvas>\n  163: \t\t\t<canvas id=\"shipCanvas\" style='border: 2px solid white; z-index: 2'></canvas>\n  164: \t\t\t<canvas id=\"fxCanvas\" style='z-index: 1'></canvas>\n  165  \t\t</div>\n  166: \t\t<div id=\"hangarLoadoutDiv\" class=\"disabled\">\n  167: \t\t\t<div class=\"header\">\n  168  \t\t\t\tPick Strikecraft for the selected Hangar\n  169  \t\t\t</div>\n  170: \t\t\t<div class=\"header\">\n  171: \t\t\t\tCan launch up to <span id=\"launchRate\"></span> units per cycle.\n  172  \t\t\t</div>\n  173: \t\t\t<div class=\"header\">\n  174: \t\t\t\tHas a capacity of <span id=\"capacity\"></span> tons\n  175  \t\t\t</div>\n  176: \t\t\t<table id=\"hangarTable\">\n  177  \t\t\t</table>\n  178: \t\t\t<table style=\"margin:auto; width: 220px; margin-top: 10px\">\n  179: \t\t\t\t<tr><td class=\"buttonTD disabled\" onclick='confirmSystemLoadout()'>Confirm Loadout</td></tr>\n  180  \t\t\t</table>\n  181  \t\t</div>\n  182: \t\t<div id=\"weaponLoadoutDiv\" class=\"disabled\">\n  183: \t\t\t<div class=\"header\">\n  184  \t\t\t\tPick Ammunition for the selected weapon\n  185  \t\t\t</div>\n  186: \t\t\t<div class=\"header\">\n  187: \t\t\t\tCan fire all <span id=\"reload\"></span> turn/s.\n  188  \t\t\t</div>\n  189: \t\t\t<table id=\"weaponTable\">\n  190  \t\t\t</table>\n  191: \t\t\t<table style=\"margin:auto; width: 220px; margin-top: 10px\">\n  192: \t\t\t\t<tr><td class=\"buttonTD disabled\" onclick='confirmSystemLoadout()'>Confirm Loadout</td></tr>\n  193  \t\t\t</table>\n  194  \t\t</div>\n  ...\n  200  \n  201  \t$(document).ready(function(){\n  202: \t\t$(\"#confirmFleet\").hover(function(){\n  203: \t\t\t$(this).toggleClass(\"selectionHighlight\");\n  204  \t\t});\n  205  \n  206  \t\tif (window.ready){\n  207: \t\t\t$(\"#shipsBoughtTable\").hide();\n  208: \t\t\t$(\"#game\").hide();\n  209  \t\t}\n  210  \t\telse if (window.joined){\n  ...\n  224  \t\t\t\tgetUnitType: function(val){\n  225  \t\t\t\t\tswitch (val){\n  226: \t\t\t\t\t\tcase 3: return \"Ultra Heavy\";\n  227: \t\t\t\t\t\tcase 2: return \"Super Heavy\";\n  228: \t\t\t\t\t\tcase 1: return \"Heavy\";\n  229: \t\t\t\t\t\tcase 0: return \"Medium\";\n  230: \t\t\t\t\t\tcase -1: return \"Light\";\n  231: \t\t\t\t\t\tcase -2: return \"SuperLight\";\n  232: \t\t\t\t\t\tcase -3: return \"Flight\";\n  233: \t\t\t\t\t\tcase -4: return \"Salvo\";\n  234  \t\t\t\t\t}\n  235  \t\t\t\t},\n  ...\n  247  \t\t\t\t\t}\n  248  \n  249: \t\t\t\t\tvar table = document.getElementById(\"totalShipCost\");\n  250: \t\t\t\t\t\ttable.innerHTML = \"\";\n  251  \n  252  \t\t\t\t\tvar tr = table.insertRow(-1);\n  253: \t\t\t\t\t\ttr.insertCell(-1).innerHTML = \"Base Ship Cost\";\n  254  \t\t\t\t\t\ttr.insertCell(-1).innerHTML = game.ships[0].cost;\n  255  \n  ...\n  262  \n  263  \t\t\t\t\tvar tr = table.insertRow(-1);\n  264: \t\t\t\t\t\ttr.insertCell(-1).innerHTML = \"Total Cost\";\n  265  \t\t\t\t\t\ttr.insertCell(-1).innerHTML = game.ships[0].totalCost;\n  266  \n  ...\n  268  \t\t\t\t\tvar tr = table.insertRow(-1);\n  269  \t\t\t\t\tvar button = tr.insertCell(-1);\n  270: \t\t\t\t\t\tbutton.innerHTML = \"Confirm Ship Selection\";\n  271: \t\t\t\t\t\tbutton.className = \"buttonTD\";\n  272  \t\t\t\t\t\tbutton.colSpan = 2;\n  273  \t\t\t\t\t\t$(button).click(function(){\n  ...\n  283  \t\t\n  284  \n  285: \t\tvar table = document.createElement(\"table\"); \n  286: \t\t\ttable.className = \"factionUpperTable\";\n  287: \t\tvar tr = document.createElement(\"tr\"); \n  288: \t\tvar th = document.createElement(\"th\");\n  289: \t\t\tth.style.fontSize = \"30px\";\n  290  \t\t\tth.colSpan = 3;\n  291: \t\t\tth.innerHTML = \"Assemble Your Fleet\"; tr.appendChild(th); table.appendChild(tr);\n  292  \n  293  \t\tfor (var i = 0; i < factions.length; i++){\n  294: \t\t\tvar tr = document.createElement(\"tr\");\n  295: \t\t\t\t$(tr).data(\"row\", i);\n  296: \t\t\t\t$(tr).data(\"faction\", factions[i]);\n  297: \t\t\t\t$(tr).data(\"avail\", false);\n  298  \t\t\t\t$(tr).mouseenter(function(){\n  299: \t\t\t\t\t$(this).addClass(\"highlight\");\n  300  \t\t\t\t}).mouseleave(function(){\n  301: \t\t\t\t\t$(this).removeClass(\"highlight\");\n  302  \t\t\t\t});\n  303  \t\t\t\t$(tr).click(function(){\n  304: \t\t\t\t\trequestShipsForFaction($(this).data(\"faction\"), this, showShipList);\n  305  \t\t\t\t});\n  306  \n  307: \t\t\tvar td = document.createElement(\"td\");\n  308: \t\t\t\ttd.style.textAlign = \"center\";\n  309  \t\t\t\ttd.appendChild(icons[i]); tr.appendChild(td);\n  310: \t\t\tvar td = document.createElement(\"td\");\n  311: \t\t\t\ttd.style.textAlign = \"center\";\n  312: \t\t\t\ttd.style.fontSize = \"20px\";\n  313  \t\t\t\ttd.innerHTML = factions[i];\n  314: \t\t\t\ttd.style.width = \"40%\"; tr.appendChild(td);\n  315: \t\t\tvar td = document.createElement(\"td\");\n  316: \t\t\t\ttd.style.textAlign = \"center\";\n  317: \t\t\t\ttd.innerHTML = '<img src=\"' + icons[i].src + '\"></img>' ; tr.appendChild(td);\n  318  \n  319  \t\t\t\ttable.appendChild(tr);\n  320  \n  321  \n  322: \t\t\tvar tr = document.createElement(\"tr\");\n  323: \t\t\t\ttr.style.display = \"none\";\n  324: \t\t\tvar td = document.createElement(\"td\");\n  325  \t\t\t\ttd.colSpan = 3;\n  326: \t\t\tvar subTable = document.createElement(\"table\");\n  327: \t\t\t\tsubTable.className = \"factionclassnameTable\";\n  328  \n  329: \t\t\tvar subTr = document.createElement(\"tr\");\n  330: \t\t\t\t\tsubTh = document.createElement(\"th\");\n  331: \t\t\t\t\tsubTh.style.width = \"200px\";\n  332: \t\t\t\t\tsubTh.style.fontSize = \"16px\";\n  333: \t\t\t\t\tsubTh.innerHTML = \"Class\";\n  334  \t\t\t\tsubTr.appendChild(subTh);\n  335: \t\t\t\t\tsubTh = document.createElement(\"th\");\n  336: \t\t\t\t\tsubTh.style.width = \"70px\";\n  337: \t\t\t\t\tsubTh.style.fontSize = \"16px\";\n  338: \t\t\t\t\tsubTh.innerHTML = \"Cost\";\n  339  \t\t\t\tsubTr.appendChild(subTh);\n  340: \t\t\t\t\tsubTh = document.createElement(\"th\");\n  341: \t\t\t\t\tsubTh.style.fontSize = \"16px\";\n  342  \t\t\t\tsubTr.appendChild(subTh);\n  343  \n  ...\n  349  \t\t\t}\n  350  \n  351: \t\t\t$(\"#factionDiv\").append(table);\n  352  \t\t}\n  353  \t\telse {\n  354: \t\t\t$(\"#game\").hide();\n  355  \t\t}\n  356  \n  ...\n  380  \t\tvar fleetCost = getFleetCost();\n  381  \t\tif (fleetCost && fleetCost <= window.maxPoints){\n  382: \t\t\t$(\"#shipsBoughtTable\").find(\".buttonTD\").removeClass(\"disabled\");\n  383  \t\t}\n  384  \t\telse {\n  385: \t\t\t$(\"#shipsBoughtTable\").find(\".buttonTD\").addClass(\"disabled\");\n  386  \t\t}\n  387  \t\t/*if (reinforceFaction.length && fleetCost){\n  388: \t\t\t$(\"#confirmFleet\").removeClass(\"disabled\");\n  389  \t\t}\n  390  \t\telse {\n  391: \t\t\t$(\"#confirmFleet\").addClass(\"disabled\");\n  392  \t\t}*/\n  393  \t}\n  ...\n  398  \n  399  \tfunction requestShipData(name){\n  400: \t\t//\t\tconsole.log(\"requestShipData\");\n  401  \t\t$.ajax({\n  402: \t\t\ttype: \"GET\",\n  403: \t\t\turl: \"getGameData.php\",\n  404: \t\t\tdatatype: \"json\",\n  405  \t\t\tdata: {\n  406: \t\t\t\t\ttype: \"shipdata\",\n  407  \t\t\t\t\tname: name,\n  408  \t\t\t\t\t},\n  ...\n  416  \n  417  \t\twindow.ships[0] = JSON.parse(data);\n  418: \t\t$(\".shipDiv\").remove();\n  419: \t\t$(\"#hangarLoadoutDiv\").addClass(\"disabled\");\n  420: \t\t$(\"#weaponLoadoutDiv\").addClass(\"disabled\");\n  421: \t\t$(\"#hangarTable\").html(\"\");\n  422  \n  423  \t\tfor (var i = 0; i < window.ships.length; i++){\n  424  \t\t\tvar ship = window.initiateShip(window.ships[i]);\n  425  \t\t\t\tship.facing = -90;\n  426: \t\t\tship.actions.push(new Move(-1, \"deploy\", 0, res.x/2, res.y/2, 270, 0, 0, 1, 1, 1));\n  427  \t\t}\n  428  \n  429  \t\tgame.ships[0] = ship;\n  430  \t\tship.create();\n  431: \t\t$(\"#game\").removeClass(\"disabled\");\n  432  \t\tship.createBaseDiv();\n  433  \t\tship.previewSetup();\n  434: \t\t$(\".shipDiv\")\n  435: \t\t\t.css(\"left\", \"460px\").css(\"top\", \"220px\").removeClass(\"disabled\")\n  436: \t\t\t.find(\".structContainer\").show();\n  437  \t\tdrawShipPreview();\n  438  \n  439: \t\tvar div = document.createElement(\"div\");\n  440: \t\t\tdiv.style.border = \"1px solid white\";\n  441: \t\tvar table = document.createElement(\"table\");\t\t\n  442: \t\t\ttable.id = \"totalShipCost\";\n  443  \n  444  \t\tdiv.appendChild(table);\n  445  \n  446: \t\tdocument.getElementsByClassName(\"shipDiv\")[0].appendChild(div);\n  447  \t\twindow.game.setShipTotal();\n  448  \t}\n  ...\n  451  \tfunction addShipToFleet(){\n  452  \n  453: \t\tvar cur = Math.floor($(\"#totalFleetCost\").html());\n  454  \t\tvar add = game.ships[0].totalCost;\n  455  \t\tvar max = window.maxPoints;\n  ...\n  459  \t\t\tvar ship = {\n  460  \t\t\t\tname: game.ships[0].name,\n  461: \t\t\t\ttype: \"Ship\",\n  462  \t\t\t\tfaction: game.ships[0].faction,\n  463  \t\t\t\tvalue: game.ships[0].totalCost,\n  ...\n  470  \t\t\twindow.game.shipsBought.push(ship);\n  471  \n  472: \t\t\tvar tr = document.createElement(\"tr\");\n  473: \t\t\t$(tr).data(\"purchaseId\", ship.purchaseId)\n  474  \t\t\t\t.click(function(e){\n  475  \t\t\t\t\te.preventDefault();\n  476  \t\t\t\t\tremoveShipFromFleet($(this));\n  477  \t\t\t\t}).hover(function(e){\n  478: \t\t\t\t\t$(this).toggleClass(\"fontHighlight\");\n  479  \t\t\t\t})\n  480  \n  ...\n  485  \t\t\ttr.appendChild(td);\n  486  \n  487: \t\t\tvar target = document.getElementById(\"totalFleetCost\");\n  488  \t\t\t\ttarget.parentNode.parentNode.insertBefore(tr, target.parentNode);\n  489  \t\t\t\t$(target).html(getFleetCost());\n  490: \t\t\t\t$(\".shipDiv\").remove();\n  491: \t\t\t\t$(\"#game\").addClass(\"disabled\");\n  492: \t\t\t\t$(\"#hangarLoadoutDiv\").addClass(\"disabled\");\n  493: \t\t\t\t$(\"#hangarTable\").html(\"\");\n  494  \t\t\t\tcanSubmit();\n  495  \t\t}\n  496  \t\telse {\n  497: \t\t\tpopup(\"You have insufficient point value left\");\n  498  \t\t\treturn false;\n  499  \t\t}\n  ...\n  502  \tfunction removeShipFromFleet(ele){\n  503  \t\tfor (var i = window.game.shipsBought.length; i--; i > 0){\n  504: \t\t\tif (window.game.shipsBought[i].purchaseId == $(ele).data(\"purchaseId\")){\n  505  \t\t\t\twindow.game.shipsBought.splice(i, 1);\n  506  \t\t\t\t$(ele).remove();\n  ...\n  508  \t\t\t}\n  509  \t\t}\n  510: \t\t$(\"#totalFleetCost\").html(getFleetCost());\n  511  \t\tcanSubmit();\n  512  \t}\n  ...\n  514  \tfunction initPreviewCanvas(){\n  515  \n  516: \t\tvar canva = document.getElementsByTagName(\"canvas\");\n  517  \t\tfor (var i = 0; i < canva.length; i++){\n  518  \t\t\tcanva[i].width = res.x;\n  ...\n  522  \t\t}\n  523  \n  524: \t\twindow.fxCanvas = document.getElementById(\"fxCanvas\");\n  525: \t\twindow.fxCtx = fxCanvas.getContext(\"2d\");\n  526  \n  527: \t\twindow.shipCanvas = document.getElementById(\"shipCanvas\");\n  528: \t\twindow.shipCtx = shipCanvas.getContext(\"2d\");\n  529  \t}\n  530  \n  ...\n  540  \n  541  \tfunction requestShipsForFaction(faction, ele, callback){\n  542: \t\tif (!$(ele).data(\"avail\")){\n  543  \t\t\t$.ajax({\n  544: \t\t\t\ttype: \"GET\",\n  545: \t\t\t\turl: \"getGameData.php\",\n  546: \t\t\t\tdatatype: \"json\",\n  547  \t\t\t\tdata: {\n  548: \t\t\t\t\t\ttype: \"shiplist\",\n  549  \t\t\t\t\t\tfaction: faction\n  550  \t\t\t\t\t\t},\n  ...\n  556  \t\t}\n  557  \t\telse {\n  558: \t\t\t$(ele.parentNode.childNodes[($(ele).data(\"row\")*2)+2]).slideToggle(0);\n  559: \t\t\tvar t = $(\".factionUpperTable\").position();\n  560: \t\t\tvar h =  $(\".factionUpperTable\").height();\n  561: \t\t\t$(\"#game\").css(\"top\", t.top+h+20);\n  562  \t\t}\n  563  \t}\n  ...\n  568  \t\t} else return;\n  569  \n  570: \t\tvar row = $(ele).data(\"row\");\n  571  \n  572: \t\tif (!$(ele).data(\"avail\")){\n  573  \t\t\tfor (var i = 0; i < shiplist.length; i++){\n  574: \t\t\t\tvar subTr = document.createElement(\"tr\")\n  575  \t\t\t\t\t$(subTr).hover(function(){\n  576: \t\t\t\t\t\t$(this).toggleClass(\"highlight\");\n  577  \t\t\t\t\t})\n  578  \n  579  \t\t\t\t\tvar subTd = subTr.insertCell(-1);\n  580: \t\t\t\t\t\tsubTd.innerHTML = shiplist[i][\"name\"];\n  581  \n  582  \t\t\t\t\tvar subTd = subTr.insertCell(-1);\n  583: \t\t\t\t\t\tsubTd.innerHTML = shiplist[i][\"value\"];\n  584  \n  585  \t\t\t\t\tvar subTd = subTr.insertCell(-1);\t\n  586: \t\t\t\t\t\tsubTd.innerHTML = \"Add to fleet\";\n  587: \t\t\t\t\t\t$(subTd).data(\"name\", shiplist[i][\"name\"]).data(\"value\", shiplist[i][\"value\"])\n  588  \t\t\t\t\t\t\t.hover(function(){\n  589: \t\t\t\t\t\t\t\t$(this).toggleClass(\"selectionHighlight\");\n  590  \t\t\t\t\t\t\t}).click(function(){\n  591  \t\t\t\t\t\t\t\trequestShipData(this.parentNode.childNodes[0].innerHTML);\n  ...\n  597  \t\t\t\t\tele.parentNode.childNodes[(row*2)+2].childNodes[0].childNodes[0].appendChild(subTr);\n  598  \n  599: \t\t\t\t$(ele).data(\"avail\", true);\n  600  \t\t\t}\n  601  \t\t}\n  ...\n  604  \t\t$(ele.parentNode.childNodes[(row*2)+2]).slideToggle(0);\n  605  \n  606: \t\tvar t = $(\".factionUpperTable\").position();\n  607: \t\tvar h =  $(\".factionUpperTable\").height();\n  608: \t\t$(\"#game\").css(\"top\", t.top+h+20);\n  609  \n  610  \t}\n  ...\n  627  \n  628  \tfunction joinGame(){\n  629: \t\tconsole.log(\"joinGame\");\n  630  \t\tajax.joinGame(playerid, gameid, refresh);\n  631  \t}\n  632  \n  633  \tfunction leaveGame(){\n  634: \t\tconsole.log(\"leaveGame\");\n  635  \t\tajax.leaveGame(playerid, gameid, window.goToLobby);\n  636  \t}\n\nC:\\xampp\\htdocs\\fire\\getGameData.php:\n    4  \n    5  $dbManager = DBManager::app();\n    6: $manager = new Manager($_SESSION[\"userid\"], $_SESSION[\"gameid\"] = 0);\n    7: $gameid = $_SESSION[\"gameid\"];\n    8  \t\n    9  \n   10: if (isset($_GET[\"type\"])){\n   11: \tif ($_GET[\"type\"] == \"chat\"){\n   12: \t\techo JSON_encode($dbManager->getNewChat($_GET[\"time\"]));\n   13  \t}\n   14: \telse if ($_GET[\"type\"] == \"status\"){\n   15  \t\t$status = $dbManager->getGameStatus(\n   16: \t\t\t\t\t\t\t\t\t\t\t$_GET[\"gameid\"],\n   17: \t\t\t\t\t\t\t\t\t\t\t$_GET[\"userid\"],\n   18: \t\t\t\t\t\t\t\t\t\t\t$_GET[\"currentTurn\"]\n   19  \t\t\t\t\t\t\t\t\t\t);\n   20  \t\techo JSON_encode($status);\n   21  \t}\n   22: \telse if ($_GET[\"type\"] == \"shiplist\"){\n   23: \t\t$ships = $manager->getShipsForFaction($_GET[\"faction\"]);\n   24  \t\techo json_encode($ships);\n   25  \t}\n   26: \telse if ($_GET[\"type\"] == \"shipdata\"){\n   27: \t\t$ship = $manager->getPreviewData($_GET[\"name\"]);\n   28  \t\techo json_encode($ship);\n   29  \t}\n\nC:\\xampp\\htdocs\\fire\\global.php:\n    3  \terror_reporting(E_ALL);\n    4  \t\n    5: \t-include(dirname(__FILE__) . \"/autoload.php\");\n    6: \t//include(dirname(__FILE__) . \"\\server\\classes.php\");\n    7: \t//include(dirname(__FILE__) . \"\\server\\math.php\");\n    8: \t//include(dirname(__FILE__) . \"\\server\\debug.php\");\n    9: \t//include(dirname(__FILE__) . \"\\server\\classes.php\");\n   10  \n   11  \t//require_once('autoload.php');\n   12: \t//require_once(\"server\\classes.php\");\n   13: \t//require_once(\"server\\math.php\");\n   14  \tsession_start();\n   15  ?>\n\nC:\\xampp\\htdocs\\fire\\index.php:\n    1  <?php\n    2: include(dirname(__FILE__) . \"/autoload.php\");\n    3  //session_start();\n    4  \n    5: if (isset($_SESSION[\"userid\"]) && $_SESSION[\"userid\"] != false){\n    6: \theader(\"Location: lobby.php\");\n    7  \treturn;\n    8  }\n    9  \n   10: if (isset($_POST[\"username\"]) && isset($_POST[\"password\"])){\n   11: \tif ( $_POST[\"username\"] != \"\" && $_POST[\"password\"] != \"\" ){\n   12  \t\t$dbManager = DBManager::app();\n   13: \t\t$data = $dbManager->validateLogin($_POST[\"username\"], $_POST[\"password\"]);\n   14  \t\tif ($data){\n   15: \t\t\t$_SESSION[\"userid\"] = $data[\"id\"];\n   16: \t\t\t$_SESSION[\"access\"] = $data[\"access\"];\n   17: \t\t\theader(\"Location: lobby.php\");\t\n   18  \t\t}\n   19  \t\telse {\n   20: \t\t\techo \"<font color='red'>Please enter valid login data</font>\";\n   21  \t\t}\n   22  \t}\n   23  \telse {\n   24: \t\techo \"<font color='red'>Please enter valid login data</font>\";\n   25  \t}\n   26  }\n   27: else if (isset($_POST[\"newUsername\"]) && isset($_POST[\"newPassword\"])){\n   28: \tif ( $_POST[\"newUsername\"] != \"\" && $_POST[\"newPassword\"] != \"\" ){\n   29  \t\t$dbManager = new DBManager();\n   30: \t\t$dbManager->registerAccount($_POST[\"newUsername\"], $_POST[\"newPassword\"]);\n   31  \t}\n   32  \telse {\n   33: \t\techo \"Please enter valid registration data\";\t\n   34  \t}\n   35  }\n   ..\n   43  <head>\n   44  \t<link rel='stylesheet' href='style.css'/>\n   45: \t<script src=\"jquery-2.1.1.min.js\"></script>\n   46  </head>\n   47  \t<body> \n   48: \t\t<div style=\"margin: auto; width: 500px\">\n   49: \t\t\t<div id=\"loginDiv\">\n   50: \t\t\t\t<form method=\"post\">\n   51: \t\t\t\t\t<input type=\"form\" style=\"margin-bottom: 5px; margin-top: 5px\" placeholder=\"Enter Username here\" name=\"username\" value=\"\"></input>\n   52: \t\t\t\t\t<input type=\"form\" style=\"margin-bottom: 5px;\"placeholder=\"Enter Password here\" name=\"password\" value=\"\"></input>\n   53: \t\t\t\t\t<input type=\"submit\" style=\"width: auto; display: block;\" value=\"Login\"></input>\t\n   54  \t\t\t\t\t</br>\n   55  \t\t\t\t</form>\n   56: \t\t\t\t\t<input type=\"button\" style=\"margin-top: 30px; margin-bottom: 10px;\" value=\"Or Register\" onclick=\"register()\"></input>\n   57  \t\t\t</div>\n   58  \t\t\t\n   59: \t\t\t<div id=\"registerDiv\">\n   60: \t\t\t\t<form method=\"post\">\n   61: \t\t\t\t\t<input type=\"form\" placeholder=\"Enter new Username here\" name=\"newUsername\"></input>\t\n   62: \t\t\t\t\t<input type=\"form\" placeholder=\"Enter new Password here\" name=\"newPassword\"></input>\n   63: \t\t\t\t\t<input type=\"submit\" value=\"Create Account\"></input>\n   64  \t\t\t\t</form>\t\n   65  \t\t\t</div>\n   66: \t\t\t<div style=\"margin: auto; margin-top: 20px; display: block; text-align: center; width: auto; border: none;\">\n   67  \t\t\t\t<span>\n   68: \t\t\t\t\t<a href=\"logout.php\">\n   69  \t\t\t\t\t\tEXIT\n   70  \t\t\t\t\t</a>\n   ..\n   78  \n   79  function register(){\n   80: \t$(\"#loginDiv\").hide();\n   81: \t$(\"#registerDiv\").show();\n   82  }\n   83  \n\nC:\\xampp\\htdocs\\fire\\lobby.php:\n    3  include_once 'global.php';\n    4  \n    5: if (isset($_SESSION[\"userid\"])){\n    6: \t$manager = new Manager($_SESSION[\"userid\"]);\n    7  \t$username = $manager->getUsername();\n    8  \t$dbManager = DBManager::app();\n    9  \n   10: \techo \"<script>\";\n   11: \techo \"window.userid = \".$_SESSION[\"userid\"].\";\";\n   12: \techo \"window.username = '\".$username.\"';\";\n   13: \techo \"</script>\";\n   14: \tif (isset($_POST[\"gameName\"]) && isset($_POST[\"pointValue\"]) && isset($_POST[\"reinforceValue\"])){\n   15: \t\tif ( $_POST[\"gameName\"] != \"\" && $_POST[\"pointValue\"] != \"\" && $_POST[\"reinforceValue\"] != \"\"){\n   16: \t\t\tif (ctype_digit($_POST[\"pointValue\"]) && ctype_digit($_POST[\"reinforceValue\"])){\n   17: \t\t\t\t$id = $dbManager->createNewGameAndJoin($_SESSION[\"userid\"], $_POST[\"gameName\"], $_POST[\"pointValue\"], $_POST[\"reinforceValue\"]);\n   18  \t\t\t\tif ($id){\n   19: \t\t\t\t\theader(\"Location: gameSetup.php?gameid=\".$id);\n   20  \t\t\t\t}\n   21  \t\t\t}\n   22  \t\t\telse {\n   23: \t\t\t\techo \"<span class='hinter'>Invalid point value entered</span>\";\n   24  \t\t\t}\n   25  \t\t}\n   26  \t\telse {\n   27: \t\t\techo \"<span class='hinter'>Please enter valid game data</span>\";\n   28  \t\t}\n   29  \t}\n   30  \n   31: \t$ongoingGames = $dbManager->getMyGames($_SESSION[\"userid\"]);\n   32  \tfor ($i = 0; $i < sizeof($ongoingGames); $i++){\n   33: \t\t//Debug::log(\"checking for canAdvance \".$ongoingGames[$i][\"id\"]);\n   34: \t\tif ($manager->canAdvance($ongoingGames[$i][\"id\"])){\n   35: \t\t\t//Debug::log(\"can!, now preparing\");\n   36: \t\t\t$manager->prepareAdvance($ongoingGames[$i][\"id\"]);\n   37  \t\t\t$manager->doAdvance();\n   38: \t\t\t$manager = new Manager($_SESSION[\"userid\"]);\n   39  \t\t}\n   40  \t}\n   41  \n   42: \t$ongoingGamesElement = \"<table>\";\n   43  \tif ($ongoingGames) {\t\n   44: \t\t$ongoingGamesElement .= \"<tr>\";\n   45: \t\t$ongoingGamesElement .= \"<th colSpan = 4>My Ongoing Games</th>\";\n   46: \t\t$ongoingGamesElement .= \"</tr>\";\n   47  \n   48: \t\t$ongoingGamesElement .= \"<tr>\";\n   49: \t\t$ongoingGamesElement .= \"<th style='width: 40%'>Game Name</th>\";\n   50: \t\t$ongoingGamesElement .= \"<th style='width: 10%'>Turn</th>\";\n   51: \t\t$ongoingGamesElement .= \"<th style='width: 30%'>Phase</th>\";\n   52: \t\t$ongoingGamesElement .= \"<th style='width: 15%'>Status</th>\";\n   53: \t\t$ongoingGamesElement .= \"</tr>\";\n   54  \t\t\n   55  \t\tforeach ($ongoingGames as $game){\n   56: \t\t\t$phase = \"\";\n   57  \n   58: \t\t\tswitch ($game[\"phase\"]){\n   59  \t\t\t\tcase -1:\n   60: \t\t\t\t\t$phase = \"Deployment / Initial\"; break;\n   61  \t\t\t\tcase 0:\n   62: \t\t\t\t\t$phase = \"Capital Movement\"; break;\n   63  \t\t\t\tcase 1:\n   64: \t\t\t\t\t$phase = \"Flight Movement\"; break;\n   65  \t\t\t\tcase 2:\n   66: \t\t\t\t\t$phase = \"Firing\"; break;\n   67  \t\t\t\tcase 3:\n   68: \t\t\t\t\t$phase = \"Damage Control\"; break;\n   69  \t\t\t\tdefault:\n   70  \t\t\t\t\tbreak;\n   71  \t\t\t}\n   72  \t\t\t\n   73: \t\t\t$ongoingGamesElement .= \"<tr>\";\n   74: \t\t\t$ongoingGamesElement .= \"<td>\";\n   75: \t\t\t$ongoingGamesElement .= \"<a href=game.php?gameid=\".$game['id'].\">\";\n   76: \t\t\t$ongoingGamesElement .= \"<font color='darkcyan'>\".$game[\"name\"].\"</font>\";\n   77: \t\t\t$ongoingGamesElement .= \"</a>\";\n   78: \t\t\t$ongoingGamesElement .= \"</td>\";\n   79  \t\t\t\n   80: \t\t\t$ongoingGamesElement .= \"<td>\".$game[\"turn\"].\"</td>\";\n   81: \t\t\t$ongoingGamesElement .= \"<td>\".$phase.\"</td>\";\n   82  \n   83: \t\t\t$status = $game[\"playerstatus\"];\n   84  \t\t\t$td;\n   85: \t\t\tif ($status == \"waiting\"){\n   86: \t\t\t\t$td = \"<td style='color: white; background-color: #ff3d00'>Awaiting Orders</td>\";\n   87  \t\t\t}\n   88  \t\t\telse {\n   89: \t\t\t\t$td = \"<td style='color: white; background-color: green'>Waiting for Opponent</td>\";\n   90  \t\t\t}\n   91  \t\t\t$ongoingGamesElement .= $td;\n   92: \t\t\t$ongoingGamesElement .= \"</tr>\";\n   93  \t\t}\n   94  \t\t\n   95: \t\t$ongoingGamesElement .= \"</table>\";\n   96  \t}\n   97  \telse {\n   98: \t\t$ongoingGamesElement .= \"<tr><th>no Active Games found</tr></th></table>\";\n   99  \t}\n  100  \n  ...\n  102  \n  103  \t/*for ($i = 0; $i < sizeof($openGames); $i++){\n  104: \t\tif ($openGames[$i][\"id\"] == 1){\n  105: \t\t\tif ($dbManager->gameIsReady($openGames[$i][\"id\"])){\n  106: \t\t\t\tif ($dbManager->startGame($openGames[$i][\"id\"])){\n  107: \t\t\t\t\techo \"SUCCESS\";\n  108  \t\t\t\t}\n  109  \t\t\t}\n  ...\n  111  \t}*/\n  112  \t\n  113: \t$openGamesElement = \"<table>\";\n  114  \tif ($openGames) {\n  115: \t\t$openGamesElement .= \"<tr>\";\n  116: \t\t$openGamesElement .= \"<th style='font-size: 26px' colSpan = 5>Open Games</th>\";\n  117: \t\t$openGamesElement .= \"</tr>\";\n  118  \n  119: \t\t$openGamesElement .= \"<tr>\";\n  120: \t\t$openGamesElement .= \"<td style='font-size: 18px' >Game Name</td>\";\n  121: \t\t$openGamesElement .= \"<td style='font-size: 18px' >Point Value</td>\";\n  122: \t\t$openGamesElement .= \"<td style='font-size: 18px' >Reinforce / Turn</td>\";\n  123: \t\t$openGamesElement .= \"<td style='font-size: 18px' >Players</td>\";\n  124: \t\t$openGamesElement .= \"<td>My Status</td>\";\n  125: \t\t$openGamesElement .= \"</tr>\";\n  126  \n  127  \t\t\n  128  \t\tforeach ($openGames as $game){\n  129: \t\t\t$players = $dbManager->getPlayersInGame($game[\"id\"]);\n  130  \t\t//$players = 0;\n  131: \t\t//$players = $dbManager->getAmountOfPlayersInGame($game[\"id\"]);\n  132  \n  133: \t\t\t$openGamesElement .= \"<tr>\";\n  134: \t\t\t$openGamesElement .= \"<td width='40%'>\";\n  135: \t\t\t$openGamesElement .= \"<a href=gameSetup.php?gameid=\".$game['id'].\">\";\n  136: \t\t\t$openGamesElement .= \"<font color='darkcyan'>\".$game[\"name\"].\"</font>\";\n  137: \t\t\t$openGamesElement .= \"</a>\";\n  138: \t\t\t$openGamesElement .= \"</td>\";\n  139: \t\t\t$openGamesElement .= \"<td>\".$game[\"pv\"].\"</td>\";\n  140: \t\t\t$openGamesElement .= \"<td>\".$game[\"reinforce\"].\"</td>\";\n  141: \t\t\t$openGamesElement .= \"<td>\".sizeof($players).\"</td>\";\n  142  \n  143  \t\t\t$in = false;\n  144  \t\t\tfor ($i = 0; $i < sizeof($players); $i++){\n  145: \t\t\t\t//Debug::log(\"looking for: \".$manager->userid.\", now: \".$players[$i][\"id\"]);\n  146: \t\t\t\tif ($players[$i][\"userid\"] == $manager->userid){\n  147  \t\t\t\t\t$in = true;\n  148: \t\t\t\t\t$status = $players[$i][\"status\"];\n  149: \t\t\t\t\t$style = \"\";\n  150: \t\t\t\t\tif ($status == \"ready\"){$style = \"background-color: green'\";\n  151: \t\t\t\t\t} else $style = \"background-color: yellow; color: black'\";\n  152  \n  153: \t\t\t\t\t$openGamesElement .= \"<td style='\".$style.\">\".$status.\"</td>\";\n  154  \t\t\t\t}\n  155  \t\t\t}\n  156  \t\t\tif (!$in){\n  157: \t\t\t\t$openGamesElement .= \"<td></td>\";\n  158  \t\t\t}\n  159  \n  160  \t\t}\n  161  \t\t\n  162: \t\t$openGamesElement .= \"</table>\";\n  163  \t}\n  164  \telse {\n  165: \t\t$openGamesElement .= \"<tr><th>no Open Games found</tr></th></table>\";\n  166  \t}\n  167  }\n  168  else {\n  169:    header(\"Location: index.php\");\n  170  }\n  171  \n  ...\n  178  <head>\n  179  \t<link rel='stylesheet' href='style.css'/>\n  180: \t<script src=\"jquery-2.1.1.min.js\"></script>\n  181  \t<script src='ajax.js'></script>\n  182  </head>\n  183  \t<body>\n  184  \t\t<div style>\n  185: \t\t\t<div class=\"lobbyDiv\">\n  186  \t\t\t\t<span>\n  187  \t\t\t\t\t<?php\n  188: \t\t\t\t\t\tif (isset($_SESSION[\"userid\"])){\n  189: \t\t\t\t\t\t\techo \"<font color='red'>Welcome, \".$username.\", your player ID: \".$_SESSION['userid'].\"</font>\";\n  190: \t\t\t\t\t\t} else echo \"error, no userid,\";\n  191  \t\t\t\t\t?>\n  192  \t\t\t\t</span>\n  193  \t\t\t</div>\n  194: \t\t\t<div class=\"lobbyDiv\">\n  195  \t\t\t\t<?php echo $ongoingGamesElement; ?>\n  196  \t\t\t</div>\n  197: \t\t\t<div class =\"chatWrapper\">\n  198: \t\t\t\t<div class =\"chatBox\">\n  199  \t\t\t\t\t<?php\n  200  \t\t\t\t\t\t$chat = DBManager::app()->getFullChat();\n  ...\n  202  \t\t\t\t\t\tif (sizeof($chat)){\n  203  \t\t\t\t\t\t\tfor ($i = 0; $i < sizeof($chat); $i++){\n  204: \t\t\t\t\t\t\t\techo \"<span>\".date(\"G:i:s\", $chat[$i][\"time\"]).\" - \".$chat[$i][\"username\"].\": \".$chat[$i][\"msg\"].\"</span></br>\";\n  205  \t\t\t\t\t\t\t}\n  206: \t\t\t\t\t\t\t$last = $chat[sizeof($chat)-1][\"time\"];\n  207  \t\t\t\t\t\t}// else $last = 1;\n  208  \n  209: \t\t\t\t\t\techo \"<script>window.time = \".$last.\";</script>\";\n  210  \t\t\t\t\t\t//var_export($last);\n  211  \n  212  \t\t\t\t\t?>\n  213  \t\t\t\t</div>\n  214: \t\t\t\t<div class =\"sendWrapper\">\n  215: \t\t\t\t\t<input id=\"msg\" placeholder =\"chat here\" type=\"form\" style=\"width:88%\">\n  216: \t\t\t\t\t<!--<input type=\"button\" value=\"send\" onclick=\"ajax.doChat()\">-->\n  217  \t\t\t\t</div>\n  218  \t\t\t</div>\n  219: \t\t\t<div class=\"lobbyDiv\">\n  220  \t\t\t\t<?php echo $openGamesElement; ?>\n  221  \t\t\t</div>\n  222: \t\t\t<div class=\"link\">\n  223  \t\t\t\tCreate a new Game\n  224  \t\t\t</div>\n  225: \t\t\t<div id=\"createGame\" class=\"disabled\">\n  226: \t\t\t\t<form method=\"post\">\n  227: \t\t\t\t\t<table style=\"width: 100%; margin: auto\" >\n  228  \t\t\t\t\t\t<tr>\n  229  \t\t\t\t\t\t\t<td>\n  230: \t\t\t\t\t\t\t\t<input type=\"form\" style=\"text-align: center\" value='myGame' placeholder=\"Game Name\" name=\"gameName\"></input>\t\t\n  231  \t\t\t\t\t\t\t</td>\n  232  \t\t\t\t\t\t</tr>\n  233  \t\t\t\t\t\t<tr>\n  234  \t\t\t\t\t\t\t<td>\n  235: \t\t\t\t\t\t\t\t<input type=\"form\" style=\"text-align: center\" placeholder=\"Point Value\" name=\"pointValue\"></input>\t\t\n  236  \t\t\t\t\t\t\t</td>\n  237  \t\t\t\t\t\t</tr>\n  238  \t\t\t\t\t\t<tr>\n  239  \t\t\t\t\t\t\t<td>\n  240: \t\t\t\t\t\t\t\t<input type=\"form\" style=\"text-align: center\" placeholder=\"Reinforce / Turn\" name=\"reinforceValue\"></input>\t\t\n  241  \t\t\t\t\t\t\t</td>\n  242  \t\t\t\t\t\t</tr>\n  243  \t\t\t\t\t\t<tr>\n  244  \t\t\t\t\t\t\t<td>\n  245: \t\t\t\t\t\t\t\t<input type=\"submit\" style=\"width: 100%\" value=\"Confirm and Forward\"></input>\t\n  246  \t\t\t\t\t\t\t</td>\n  247  \t\t\t\t\t\t</tr>\n  248  \t\t\t\t\t</table>\n  249  \t\t\t</div>\n  250: \t\t\t<div class=\"link\">\n  251  \t\t\t\tLogout\n  252  \t\t\t</div>\n  ...\n  260  \n  261  \n  262: \t\tvar buttons = $(\".link\");\n  263  \t\t//console.log(buttons);\n  264  \t\t$(buttons[0]).click(function(){\n  265: \t\t\t$(\"#createGame\").toggleClass(\"disabled\");\n  266  \t\t})\n  267  \t\t$(buttons[1]).click(function(){\n  268: \t\t\twindow.location = \"logout.php\"\n  269  \t\t})\n  270  \n  ...\n  278  \t\t})\n  279  \t\t\n  280: \t\t$(\".chatWrapper\").find(\".chatBox\").scrollTop(function(){return this.scrollHeight});\n  281  \t\tvar checkChat = setInterval(function(){\n  282  \t\t\t\tajax.getChat();\n\nC:\\xampp\\htdocs\\fire\\postGameData.php:\n    6  $dbManager;\n    7  \n    8: if (isset($_POST[\"type\"])) {\n    9: \tif ($_POST[\"type\"] == \"chat\"){\n   10  \t\tDBManager::app()->insertChatMsg($_POST);\n   11  \t\treturn true;\n   12  \t}\n   13  \n   14: \t$manager = new Manager($_POST[\"userid\"], $_POST[\"gameid\"]);\n   15: \t$dbManager = DBManager::app($_POST[\"userid\"]);\n   16  \n   17: \tif ($_POST[\"type\"] == \"joinGame\") {\n   18: \t\tif ($dbManager->createPlayerStatus($_POST[\"userid\"], $_POST[\"gameid\"], 0, -1, \"joined\")) {\n   19: \t\t\techo \"joinGame success\";\n   20  \t\t}\n   21  \t\telse {\n   22: \t\t\techo \"joinGame fail\";\n   23  \t\t}\n   24  \t}\n   25: \telse if ($_POST[\"type\"] == \"leaveGame\") {\n   26: \t\techo $dbManager->leaveGame($_POST[\"userid\"], $_POST[\"gameid\"]);\n   27  \t}\n   28: \telse if ($_POST[\"type\"] == \"buyInitialFleet\") {\n   29: \t\t$rem = $manager->validateFleetCost($_POST[\"ships\"]);\n   30  \t\tif ($rem >= 0){\n   31: \t\t\tif ($dbManager->processInitialBuy($_POST[\"userid\"], $_POST[\"gameid\"], $_POST[\"ships\"], $rem, $_POST[\"ships\"][0][\"faction\"])) {\n   32: \t\t\t\tif ($dbManager->gameIsReady($_POST[\"gameid\"])) {\n   33: \t\t\t\t\tif ($dbManager->startGame($_POST[\"gameid\"])) {\n   34: \t\t\t\t\t\theader(\"Location: game.php?gameid=\".$_POST[\"gameid\"]);\n   35  \t\t\t\t\t}\n   36  \t\t\t\t}\n   37  \t\t\t\telse {\n   38: \t\t\t\t\theader(\"Location: lobby.php\");\n   39  \t\t\t\t}\n   40  \t\t\t}\n   41  \t\t}\n   42: \t\telse echo \"Invalid Fleet\";\n   43  \t}\n   44: \telse if ($_POST[\"type\"] == \"deployment\"){\n   45: \t\tif (isset($_POST[\"initial\"])){\n   46: \t\t\t$dbManager->deployShipsDB($_POST[\"gameid\"], $_POST[\"initial\"]);\n   47  \t\t}\n   48: \t\tif (isset($_POST[\"reinforce\"])){\n   49: \t\t\t$dbManager->requestShipsDB($_POST[\"userid\"], $_POST[\"gameid\"], $manager->turn, $_POST[\"reinforce\"]);\n   50  \t\t}\n   51: \t\tif (isset($_POST[\"deployedFlights\"])){\n   52: \t\t\t$dbManager->deployFlightsDB($_POST[\"userid\"], $_POST[\"gameid\"], $_POST[\"deployedFlights\"]);\n   53  \t\t}\n   54: \t\tif (isset($_POST[\"missions\"])){\n   55: \t\t\t$dbManager->insertMissions($_POST[\"missions\"]);\n   56  \t\t}\n   57: \t\tif (isset($_POST[\"powers\"])){\n   58: \t\t\t$dbManager->insertPowers($_POST[\"gameid\"], $_POST[\"turn\"], $_POST[\"powers\"]);\n   59  \t\t}\n   60: \t\tif (isset($_POST[\"fireOrders\"])){\n   61: \t\t\t$dbManager->insertClientFireOrders($_POST[\"gameid\"], $_POST[\"turn\"], $_POST[\"fireOrders\"]);\n   62  \t\t}\n   63: \t\tif (isset($_POST[\"ew\"])){\n   64: \t\t\t$dbManager->insertEW($_POST[\"ew\"]);\n   65  \t\t}\n   66  \t\t//return;\n   67: \t\t$dbManager->setPlayerStatus($_POST[\"userid\"], $_POST[\"gameid\"], $_POST[\"turn\"], $_POST[\"phase\"], \"ready\");\n   68  \t}\n   69: \telse if ($_POST[\"type\"] == \"movement\"){;\n   70: \t\tif ($dbManager->insertClientActions($_POST[\"ships\"])){\n   71: \t\t\tif ($dbManager->setPlayerStatus($_POST[\"userid\"], $_POST[\"gameid\"], $_POST[\"turn\"], $_POST[\"phase\"], \"ready\")){\n   72: \t\t\t\techo \"movement success\";\n   73  \t\t\t}\n   74: \t\t} else echo \"movement fail\";\n   75  \t}\n   76: \telse if ($_POST[\"type\"] == \"firing\"){\n   77: \t\tif ($dbManager->insertClientFireOrders($_POST[\"gameid\"], $_POST[\"turn\"], $_POST[\"fireOrders\"])){\n   78: \t\t\tif ($dbManager->setPlayerStatus($_POST[\"userid\"], $_POST[\"gameid\"], $_POST[\"turn\"], $_POST[\"phase\"], \"ready\")){\n   79: \t\t\t\techo \"firing success\";\n   80  \t\t\t}\n   81  \t\t}\n   82  \t\telse {\n   83: \t\t\techo \"firing fail\";\n   84  \t\t}\n   85  \t}\n   86: \telse if ($_POST[\"type\"] == \"damageControl\"){\n   87: \t\tif ($dbManager->setPlayerStatus($_POST[\"userid\"], $_POST[\"gameid\"], $_POST[\"turn\"], $_POST[\"phase\"], \"ready\")){\n   88: \t\t\techo \"damageControl success\";\n   89  \t\t}\n   90  \t}\n   91: \telse if ($_POST[\"type\"] == \"reset\"){\n   92  \t\tif ($manager->reset()){\n   93  \t\t}\n   ..\n   95  }\n   96  else {\n   97: \techo \"no data to be found\";\n   98  }\n   99  \n\nC:\\xampp\\htdocs\\fire\\server\\classes.php:\n   57  \tfunction __construct($data){\n   58  \t\t//var_export($data);\n   59: \t\t$this->id = $data[\"id\"];\n   60: \t\t$this->unitid = $data[\"unitid\"];\n   61: \t\t$this->type = $data[\"type\"];\n   62: \t\t$this->turn = $data[\"turn\"];\n   63: \t\t$this->targetid = $data[\"targetid\"];\n   64: \t\t$this->x = $data[\"x\"];\n   65: \t\t$this->y = $data[\"y\"];\n   66: \t\t$this->arrived = $data[\"arrived\"];\n   67  \t}\n   68  }\n   ..\n  258  \tpublic $notes;\n  259  \n  260: \tfunction __construct($shieldDmg, $armourDmg, $structDmg, $notes = \"\"){\n  261  \t\t$this->shieldDmg = $shieldDmg;\n  262  \t\t$this->armourDmg = $armourDmg;\n\nC:\\xampp\\htdocs\\fire\\server\\dbManager.php:\n   11  \n   12  \t\t\tif ($this->connection === null){\n   13: \t\t\t\t//$user = \"aatu\"; $pass = \"Kiiski\";\n   14: \t\t\t\t$user = \"root\"; $pass = \"147147\";\n   15: \t\t\t\t$this->connection = new PDO(\"mysql:host=localhost;dbname=spacecombat\",$user,$pass);\n   16  \t\t\t\t$this->connection->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n   17  \t\t\t\t$this->connection->setAttribute(PDO::ATTR_EMULATE_PREPARES, false);\n   ..\n   20  \t\t\n   21  \t\tstatic public function app(){\n   22: \t        if(self::$instance === null OR !is_a(self::$instance, \"DBManager\")) {\n   23  \t            self::$instance = new DBManager();\n   24  \t        }\n   ..\n   30  \n   31  \t\tpublic function query($sql){\n   32: \t\t\t///Debug::log(\"query: --\".$sql.\"--\");\n   33  \t\t\t$stmt = $this->connection->prepare($sql);\n   34  \t\t\t$stmt->execute();\n   ..\n   37  \n   38  \t\tpublic function insertChatMsg($post){\n   39: \t\t\t$sql = \"INSERT INTO chat VALUES (0, '\".$post[\"username\"].\"', \".$post[\"userid\"].\", '\".$post[\"msg\"].\"', \".$post[\"time\"].\")\"; \n   40  \n   41  \t\t\t$this->connection->query($sql);\n   ..\n   44  \t\tpublic function getFullChat(){\n   45  \t\t\t$time = time();\n   46: \t\t\t$stmt = $this->connection->prepare(\"\n   47  \t\t\t\tSELECT * FROM chat\n   48: \t\t\t\");\n   49  \n   50  \t\t\t$stmt->execute();\n   ..\n   55  \n   56  \t\tpublic function getNewChat($time){\n   57: \t\t\t$stmt = $this->connection->prepare(\"\n   58  \t\t\t\tSELECT * FROM chat WHERE time > :time\n   59: \t\t\t\");\n   60  \n   61: \t\t\t$stmt->bindParam(\":time\", $time);\n   62  \t\t\t$stmt->execute();\n   63  \n   ..\n   77  \t\tpublic function update($sql){\n   78  \t\t\t\n   79: \t\t\t//Debug::log(\"upd\");\n   80  \t\t\t$stmt = $this->connection->prepare($sql);\n   81  \t\t\t\n   82  \t\t\tif ($stmt->execute()){\n   83: \t\t\t\t//Debug::log(\"true\");\n   84  \t\t\t\treturn true;\n   85  \t\t\t}\n   86  \t\t\telse {\n   87: \t\t\t\t//Debug::log(\"false\");\n   88  \t\t\t\treturn false;\n   89  \t\t\t}\n   ..\n   92  \t\tpublic function registerAccount($name, $pass){\n   93  \t\t\t\n   94: \t\t\t$sql = \"SELECT * FROM users\";\n   95  \t\t\t$result = $this->query($sql);\n   96  \t\t\t\n   ..\n   99  \t\t\tif ($result){\n  100  \t\t\t\tforeach ($result as $entry){\n  101: \t\t\t\t\tif ($entry[\"username\"] == $name){\n  102  \t\t\t\t\t\t$valid = false;\n  103  \t\t\t\t\t\tbreak;\n  ...\n  107  \t\t\t\n  108  \t\t\tif ($valid){\n  109: \t\t\t\t$stmt = $this->connection->prepare(\"\n  110  \t\t\t\t\tINSERT INTO users\n  111  \t\t\t\t\t\t(username, password, access)\n  112  \t\t\t\t\tVALUES\n  113  \t\t\t\t\t\t(:username, :password, :access)\n  114: \t\t\t\t\");\n  115  \n  116  \t\t\t\t$access = 0;\n  117  \t\t\t\t\n  118: \t\t\t\t$stmt->bindParam(\":username\", $name);\n  119: \t\t\t\t$stmt->bindParam(\":password\", $pass);\n  120: \t\t\t\t$stmt->bindParam(\":access\", $access);\n  121  \t\t\t\t\n  122  \t\t\t\t$stmt->execute();\n  123  \t\t\t\tif ($stmt->errorCode() == 0){\n  124: \t\t\t\t\techo \"<script>alert('Account created, please login');</script>\";\n  125  \t\t\t\t}\n  126  \t\t\t}\n  127  \t\t\telse { \n  128: \t\t\t\techo \"Account already exists !\";\n  129  \t\t\t}\n  130  \t\t}\n  131  \t\t\n  132  \t\tpublic function validateLogin($name, $pass){\t\t\n  133: \t\t\t//Debug::log(\"validating login\");\n  134: \t\t\t$stmt = $this->connection->prepare(\"\n  135  \t\t\t\tSELECT id, access FROM users\n  136  \t\t\t\tWHERE username = :username\n  137  \t\t\t\tAND\tpassword = :password\n  138: \t\t\t\");\n  139  \t\t\t\n  140: \t\t\t$stmt->bindParam(\":username\", $name);\n  141: \t\t\t$stmt->bindParam(\":password\", $pass);\n  142  \t\t\t$stmt->execute();\n  143  \t\t\t\t\t\n  ...\n  155  \t\t\t$this->createNewGame($name, $pv, $rv);\n  156  \t\t\t$id = $this->getLastInsertId();\n  157: \t\t\t$this->createPlayerStatus($userid, $id, 0, -1, \"joined\");\n  158  \t\t\tif ($id){\n  159  \t\t\t\treturn $id;\n  ...\n  162  \n  163  \t\tpublic function createPlayerStatus($userid, $gameid, $turn, $phase, $status){\n  164: \t\t\tDebug::log(\"createPlayerStatus\");\n  165  \n  166: \t\t\t$stmt = $this->connection->prepare(\"\n  167  \t\t\t\tINSERT INTO playerstatus\n  168  \t\t\t\t\t(userid, gameid, turn, phase, faction, value, status)\n  169  \t\t\t\tVALUES\n  170  \t\t\t\t\t(:userid, :gameid, :turn, :phase, :faction, :value, :status)\n  171: \t\t\t\");\n  172  \n  173: \t\t\t$faction = \"\";\n  174  \t\t\t$points = 0;\n  175  \n  176: \t\t\t$stmt->bindParam(\":userid\", $userid);\n  177: \t\t\t$stmt->bindParam(\":gameid\", $gameid);\n  178: \t\t\t$stmt->bindParam(\":turn\", $turn);\n  179: \t\t\t$stmt->bindParam(\":phase\", $phase);\n  180: \t\t\t$stmt->bindParam(\":faction\", $faction);\n  181: \t\t\t$stmt->bindParam(\":value\", $points);\n  182: \t\t\t$stmt->bindParam(\":status\", $status);\n  183  \n  184  \t\t\t$stmt->execute();\n  185  \n  186  \t\t\tif ($stmt->errorCode() == 0){\n  187: \t\t\t\t//Debug::log(\"entry CREATE for player \".$userid.\" in game \".$gameid.\" phase: \".$phase.\" and status \".$status);\n  188  \t\t\t\treturn true;\n  189  \t\t\t} else return false;\n  ...\n  191  \n  192  \t\tpublic function getAllReinforcements($gameid, $userid){\n  193: \t\t\t//Debug::log(\"getAvailableReinforcements\");\n  194: \t\t\t$stmt = $this->connection->prepare(\"\n  195  \t\t\t\tSELECT * FROM reinforcements \n  196  \t\t\t\tWHERE gameid = :gameid\n  197: \t\t\t\");\n  198  \n  199: \t\t\t$stmt->bindParam(\":gameid\", $gameid);\n  200: \t\t\t//$stmt->bindParam(\":userid\", $userid);\n  201  \n  202  \t\t\t$stmt->execute();\n  ...\n  210  \n  211  \t\tpublic function insertReinforcements($gameid, $userid, $ships){\n  212: \t\t\tDebug::log(\"insertReinforcements: \".sizeof($ships));\n  213: \t\t\t$stmt = $this->connection->prepare(\"\n  214  \t\t\t\tINSERT INTO reinforcements\n  215  \t\t\t\t\t(gameid, userid, name, eta, cost)\n  216  \t\t\t\tVALUES\n  217  \t\t\t\t\t(:gameid, :userid, :name, :eta, :cost)\n  218: \t\t\t\");\n  219  \n  220  \t\t\tfor ($i = 0; $i < sizeof($ships); $i++){\n  221: \t\t\t\t$stmt->bindParam(\":gameid\", $gameid);\n  222: \t\t\t\t$stmt->bindParam(\":userid\", $userid);\n  223: \t\t\t\t$stmt->bindParam(\":name\", $ships[$i][\"name\"]);\n  224: \t\t\t\t$stmt->bindParam(\":eta\", $ships[$i][\"eta\"]);\n  225: \t\t\t\t$stmt->bindParam(\":cost\", $ships[$i][\"value\"]);\n  226  \t\t\t\t$stmt->execute();\n  227  \t\t\t\t\n  ...\n  238  \t\t\n  239  \t\tpublic function createNewGame($name, $pv, $rv){\n  240: \t\t\t$stmt = $this->connection->prepare(\"\n  241  \t\t\t\tINSERT INTO games\n  242  \t\t\t\t\t(name, status, turn, phase, pv, reinforce)\n  243  \t\t\t\tVALUES\n  244  \t\t\t\t\t(:name, :status, :turn, :phase, :pv, :reinforce)\n  245: \t\t\t\");\n  246  \t\t\t\n  247: \t\t\t$status = \"open\";\n  248  \t\t\t$turn = -1;\n  249  \t\t\t$phase = -1;\n  250  \t\t\t\n  251: \t\t\t$stmt->bindParam(\":name\", $name);\n  252: \t\t\t$stmt->bindParam(\":status\", $status);\n  253: \t\t\t$stmt->bindParam(\":turn\", $turn);\n  254: \t\t\t$stmt->bindParam(\":phase\", $phase);\n  255: \t\t\t$stmt->bindParam(\":pv\", $pv);\n  256: \t\t\t$stmt->bindParam(\":reinforce\", $rv);\n  257  \t\t\t\n  258  \t\t\t$stmt->execute();\n  ...\n  262  \t\t\t}\n  263  \t\t\telse {\n  264: \t\t\t\techo \"<script>alert('ERROR');</script>\";\n  265  \t\t\t}\n  266  \t\t}\n  267  \t\t\n  268  \t\tpublic function leaveGame($userid, $gameid){\n  269: \t\t\t$stmt = $this->connection->prepare(\"\n  270  \t\t\t\tDELETE FROM playerstatus\n  271  \t\t\t\tWHERE gameid = :gameid\n  272  \t\t\t\tAND userid = :userid\n  273: \t\t\t\");\t\t\n  274  \t\t\t\n  275: \t\t\t$stmt->bindParam(\":gameid\", $gameid);\n  276: \t\t\t$stmt->bindParam(\":userid\", $userid);\n  277  \t\t\t$stmt->execute();\n  278  \t\t\t\n  279  \t\t\tif ($stmt->errorCode() == 0){\n  280: \t\t\t\t$sql = \"(SELECT * FROM playerstatus where gameid = \".$gameid.\")\";\n  281  \t\t\t\t$result = $this->query($sql);\n  282  \t\t\t\tif (!sizeof($result)){\n  283: \t\t\t\t\tDebug::log(\"deleting game\");\n  284: \t\t\t\t\t$sql = \"DELETE FROM games WHERE id = \".$gameid;\n  285  \t\t\t\t\tDebug::log($sql);\n  286  \t\t\t\t\t$this->query($sql);\n  ...\n  298  \t\t\t$this->setReinforceFaction($userid, $gameid, $faction);\n  299  \t\t\t$this->addReinforceValue($userid, $gameid, $rem);\n  300: \t\t\t$this->setPlayerStatus($userid, $gameid, -1, -1, \"ready\");\n  301  \t\t\treturn true;\n  302  \t\t}\n  303  \n  304  \t\tpublic function insertUnits($userid, $gameid, &$units){\n  305: \t\t\tDebug::log(\"DB insertUnits: \".sizeof($units));\n  306  \n  307: \t\t\t$stmt = $this->connection->prepare(\"\n  308  \t\t\t\tINSERT INTO units \n  309  \t\t\t\t\t(gameid, userid, ship, ball, name, status, available, destroyed)\n  310  \t\t\t\tVALUES\n  311  \t\t\t\t\t(:gameid, :userid, :ship, :ball, :name, :status, :available, :destroyed)\n  312: \t\t\t\");\n  313  \n  314  \t\t\t$missions = array();\n  ...\n  316  \t\t\t$ship = 0;\n  317  \t\t\t$ball = 0;\n  318: \t\t\t$status = \"\";\n  319  \t\t\t$destroyed = 0;\n  320  \n  321  \t\t\tfor ($i = 0; $i < sizeof($units); $i++){\n  322: \t\t\t\tif ($units[$i][\"type\"] == \"Flight\"){\n  323: \t\t\t\t\t$status = \"deployed\";\n  324  \t\t\t\t}\n  325: \t\t\t\telse if ($units[$i][\"type\"] == \"Salvo\"){\n  326  \t\t\t\t\t$ball = 1;\n  327: \t\t\t\t\t$status = \"deployed\";\n  328  \t\t\t\t}\n  329  \t\t\t\telse {\n  330  \t\t\t\t\t$ship = 1;\n  331: \t\t\t\t\t$status = \"bought\";\n  332  \t\t\t\t}\n  333  \n  334: \t\t\t\tif (isset($units[$i][\"userid\"])){\n  335: \t\t\t\t\t$userid = $units[$i][\"userid\"];\n  336  \t\t\t\t}\n  337  \n  338: \t\t\t\t$stmt->bindParam(\":gameid\", $gameid);\n  339: \t\t\t\t$stmt->bindParam(\":userid\", $userid);\n  340: \t\t\t\t$stmt->bindParam(\":ship\", $ship);\n  341: \t\t\t\t$stmt->bindParam(\":ball\", $ball);\n  342: \t\t\t\t$stmt->bindParam(\":name\", $units[$i][\"name\"]);\n  343: \t\t\t\t$stmt->bindParam(\":status\", $status);\n  344: \t\t\t\t$stmt->bindValue(\":available\", (floor($units[$i][\"turn\"]) + floor($units[$i][\"eta\"])));\n  345: \t\t\t\t$stmt->bindParam(\":destroyed\", $destroyed);\n  346  \t\t\t\t$stmt->execute();\n  347  \t\t\t\t\n  348  \t\t\t\tif ($stmt->errorCode() == 0){\n  349: \t\t\t\t\t$units[$i][\"id\"] = $this->getLastInsertId();\n  350: \t\t\t\t\t$units[$i][\"mission\"][\"unitid\"] = $units[$i][\"id\"];\n  351: \t\t\t\t\t$missions[] = $units[$i][\"mission\"];\n  352: \t\t\t\t\t//Debug::log(\"success, got id: \".$units[$i][\"id\"]);\n  353  \t\t\t\t\tcontinue;\n  354  \t\t\t\t}\n  355  \t\t\t\telse {\n  356  \t\t\t\t\tDebug::log($stmt->errorCode());\n  357: \t\t\t\t\tDebug::log(\"error\");\n  358  \t\t\t\t\treturn false;\n  359  \t\t\t\t}\n  ...\n  367  \n  368  \t\tpublic function insertSubUnits($units){\n  369: \t\t\tDebug::log(\"insertSubUnits\");\n  370: \t\t\t$stmt = $this->connection->prepare(\"\n  371  \t\t\t\tINSERT INTO subunits \n  372  \t\t\t\t\t(unitid, amount, name)\n  373  \t\t\t\tVALUES\n  374  \t\t\t\t\t(:unitid, :amount, :name)\n  375: \t\t\t\");\n  376  \n  377  \t\t\tfor ($i = 0; $i < sizeof($units); $i++){\n  378: \t\t\t\tif (!isset($units[$i][\"launchData\"])){continue;}\n  379  \n  380: \t\t\t\t$stmt->bindParam(\":unitid\", $units[$i][\"id\"]);\n  381: \t\t\t\tfor ($j = 0; $j < sizeof($units[$i][\"launchData\"][\"loads\"]); $j++){\n  382: \t\t\t\t\t$stmt->bindValue(\":amount\", $units[$i][\"launchData\"][\"loads\"][$j][\"launch\"]);\n  383: \t\t\t\t\t$stmt->bindValue(\":name\", $units[$i][\"launchData\"][\"loads\"][$j][\"name\"]);\n  384  \t\t\t\t\t$stmt->execute();\n  385  \n  386  \t\t\t\t\tif ($stmt->errorCode() == 0){\n  387: \t\t\t\t\t\t//Debug::log(\"success insertSubUnits\");\n  388: \t\t\t\t\t} //else Debug::log(\"error insertSubUnits\");\n  389  \t\t\t\t}\n  390  \t\t\t}\n  ...\n  393  \n  394  \t\tpublic function insertMissions($missions){\n  395: \t\t\tDebug::log(\"insertMissions s: \".sizeof($missions));\n  396: \t\t\t$stmt = $this->connection->prepare(\"\n  397  \t\t\t\tINSERT INTO missions \n  398  \t\t\t\t\t(unitid, type, turn, targetid, x, y, arrived)\n  399  \t\t\t\tVALUES\n  400  \t\t\t\t\t(:unitid, :type, :turn, :targetid, :x, :y, :arrived)\n  401: \t\t\t\");\n  402  \n  403  \t\t\tfor ($i = 0; $i < sizeof($missions); $i++){\n  404: \t\t\t\tif ($missions[$i][\"new\"] == 0){continue;}\n  405  \n  406: \t\t\t\t$stmt->bindParam(\":unitid\", $missions[$i][\"unitid\"]);\n  407: \t\t\t\t$stmt->bindParam(\":type\", $missions[$i][\"type\"]);\n  408: \t\t\t\t$stmt->bindParam(\":turn\", $missions[$i][\"turn\"]);\n  409: \t\t\t\t$stmt->bindParam(\":targetid\", $missions[$i][\"targetid\"]);\n  410: \t\t\t\t$stmt->bindParam(\":x\", $missions[$i][\"x\"]);\n  411: \t\t\t\t$stmt->bindParam(\":y\", $missions[$i][\"y\"]);\n  412: \t\t\t\t$stmt->bindParam(\":arrived\", $missions[$i][\"arrived\"]);\n  413  \t\t\t\t$stmt->execute();\n  414  \t\t\t\t\n  415  \t\t\t\tif ($stmt->errorCode() == 0){\n  416: \t\t\t\t\t//Debug::log(\"success insertMissions\");\n  417: \t\t\t\t}// else Debug::log(\"error insertMissions\");\n  418  \t\t\t}\n  419  \t\t\treturn true;\n  ...\n  421  \n  422  \t\tpublic function updateSystemLoad($data){\n  423: \t\t\tDebug::log(\"updateSystemLoad: \".sizeof($data));\n  424: \t\t\t$stmt = $this->connection->prepare(\"\n  425  \t\t\t\tUPDATE loads\n  426  \t\t\t\tSET amount = amount - :amount\n  ...\n  428  \t\t\t\tAND systemid = :systemid\n  429  \t\t\t\tAND name = :name\n  430: \t\t\t\");\n  431  \n  432  \t\t\tfor ($i = 0; $i < sizeof($data); $i++){\n  433: \t\t\t\tif (!isset($data[$i][\"launchData\"])){continue;}\n  434  \n  435: \t\t\t\t$stmt->bindParam(\":shipid\", $data[$i][\"launchData\"][\"shipid\"]);\n  436: \t\t\t\t$stmt->bindParam(\":systemid\", $data[$i][\"launchData\"][\"systemid\"]);\n  437  \n  438: \t\t\t\tfor ($j = 0; $j < sizeof($data[$i][\"launchData\"][\"loads\"]); $j++){\n  439: \t\t\t\t\t$stmt->bindValue(\":name\", $data[$i][\"launchData\"][\"loads\"][$j][\"name\"]);\n  440: \t\t\t\t\t$stmt->bindValue(\":amount\", $data[$i][\"launchData\"][\"loads\"][$j][\"launch\"]);\n  441  \t\t\t\t\t$stmt->execute();\n  442  \n  443  \t\t\t\t\tif ($stmt->errorCode() != 0){\n  444: \t\t\t\t\t\tDebug::log(\"error updateSystemLoad\");\n  445: \t\t\t\t\t\t//Debug::log(\"success updateSystemLoad\");\n  446: \t\t\t\t\t}// else Debug::log(\"error updateSystemLoad\");\n  447  \t\t\t\t}\n  448  \t\t\t}\n  ...\n  451  \n  452  \t\tpublic function insertLoads($userid, $gameid, &$units){\n  453: \t\t\t$stmt = $this->connection->prepare(\"\n  454  \t\t\t\tINSERT INTO loads \n  455  \t\t\t\t\t(shipid, systemid, name, amount)\n  456  \t\t\t\tVALUES\n  457  \t\t\t\t\t(:shipid, :systemid, :name, :amount)\n  458: \t\t\t\");\n  459  \n  460  \t\t\tfor ($i = 0; $i < sizeof($units); $i++){\n  461: \t\t\t\tif (isset($units[$i][\"upgrades\"])){\n  462: \t\t\t\t\tfor ($j = 0; $j < sizeof($units[$i][\"upgrades\"]); $j++){\n  463: \t\t\t\t\t\tfor ($k = 0; $k < sizeof($units[$i][\"upgrades\"][$j][\"loads\"]); $k++){\n  464: \t\t\t\t\t\t\t$stmt->bindParam(\":shipid\", $units[$i][\"id\"]);\n  465: \t\t\t\t\t\t\t$stmt->bindParam(\":systemid\", $units[$i][\"upgrades\"][$j][\"systemid\"]);\n  466: \t\t\t\t\t\t\t$stmt->bindParam(\":name\", $units[$i][\"upgrades\"][$j][\"loads\"][$k][\"name\"]);\n  467: \t\t\t\t\t\t\t$stmt->bindParam(\":amount\", $units[$i][\"upgrades\"][$j][\"loads\"][$k][\"amount\"]);\n  468  \n  469  \t\t\t\t\t\t\t$stmt->execute();\n  ...\n  483  \n  484  \t\tpublic function insertServerActions($units){\n  485: \t\t\t//Debug::log(\"DB insertServerActions s: \".sizeof($units));\n  486: \t\t\t$stmt = $this->connection->prepare(\"\n  487  \t\t\t\tINSERT INTO actions \n  488  \t\t\t\t\t(shipid, turn, type, dist, x, y, a, cost, delay, costmod, resolved)\n  489  \t\t\t\tVALUES\n  490  \t\t\t\t\t(:shipid, :turn, :type, :dist, :x, :y, :a, :cost, :delay, :costmod, :resolved)\n  491: \t\t\t\");\n  492  \n  493  \t\t\tfor ($i = 0; $i < sizeof($units); $i++){\n  494  \t\t\t\tfor ($j = 0; $j < sizeof($units[$i]->actions); $j++){\n  495  \t\t\t\t\tif ($units[$i]->actions[$j]->resolved == 0){\n  496: \t\t\t\t\t\t//Debug::log(\"Insert Action for unit: \".$units[$i]->id);\n  497  \t\t\t\t\t\t$units[$i]->actions[$j]->resolved = 1;\n  498  \t\t\t\t\t\t\n  499: \t\t\t\t\t\t$stmt->bindParam(\":shipid\", $units[$i]->id);\n  500: \t\t\t\t\t\t$stmt->bindParam(\":turn\", $units[$i]->actions[$j]->turn);\n  501: \t\t\t\t\t\t$stmt->bindParam(\":type\", $units[$i]->actions[$j]->type);\n  502: \t\t\t\t\t\t$stmt->bindParam(\":dist\", $units[$i]->actions[$j]->dist);\n  503: \t\t\t\t\t\t$stmt->bindParam(\":x\", $units[$i]->actions[$j]->x);\n  504: \t\t\t\t\t\t$stmt->bindParam(\":y\", $units[$i]->actions[$j]->y);\n  505: \t\t\t\t\t\t$stmt->bindParam(\":a\", $units[$i]->actions[$j]->a);\n  506: \t\t\t\t\t\t$stmt->bindParam(\":cost\", $units[$i]->actions[$j]->cost);\n  507: \t\t\t\t\t\t$stmt->bindParam(\":delay\", $units[$i]->actions[$j]->delay);\n  508: \t\t\t\t\t\t$stmt->bindParam(\":costmod\", $units[$i]->actions[$j]->costmod);\n  509: \t\t\t\t\t\t$stmt->bindParam(\":resolved\",$units[$i]->actions[$j]->resolved);\n  510  \t\t\t\t\t\t$stmt->execute();\t\t\n  511  \t\t\t\t\t\tif ($stmt->errorCode() == 0){\n  ...\n  522  \n  523  \t\tpublic function gameIsReady($gameid){\n  524: \t\t\t$stmt = $this->connection->prepare(\"\n  525  \t\t\t\tSELECT * FROM playerstatus WHERE gameid = :gameid\n  526: \t\t\t\");\n  527  \t\t\t\n  528: \t\t\t$stmt->bindParam(\":gameid\", $gameid);\n  529  \t\t\t$stmt->execute();\n  530  \t\t\t$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\n  ...\n  535  \n  536  \t\t\t\tforeach ($result as $player){\n  537: \t\t\t\t\tif ($player[\"status\"] != \"ready\"){\n  538: \t\t\t\t\t\tDebug::log(\"Game #\".$gameid.\" is not ready !\");\n  539  \t\t\t\t\t\treturn false;\n  540  \t\t\t\t\t}\n  541  \t\t\t\t}\n  542: \t\t\t\tDebug::log(\"Game #\".$gameid.\" is ready !\");\n  543  \t\t\t\treturn true;\n  544  \t\t\t}\n  545: \t\t\tDebug::log(\"Game #\".$gameid.\" is not ready !\");\n  546  \t\t\treturn false;\n  547  \t\t}\n  548  \n  549  \t\tpublic function startGame($gameid){\n  550: \t\t\tDebug::log(\"Starting game #\".$gameid);\n  551  \t\t\t\n  552  \t\t\t$players = $this->getPlayersInGame($gameid);\n  ...\n  554  \n  555  \t\t\tfor ($i = 0; $i < sizeof($players); $i++){\n  556: \t\t\t\t$this->setPlayerstatus($players[$i][\"userid\"], $gameid, 1, -1, \"waiting\");\n  557: \t\t\t\t$units = $this->query(\"SELECT * FROM units WHERE gameid = \".$gameid.\" AND userid = \".$players[$i][\"userid\"]);\n  558  \t\t\t\tfor ($j = 0; $j < sizeof($units); $j++){\n  559: \t\t\t\t\t$unit = new $units[$j][\"name\"](1, 1, 0, \"\", 0);\n  560  \n  561  \t\t\t\t\t$do = 1;\n  ...\n  568  \n  569  \t\t\t\t\t\tfor ($k = 0; $k < sizeof($deploys); $k++){\n  570: \t\t\t\t\t\t\t$d = Math::getDist($deploys[$k][\"x\"], $deploys[$k][\"y\"], $x, $y);\n  571: \t\t\t\t\t\t\t$min = $deploys[$k][\"s\"] + $s;\n  572: \t\t\t\t\t\t\tDebug::log(\"d is\".$d.\" min is \".$min);\n  573  \t\t\t\t\t\t\tif ($d < $min){\n  574  \t\t\t\t\t\t\t\t$valid = 0;\n  ...\n  579  \t\t\t\t\t\tif ($valid){\n  580  \t\t\t\t\t\t\t$do = 0;\n  581: \t\t\t\t\t\t\t$deploys[] = array(\"gameid\" => $gameid, \"userid\" => $players[$i][\"userid\"], \"turn\" => 1, \"phase\" => -1, \"x\" => $x, \"y\" => $y, \"s\" => $s);\n  582: \t\t\t\t\t\t} else Debug::log(\"redoing!\");\n  583  \t\t\t\t\t}\n  584  \t\t\t\t}\n  ...\n  587  \t\t\t$this->insertDeployArea($deploys);\n  588  \n  589: \t\t\t$stmt = $this->connection->prepare(\"\n  590  \t\t\t\tUPDATE games \n  591  \t\t\t\tSET \n  ...\n  594  \t\t\t\tWHERE\n  595  \t\t\t\t\tid = :id\t\t\t\t\n  596: \t\t\t\");\n  597  \n  598: \t\t\t$status = \"active\";\n  599  \t\t\t$turn = 1;\n  600  \n  601: \t\t\t$stmt->bindParam(\":status\", $status);\n  602: \t\t\t$stmt->bindParam(\":turn\", $turn);\n  603: \t\t\t$stmt->bindParam(\":id\", $gameid);\n  604  \n  605  \t\t\t$stmt->execute();\n  ...\n  612  \n  613  \t\tpublic function insertDeployArea($data){\n  614: \t\t\t$stmt = $this->connection->prepare(\"\n  615  \t\t\t\tINSERT INTO deploys\n  616  \t\t\t\t(gameid, userid, turn, phase, x, y, s)\n  617  \t\t\t\tVALUES\n  618  \t\t\t\t(:gameid, :userid, :turn, :phase, :x, :y, :s)\t\n  619: \t\t\t\");\n  620  \n  621  \t\t\tfor ($i = 0; $i < sizeof($data); $i++){\n  622: \t\t\t\t$stmt->bindParam(\":gameid\", $data[$i][\"gameid\"]);\n  623: \t\t\t\t$stmt->bindParam(\":userid\", $data[$i][\"userid\"]);\n  624: \t\t\t\t$stmt->bindParam(\":turn\", $data[$i][\"turn\"]);\n  625: \t\t\t\t$stmt->bindParam(\":phase\", $data[$i][\"phase\"]);\n  626: \t\t\t\t$stmt->bindParam(\":x\", $data[$i][\"x\"]);\n  627: \t\t\t\t$stmt->bindParam(\":y\", $data[$i][\"y\"]);\n  628: \t\t\t\t$stmt->bindParam(\":s\", $data[$i][\"s\"]);\n  629  \n  630  \t\t\t\t$stmt->execute();\n  631  \n  632  \t\t\t\tif ($stmt->errorCode() == 0){\n  633: \t\t\t\t\t//Debug::log(\"ding\");\n  634  \t\t\t\t\tcontinue;\n  635  \t\t\t\t}\n  ...\n  638  \n  639  \t\tpublic function getDeployArea($gameid, $turn){\n  640: \t\t\t//Debug::log(\"getDeploy: \".$gameid.\"/\".$turn);\n  641: \t\t\t$stmt = $this->connection->prepare(\"\n  642  \t\t\t\tSELECT * FROM deploys\n  643  \t\t\t\tWHERE gameid = :gameid\n  644: \t\t\t\tAND turn = :turn\"\n  645  \t\t\t);\n  646  \n  647: \t\t\t$stmt->bindParam(\":gameid\", $gameid);\n  648: \t\t\t$stmt->bindParam(\":turn\", $turn);\n  649  \n  650  \t\t\t$stmt->execute();\n  ...\n  653  \n  654  \t\tpublic function requestShipsDB($userid, $gameid, $turn, $picks){\n  655: \t\t\t//Debug::log(\"requestShipsDB, s: \".sizeof($picks));\n  656  \t\t\t$avail = $this->getAllReinforcements($gameid, $userid);\n  657  \t\t\t$delete = array();\n  658: \t\t\t//Debug::log(\"a: \".sizeof($avail));\n  659  \t\t\t$ships = array();\n  660  \t\t\t$cost = 0;\n  ...\n  662  \t\t\tfor ($i = 0; $i < sizeof($picks); $i++){\n  663  \t\t\t\tfor ($j = 0; $j < sizeof($avail); $j++){\n  664: \t\t\t\t\t//Debug::log(\"s: \".$ships[$i][\"id\"].\" vs \".$avail[$j][\"id\"]);\n  665: \t\t\t\t\tif (abs($picks[$i][\"id\"]) == $avail[$j][\"id\"]){\n  666: \t\t\t\t\t\t$picks[$i][\"actions\"][0][\"turn\"] += $avail[$j][\"eta\"];\n  667: \t\t\t\t\t\t$avail[$j][\"actions\"] = $picks[$i][\"actions\"];\n  668: \t\t\t\t\t\t$avail[$j][\"turn\"] = $turn;\n  669: \t\t\t\t\t\t$cost += $avail[$j][\"cost\"];\n  670  \t\t\t\t\t\t$ships[] = $avail[$j];\n  671  \t\t\t\t\t\t$delete[] = $avail[$j];\n  ...\n  682  \t\tpublic function deleteReinforcements($units){\n  683  \t\t\tfor ($i = 0; $i < sizeof($units); $i++){\n  684: \t\t\t\t$sql = \"DELETE FROM reinforcements WHERE id = \".$units[$i][\"id\"];\n  685  \t\t\t\t$this->delete($sql);\n  686  \t\t\t}\n  ...\n  688  \n  689  \t\tpublic function deployShipsDB($gameid, $ships){\n  690: \t\t\t//Debug::log(\"requestShipsDB, s: \".sizeof($ships));\n  691  \t\t\t//$this->setUnitStatusDB($ships);\n  692  \t\t\t$this->insertClientActions($ships);\n  ...\n  694  \n  695  \t\tpublic function deployFlightsDB($userid, $gameid, $data){\n  696: \t\t\tDebug::log(\"deployFlights \".sizeof($data));\n  697  \n  698  \t\t\tif (sizeof($data)){\n  ...\n  701  \t\t\t\tfor ($i = 0; $i < sizeof($data); $i++){\n  702  \t\t\t\t\tfor ($j = $i+1; $j < sizeof($data); $j++){\n  703: \t\t\t\t\t//Debug::log(\"comparing entry \".$i.\" to entry \".$j);\n  704: \t\t\t\t\t\tif ($data[$i][\"launchData\"][\"shipid\"] == $data[$j][\"launchData\"][\"shipid\"]){\n  705: \t\t\t\t\t\t\t//Debug::log(\"same origin\");\n  706: \t\t\t\t\t\t\tif ($data[$i][\"mission\"][\"targetid\"] == $data[$j][\"mission\"][\"targetid\"]){\n  707: \t\t\t\t\t\t\t\t//Debug::log(\"same target\");\n  708: \t\t\t\t\t\t\t\tfor ($k = 0; $k < sizeof($data[$j][\"launchData\"][\"loads\"]); $k++){\n  709: \t\t\t\t\t\t\t\t\tif ($data[$j][\"launchData\"][\"loads\"][$k][\"launch\"] >= 1){\n  710: \t\t\t\t\t\t\t\t\t\tfor ($l = 0; $l < sizeof($data[$i][\"launchData\"][\"loads\"]); $l++){\n  711: \t\t\t\t\t\t\t\t\t\t\tif ($data[$i][\"launchData\"][\"loads\"][$l][\"name\"] == $data[$j][\"launchData\"][\"loads\"][$k][\"name\"]){\n  712: \t\t\t\t\t\t\t\t\t\t\t\t//Debug::log(\"adding\");\n  713: \t\t\t\t\t\t\t\t\t\t\t\t$data[$i][\"launchData\"][\"loads\"][$l][\"launch\"] += $data[$j][\"launchData\"][\"loads\"][$k][\"launch\"];\n  714: \t\t\t\t\t\t\t\t\t\t\t\t$data[$j][\"launchData\"][\"loads\"][$k][\"launch\"] = 0;\n  715  \t\t\t\t\t\t\t\t\t\t\t}\n  716  \t\t\t\t\t\t\t\t\t\t}\n  ...\n  724  \t\t\t\tfor ($i = sizeof($data)-1; $i >= 0; $i--){\n  725  \t\t\t\t\t$splice = 1;\n  726: \t\t\t\t\tfor ($j = 0; $j < sizeof($data[$i][\"launchData\"][\"loads\"]); $j++){\n  727: \t\t\t\t\t\tif ($data[$i][\"launchData\"][\"loads\"][$j][\"launch\"] >= 1){\n  728  \t\t\t\t\t\t\t$splice = 0;\n  729  \t\t\t\t\t\t\tbreak 1; \n  ...\n  734  \t\t\t\t\t}\n  735  \t\t\t\t}\n  736: \t\t\t\t//Debug::log(\"insert :\".sizeof($data));\n  737  \t\t\t\t$this->insertUnits($userid, $gameid, $data);\n  738  \t\t\t}\n  ...\n  741  \n  742  \t\tpublic function setNewMissions($data){\n  743: \t\t\tDebug::log(\"setNewMission s: \".sizeof($data));\n  744: \t\t\t$stmt = $this->connection->prepare(\"\n  745  \t\t\t\tUPDATE missions\n  746  \t\t\t\tSET type = :type,\n  ...\n  751  \t\t\t\t\tarrived = :arrived\n  752  \t\t\t\tWHERE unitid = :unitid\n  753: \t\t\t\");\n  754  \n  755  \t\t\tfor ($i = 0; $i < sizeof($data); $i++){\n  756: \t\t\t\t$stmt->bindParam(\":type\", $data[$i][\"type\"]);\n  757: \t\t\t\t$stmt->bindParam(\":turn\", $data[$i][\"turn\"]);\n  758: \t\t\t\t$stmt->bindParam(\":targetid\", $data[$i][\"targetid\"]);\n  759: \t\t\t\t$stmt->bindParam(\":x\", $data[$i][\"x\"]);\n  760: \t\t\t\t$stmt->bindParam(\":y\", $data[$i][\"y\"]);\n  761: \t\t\t\t$stmt->bindParam(\":arrived\", $data[$i][\"arrived\"]);\n  762: \t\t\t\t$stmt->bindParam(\":unitid\", $data[$i][\"unitid\"]);\n  763  \n  764  \t\t\t\t$stmt->execute();\n  765  \t\t\t\tif ($stmt->errorCode() == 0){\n  766  \t\t\t\t\tcontinue;\n  767: \t\t\t\t} else Debug::log(\"ERROR\"); return false;\n  768  \t\t\t}\n  769  \t\t}\n  770  \n  771  \t\tpublic function updateMissionState($data){\n  772: \t\t\tDebug::log(\"updateMissionState\");\n  773: \t\t\t$stmt = $this->connection->prepare(\"\n  774  \t\t\t\tUPDATE missions\n  775  \t\t\t\tSET type = :type,\n  ...\n  780  \t\t\t\t\tarrived = :arrived\n  781  \t\t\t\tWHERE id = :id\n  782: \t\t\t\");\n  783  \n  784  \t\t\tfor ($i = 0; $i < sizeof($data); $i++){\n  785: \t\t\t\t$stmt->bindParam(\":type\", $data[$i]->type);\n  786: \t\t\t\t$stmt->bindParam(\":turn\", $data[$i]->turn);\n  787: \t\t\t\t$stmt->bindParam(\":targetid\", $data[$i]->targetid);\n  788: \t\t\t\t$stmt->bindParam(\":x\", $data[$i]->x);\n  789: \t\t\t\t$stmt->bindParam(\":y\", $data[$i]->y);\n  790: \t\t\t\t$stmt->bindParam(\":arrived\", $data[$i]->arrived);\n  791: \t\t\t\t$stmt->bindParam(\":id\", $data[$i]->id);\n  792  \n  793  \t\t\t\t$stmt->execute();\n  794  \t\t\t\tif ($stmt->errorCode() == 0){\n  795  \t\t\t\t\tcontinue;\n  796: \t\t\t\t} else Debug::log(\"ERROR\"); return false;\n  797  \t\t\t}\n  798  \t\t}\n  799  \n  800  \t\tpublic function updateUnitImpulse($data){\n  801: \t\t\t$stmt = $this->connection->prepare(\"\n  802  \t\t\t\tUPDATE units\n  803  \t\t\t\t\tthrust = :thrust\n  804  \t\t\t\tWHERE id = :id\n  805: \t\t\t\");\n  806  \n  807  \t\t\tfor ($i = 0; $i < sizeof($data); $i++){\n  808: \t\t\t\t$stmt->bindParam(\":thrust\", $data[$i]->currentImpulse);\n  809: \t\t\t\t$stmt->bindParam(\":id\", $data[$i]->id);\n  810  \t\t\t\t$stmt->execute();\n  811  \n  ...\n  818  \n  819  \t\tpublic function updateUnitEndState($states, $turn, $phase){\n  820: \t\t\t//Debug::log(\"updateUnitEndState s:\".sizeof($states).\" \".$turn.\"/\".$phase);\n  821: \t\t\t$stmt = $this->connection->prepare(\"\n  822  \t\t\t\tUPDATE units\n  823  \t\t\t\tSET x = :x,\n  ...\n  829  \t\t\t\t\tphase = :phase\n  830  \t\t\t\tWHERE id = :id\n  831: \t\t\t\");\n  832  \n  833  \t\t\tfor ($i = 0; $i < sizeof($states); $i++){\n  834: \t\t\t\t//foreach ($states[$i] as $key => $value){Debug::log($key.\" / \".$value);}\n  835  \n  836: \t\t\t\t$stmt->bindParam(\":x\", $states[$i][\"x\"]);\n  837: \t\t\t\t$stmt->bindParam(\":y\", $states[$i][\"y\"]);\n  838: \t\t\t\t$stmt->bindParam(\":angle\", $states[$i][\"angle\"]);\n  839: \t\t\t\t$stmt->bindParam(\":delay\", $states[$i][\"delay\"]);\n  840: \t\t\t\t$stmt->bindParam(\":thrust\", $states[$i][\"thrust\"]);\n  841: \t\t\t\t$stmt->bindParam(\":turn\", $turn);\n  842: \t\t\t\t$stmt->bindParam(\":phase\", $phase);\n  843: \t\t\t\t$stmt->bindParam(\":id\",  $states[$i][\"id\"]);\n  844  \t\t\t\t$stmt->execute();\n  845  \n  ...\n  852  \n  853  \t\tpublic function destroyUnitsDB($units){\n  854: \t\t\tDebug::log(\"destroyUnitsDB\");\n  855: \t\t\t$stmt = $this->connection->prepare(\"\n  856  \t\t\t\tUPDATE units \n  857  \t\t\t\tSET \n  ...\n  859  \t\t\t\tWHERE\n  860  \t\t\t\t\tid = :id\n  861: \t\t\t\");\n  862  \t\t\t\n  863  \t\t\tfor ($i = 0; $i < sizeof($units); $i++){\n  864  \t\t\t\tif ($units[$i]->destroyed){\n  865: \t\t\t\t\t$stmt->bindParam(\":id\", $units[$i]->id);\n  866: \t\t\t\t\t$stmt->bindParam(\":destroyed\",  $units[$i]->destroyed);\n  867  \t\t\t\t\t$stmt->execute();\n  868  \n  ...\n  877  \n  878  \t\tpublic function insertDogfights($gameid, $turn, $dogfights){\n  879: \t\t\tDebug::log(\"insertDogfights\");\n  880: \t\t\t$stmt = $this->connection->prepare(\"\n  881  \t\t\t\tINSERT INTO dogfights \n  882  \t\t\t\t\t(gameid, turn, a, b)\n  883  \t\t\t\tVALUES\n  884  \t\t\t\t\t(:gameid, :turn, :a, :b)\n  885: \t\t\t\");\n  886  \n  887  \t\t\tfor ($i = 0; $i < sizeof($dogfights); $i++){\n  888: \t\t\t\t$stmt->bindParam(\":gameid\", $gameid);\n  889: \t\t\t\t$stmt->bindParam(\":turn\", $turn);\n  890: \t\t\t\t$stmt->bindParam(\":a\", $dogfights[$i][0]);\n  891: \t\t\t\t$stmt->bindParam(\":b\", $dogfights[$i][1]);\n  892  \t\t\t\t$stmt->execute();\n  893  \n  ...\n  900  \n  901  \t\tpublic function getDogfights($units){\n  902: \t\t\t$stmt = $this->connection->prepare(\"\n  903  \t\t\t\tSELECT * FROM dogfights\n  904  \t\t\t\tWHERE a = :a\n  905  \t\t\t\tOR b = :b\n  906: \t\t\t\");\n  907  \n  908  \t\t\tfor ($i = 0; $i < sizeof($units); $i++){\n  909  \t\t\t\tif ($units[$i]->flight){\n  910: \t\t\t\t\t$stmt->bindParam(\":a\", $units[$i]->id);\n  911: \t\t\t\t\t$stmt->bindParam(\":b\", $units[$i]->id);\n  912  \t\t\t\t\t$stmt->execute();\n  913  \t\t\t\t\t$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\n  914  \t\t\t\t\tif ($result){\n  915  \t\t\t\t\t\tfor ($j = 0; $j < sizeof($result); $j++){\n  916: \t\t\t\t\t\t\tif ($result[$j][\"a\"] == $units[$i]->id){\n  917: \t\t\t\t\t\t\t\t$units[$i]->dogfights[] = $result[$j][\"b\"];\n  918  \t\t\t\t\t\t\t}\n  919  \t\t\t\t\t\t\telse {\n  920: \t\t\t\t\t\t\t\t$units[$i]->dogfights[] = $result[$j][\"a\"];\n  921  \t\t\t\t\t\t\t}\n  922  \t\t\t\t\t\t}\n  ...\n  929  \n  930  \t\tpublic function deleteDogfightKill($data, $gameid){\n  931: \t\t\tDebug::log(\"deleteDogfightKill: \".sizeof($data));\n  932: \t\t\t$stmt = $this->connection->prepare(\"\n  933  \t\t\t\tDELETE FROM dogfights\n  934  \t\t\t\tWHERE \n  ...\n  938  \t\t\t\tOR \n  939  \t\t\t\t\tb = :b\n  940: \t\t\t\");\n  941  \n  942  \t\t\tfor ($i = 0; $i < sizeof($data); $i++){\n  943: \t\t\t\t$stmt->bindParam(\":gameid\", $gameid);\n  944: \t\t\t\t$stmt->bindParam(\":a\", $data[$i]);\n  945: \t\t\t\t$stmt->bindParam(\":b\", $data[$i]);\n  946  \t\t\t\t$stmt->execute();\n  947  \t\t\t}\n  ...\n  949  \n  950  \t\tpublic function deleteDogfightRange($data, $gameid){\n  951: \t\t\tDebug::log(\"deleteDogfightRange: \".sizeof($data));\n  952: \t\t\t$stmt = $this->connection->prepare(\"\n  953  \t\t\t\tDELETE FROM dogfights\n  954  \t\t\t\tWHERE \n  ...\n  958  \t\t\t\tAND \n  959  \t\t\t\t\tb = :b\n  960: \t\t\t\");\n  961  \n  962  \t\t\tfor ($i = 0; $i < sizeof($data); $i++){\n  963: \t\t\t\t$stmt->bindParam(\":gameid\", $gameid);\n  964: \t\t\t\t$stmt->bindParam(\":a\", $data[$i][\"a\"]);\n  965: \t\t\t\t$stmt->bindParam(\":b\", $data[$i][\"b\"]);\n  966  \t\t\t\t$stmt->execute();\n  967  \t\t\t}\n  ...\n  969  \n  970  \t\tpublic function insertClientActions($units){\n  971: \t\t\tDebug::log(\"insertClientActions s: \".sizeof($units));\n  972: \t\t\t$stmt = $this->connection->prepare(\"\n  973  \t\t\t\tINSERT INTO actions \n  974  \t\t\t\t\t(shipid, turn, type, dist, x, y, a, cost, delay, costmod, resolved)\n  975  \t\t\t\tVALUES\n  976  \t\t\t\t\t(:shipid, :turn, :type, :dist, :x, :y, :a, :cost, :delay, :costmod, :resolved)\n  977: \t\t\t\");\n  978  \n  979  \t\t\t$resolved = 0;\n  ...\n  981  \t\t\tfor ($i = 0; $i < sizeof($units); $i++){\n  982  \t\t\t\t//Debug::log($i);\n  983: \t\t\t\t$stmt->bindParam(\":shipid\", $units[$i][\"id\"]);\n  984  \n  985: \t\t\t\tfor ($j = 0; $j < sizeof($units[$i][\"actions\"]); $j++){\n  986  \t\t\t\t\t//Debug::log($j);\n  987: \t\t\t\t\tif ($units[$i][\"actions\"][$j][\"resolved\"]){\n  988  \t\t\t\t\t\tcontinue;\n  989  \t\t\t\t\t};\n  990: \t\t\t\t\t//Debug::log(\"DING 1\");\n  991: \t\t\t\t\t$stmt->bindParam(\":turn\", $units[$i][\"actions\"][$j][\"turn\"]);\n  992: \t\t\t\t\t$stmt->bindParam(\":type\", $units[$i][\"actions\"][$j][\"type\"]);\n  993: \t\t\t\t\t$stmt->bindParam(\":dist\", $units[$i][\"actions\"][$j][\"dist\"]);\n  994: \t\t\t\t\t$stmt->bindParam(\":x\", $units[$i][\"actions\"][$j][\"x\"]);\n  995: \t\t\t\t\t$stmt->bindParam(\":y\", $units[$i][\"actions\"][$j][\"y\"]);\n  996: \t\t\t\t\t$stmt->bindParam(\":a\", $units[$i][\"actions\"][$j][\"a\"]);\n  997: \t\t\t\t\t$stmt->bindParam(\":cost\", $units[$i][\"actions\"][$j][\"cost\"]);\n  998: \t\t\t\t\t$stmt->bindParam(\":delay\", $units[$i][\"actions\"][$j][\"delay\"]);\n  999: \t\t\t\t\t$stmt->bindParam(\":costmod\", $units[$i][\"actions\"][$j][\"costmod\"]);\n 1000: \t\t\t\t\t$stmt->bindParam(\":resolved\", $resolved);\n 1001  \t\t\t\t\t$stmt->execute();\n 1002  \n 1003  \t\t\t\t\tif ($stmt->errorCode() == 0){\n 1004: \t\t\t\t\t\t//Debug::log(\"DING 2\");\n 1005  \t\t\t\t\t\tcontinue;\n 1006  \t\t\t\t\t} \n ....\n 1015  \n 1016  \t\tpublic function insertPowers($gameid, $turn, $powers){\n 1017: \t\t\t$stmt = $this->connection->prepare(\"\n 1018  \t\t\t\tINSERT INTO powers \n 1019  \t\t\t\t\t( unitid, systemid, turn, type, cost )\n 1020  \t\t\t\tVALUES\n 1021  \t\t\t\t\t( :unitid, :systemid, :turn, :type, :cost )\n 1022: \t\t\t\");\n 1023  \n 1024  \t\t\tfor ($i = 0; $i < sizeof($powers); $i++){\n 1025: \t\t\t\t$stmt->bindParam(\":unitid\", $powers[$i][\"unitid\"]);\n 1026: \t\t\t\t$stmt->bindParam(\":systemid\", $powers[$i][\"systemid\"]);\n 1027: \t\t\t\t$stmt->bindParam(\":turn\", $powers[$i][\"turn\"]);\n 1028: \t\t\t\t$stmt->bindParam(\":type\", $powers[$i][\"type\"]);\n 1029: \t\t\t\t$stmt->bindParam(\":cost\", $powers[$i][\"cost\"]);\n 1030  \n 1031  \t\t\t\t$stmt->execute();\n ....\n 1040  \n 1041  \t\tpublic function insertClientFireOrders($gameid, $turn, $fires){\n 1042: \t\t\t//Debug::log(\"insertClientFireOrders: \".sizeof($fires));\n 1043: \t\t\t$stmt = $this->connection->prepare(\"\n 1044  \t\t\t\tINSERT INTO fireorders \n 1045  \t\t\t\t\t(gameid, turn, shooterid, targetid, weaponid, resolved)\n 1046  \t\t\t\tVALUES\n 1047  \t\t\t\t\t(:gameid, :turn, :shooterid, :targetid, :weaponid, :resolved)\n 1048: \t\t\t\");\n 1049  \n 1050  \t\t\t$x = 0;\n ....\n 1052  \n 1053  \t\t\tfor ($i = 0; $i < sizeof($fires); $i++){\n 1054: \t\t\t\t$stmt->bindParam(\":gameid\", $gameid);\n 1055: \t\t\t\t$stmt->bindParam(\":turn\", $turn);\n 1056: \t\t\t\t$stmt->bindParam(\":shooterid\", $fires[$i][\"shooterid\"]);\n 1057: \t\t\t\t$stmt->bindParam(\":targetid\", $fires[$i][\"targetid\"]);\n 1058: \t\t\t\t$stmt->bindParam(\":weaponid\", $fires[$i][\"weaponid\"]);\n 1059: \t\t\t\t$stmt->bindParam(\":resolved\", $fires[$i][\"resolved\"]);\n 1060  \n 1061  \t\t\t\t$stmt->execute();\n ....\n 1068  \t\t}\n 1069  \n 1070: \t\t//return new FireOrder(-1, $gameid, $turn, $this->id, $this->mission->id, $this->structures[0]->systems[0]->id, $this->getShots(), $0, \"\", 0, 0);\n 1071  \n 1072  \t\tpublic function insertServerFireOrder($fires){\n 1073: \t\t\tDebug::log(\"insertServerFireOrder: \".sizeof($fires));\n 1074: \t\t\t$stmt = $this->connection->prepare(\"\n 1075  \t\t\t\tINSERT INTO fireorders \n 1076  \t\t\t\t\t(gameid, turn, shooterid, targetid, weaponid, shots)\n 1077  \t\t\t\tVALUES\n 1078  \t\t\t\t\t(:gameid, :turn, :shooterid, :targetid, :weaponid, :shots)\n 1079: \t\t\t\");\n 1080  \n 1081  \t\t\t$x = 0;\n ....\n 1083  \n 1084  \t\t\tfor ($i = 0; $i < sizeof($fires); $i++){\n 1085: \t\t\t\t$stmt->bindParam(\":gameid\", $fires[$i]->gameid);\n 1086: \t\t\t\t$stmt->bindParam(\":turn\", $fires[$i]->turn);\n 1087: \t\t\t\t$stmt->bindParam(\":shooterid\", $fires[$i]->shooterid);\n 1088: \t\t\t\t$stmt->bindParam(\":targetid\", $fires[$i]->targetid);\n 1089: \t\t\t\t$stmt->bindParam(\":weaponid\",$fires[$i]->weaponid);\n 1090: \t\t\t\t$stmt->bindParam(\":shots\",$fires[$i]->shots);\n 1091  \n 1092  \t\t\t\t$stmt->execute();\n ....\n 1103  \n 1104  \t\tpublic function insertEW($data){\n 1105: \t\t\t//Debug::log(\"insertSensorSettings\".sizeof($data));\n 1106: \t\t\t$stmt = $this->connection->prepare(\"\n 1107  \t\t\t\tINSERT INTO sensors \n 1108  \t\t\t\t\t(unitid, systemid, turn, angle, dist, type)\n 1109  \t\t\t\tVALUES\n 1110  \t\t\t\t\t(:unitid, :systemid, :turn, :angle, :dist, :type)\n 1111: \t\t\t\");\n 1112  \n 1113  \t\t\tfor ($i = 0; $i < sizeof($data); $i++){\n 1114: \t\t\t\t//Debug::log(\"loop\".$i);\n 1115: \t\t\t\t$stmt->bindParam(\":unitid\", $data[$i][\"unitid\"]);\n 1116: \t\t\t\t$stmt->bindParam(\":systemid\", $data[$i][\"systemid\"]);\n 1117: \t\t\t\t$stmt->bindParam(\":turn\", $data[$i][\"turn\"]);\n 1118: \t\t\t\t$stmt->bindParam(\":angle\", $data[$i][\"angle\"]);\n 1119: \t\t\t\t$stmt->bindParam(\":dist\", $data[$i][\"dist\"]);\n 1120: \t\t\t\t$stmt->bindParam(\":type\", $data[$i][\"type\"]);\n 1121  \t\t\t\tif  (!$stmt->execute()){\n 1122  \t\t\t\t\techo ($stmt->errorInfo());\n ....\n 1127  \n 1128  \t\tpublic function deleteUnresolvedFireOrders($gameid){\n 1129: \t\t\t$stmt = $this->connection->prepare(\"\n 1130  \t\t\t\tDELETE FROM fireorders\n 1131  \t\t\t\tWHERE gameid = :gameid\n 1132  \t\t\t\tAND resolved = :resolved\n 1133: \t\t\t\");\n 1134  \n 1135  \t\t\t$resolved = -1;\n 1136  \n 1137: \t\t\t$stmt->bindParam(\":gameid\", $gameid);\n 1138: \t\t\t$stmt->bindParam(\":resolved\", $resolved);\n 1139  \t\t\t$stmt->execute();\n 1140  \n ....\n 1145  \n 1146  \t\tpublic function updateFireOrders($fires){\n 1147: \t\t\tDebug::log(\"DB updateFireOrders: \".sizeof($fires));\n 1148  \t\t\tif (!sizeof($fires)){return;}\n 1149: \t\t\t$stmt = $this->connection->prepare(\"\n 1150  \t\t\t\tUPDATE fireorders\n 1151  \t\t\t\tSET\n ....\n 1157  \t\t\t\tWHERE\n 1158  \t\t\t\t\tid = :id\n 1159: \t\t\t\");\n 1160  \n 1161  \t\t\tfor ($i = 0; $i < sizeof($fires); $i++){\n 1162: \t\t\t\t//Debug::log(\"fire id: \".$fires[$i]->id.\", resolved: \".$fires[$i]->resolved);\n 1163: \t\t\t\t$stmt->bindParam(\":shots\", $fires[$i]->shots);\n 1164: \t\t\t\t$stmt->bindParam(\":req\", $fires[$i]->req);\n 1165: \t\t\t\t$stmt->bindParam(\":notes\", $fires[$i]->notes);\n 1166: \t\t\t\t$stmt->bindParam(\":hits\", $fires[$i]->hits);\n 1167: \t\t\t\t$stmt->bindParam(\":resolved\",$fires[$i]->resolved);\n 1168: \t\t\t\t$stmt->bindParam(\":id\", $fires[$i]->id);\n 1169  \t\t\t\t$stmt->execute();\n 1170  \n ....\n 1179  \n 1180  \t\tpublic function updateBallisticFireOrder($fires){\n 1181: \t\t\tDebug::log(\"DB updateBallisticFireOrder, s: \".sizeof($fires));\n 1182: \t\t\t$stmt = $this->connection->prepare(\"\n 1183  \t\t\t\tUPDATE fireorders\n 1184  \t\t\t\tSET\n ....\n 1187  \t\t\t\tWHERE\n 1188  \t\t\t\t\tid = :id\n 1189: \t\t\t\");\n 1190  \n 1191  \t\t\t$resolved = 1;\n 1192  \n 1193  \t\t\tfor ($i = 0; $i < sizeof($fires); $i++){\n 1194: \t\t\t\t$stmt->bindParam(\":id\", $fires[$i]->id);\n 1195: \t\t\t\t$stmt->bindParam(\":shots\", $fires[$i]->shots);\n 1196: \t\t\t\t$stmt->bindParam(\":resolved\", $resolved);\n 1197  \t\t\t\t$stmt->execute();\n 1198  \n ....\n 1207  \n 1208  \t\tpublic function getDamages($units){\n 1209: \t\t\t$stmt = $this->connection->prepare(\"\n 1210  \t\t\t\tSELECT * FROM damages\n 1211  \t\t\t\tWHERE shipid = :shipid\n 1212: \t\t\t\");\n 1213  \n 1214  \t\t\tfor ($i = 0; $i < sizeof($units); $i++){\n 1215: \t\t\t\t$stmt->bindParam(\":shipid\", $units[$i]->id);\n 1216  \t\t\t\t$stmt->execute();\n 1217  \t\t\t\t$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\n ....\n 1219  \t\t\t\t\tfor ($j = 0; $j < (sizeof($result)); $j++){\n 1220  \t\t\t\t\t\t$dmg = new Damage(\n 1221: \t\t\t\t\t\t\t$result[$j][\"id\"],\n 1222: \t\t\t\t\t\t\t$result[$j][\"fireid\"],\n 1223: \t\t\t\t\t\t\t$result[$j][\"gameid\"],\n 1224: \t\t\t\t\t\t\t$result[$j][\"shipid\"],\n 1225: \t\t\t\t\t\t\t$result[$j][\"structureid\"],\n 1226: \t\t\t\t\t\t\t$result[$j][\"systemid\"],\n 1227: \t\t\t\t\t\t\t$result[$j][\"turn\"],\n 1228: \t\t\t\t\t\t\t$result[$j][\"roll\"],\n 1229: \t\t\t\t\t\t\t$result[$j][\"type\"],\n 1230: \t\t\t\t\t\t\t$result[$j][\"totalDmg\"],\n 1231: \t\t\t\t\t\t\t$result[$j][\"shieldDmg\"],\n 1232: \t\t\t\t\t\t\t$result[$j][\"structDmg\"],\n 1233: \t\t\t\t\t\t\t$result[$j][\"armourDmg\"],\n 1234: \t\t\t\t\t\t\t$result[$j][\"overkill\"],\n 1235: \t\t\t\t\t\t\t$result[$j][\"negation\"],\n 1236: \t\t\t\t\t\t\t$result[$j][\"destroyed\"],\n 1237: \t\t\t\t\t\t\t$result[$j][\"notes\"],\n 1238: \t\t\t\t\t\t\t$result[$j][\"new\"]\n 1239  \t\t\t\t\t\t);\n 1240  \n ....\n 1248  \n 1249  \t\tpublic function getPowers($units){\n 1250: \t\t\t$stmt = $this->connection->prepare(\"\n 1251  \t\t\t\tSELECT * FROM powers\n 1252  \t\t\t\tWHERE unitid = :unitid\n 1253: \t\t\t\");\n 1254  \n 1255  \t\t\tfor ($i = 0; $i < sizeof($units); $i++){\n 1256: \t\t\t\t$stmt->bindParam(\":unitid\", $units[$i]->id);\n 1257  \t\t\t\t$stmt->execute();\n 1258  \t\t\t\t$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\n ....\n 1260  \t\t\t\t\tfor ($j = 0; $j < (sizeof($result)); $j++){\n 1261  \t\t\t\t\t\t$power = new Power(\n 1262: \t\t\t\t\t\t\t$result[$j][\"id\"],\n 1263: \t\t\t\t\t\t\t$result[$j][\"unitid\"],\n 1264: \t\t\t\t\t\t\t$result[$j][\"systemid\"],\n 1265: \t\t\t\t\t\t\t$result[$j][\"turn\"],\n 1266: \t\t\t\t\t\t\t$result[$j][\"type\"],\n 1267: \t\t\t\t\t\t\t$result[$j][\"cost\"]\n 1268  \t\t\t\t\t\t);\n 1269  \n ....\n 1277  \n 1278  \t\tpublic function getCrits($units){\n 1279: \t\t\t$stmt = $this->connection->prepare(\"\n 1280  \t\t\t\tSELECT * FROM systemcrits\n 1281  \t\t\t\tWHERE shipid = :shipid\n 1282: \t\t\t\");\n 1283  \n 1284  \t\t\tfor ($i = 0; $i < sizeof($units); $i++){\n 1285: \t\t\t\t$stmt->bindParam(\":shipid\", $units[$i]->id);\n 1286  \t\t\t\t$stmt->execute();\n 1287  \t\t\t\t$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\n ....\n 1290  \t\t\t\t\t\t//var_export($result[$j]);\n 1291  \t\t\t\t\t\t$crit = new Crit(\n 1292: \t\t\t\t\t\t\t$result[$j][\"id\"],\n 1293: \t\t\t\t\t\t\t$result[$j][\"shipid\"],\n 1294: \t\t\t\t\t\t\t$result[$j][\"systemid\"],\n 1295: \t\t\t\t\t\t\t$result[$j][\"turn\"],\n 1296: \t\t\t\t\t\t\t$result[$j][\"type\"],\n 1297: \t\t\t\t\t\t\t$result[$j][\"duration\"],\n 1298: \t\t\t\t\t\t\t$result[$j][\"value\"],\n 1299  \t\t\t\t\t\t\t0\n 1300  \t\t\t\t\t\t);\n ....\n 1309  \n 1310  \t\tpublic function getFires($units){\n 1311: \t\t\t$stmt = $this->connection->prepare(\"\n 1312  \t\t\t\tSELECT * FROM fireorders\n 1313  \t\t\t\tWHERE shooterid = :shooterid\n 1314: \t\t\t\");\n 1315  \n 1316  \t\t\tfor ($i = 0; $i < sizeof($units); $i++){\n 1317: \t\t\t\t$stmt->bindParam(\":shooterid\", $units[$i]->id);\n 1318  \t\t\t\t$stmt->execute();\n 1319  \t\t\t\t$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\n ....\n 1321  \t\t\t\t\tfor ($j = 0; $j < (sizeof($result)); $j++){\n 1322  \t\t\t\t\t\t$crit = new FireOrder(\n 1323: \t\t\t\t\t\t\t$result[$j][\"id\"],\n 1324: \t\t\t\t\t\t\t$result[$j][\"gameid\"],\n 1325: \t\t\t\t\t\t\t$result[$j][\"turn\"],\n 1326: \t\t\t\t\t\t\t$result[$j][\"shooterid\"],\n 1327: \t\t\t\t\t\t\t$result[$j][\"targetid\"],\n 1328: \t\t\t\t\t\t\t$result[$j][\"weaponid\"],\n 1329: \t\t\t\t\t\t\t$result[$j][\"shots\"],\n 1330: \t\t\t\t\t\t\t$result[$j][\"req\"],\n 1331: \t\t\t\t\t\t\t$result[$j][\"notes\"],\n 1332: \t\t\t\t\t\t\t$result[$j][\"hits\"],\n 1333: \t\t\t\t\t\t\t$result[$j][\"resolved\"]\n 1334  \t\t\t\t\t\t);\n 1335  \n ....\n 1343  \n 1344  \t\tpublic function getActions($units, $turn){\n 1345: \t\t\t$stmt = $this->connection->prepare(\"\n 1346  \t\t\t\tSELECT * FROM actions\n 1347  \t\t\t\tWHERE shipid = :shipid\n 1348  \t\t\t\tAND turn = :turn\n 1349: \t\t\t\");\n 1350  \n 1351  \t\t\tfor ($i = 0; $i < sizeof($units); $i++){\n 1352: \t\t\t\t$stmt->bindParam(\":shipid\", $units[$i]->id);\n 1353: \t\t\t\t$stmt->bindParam(\":turn\", $turn);\n 1354  \t\t\t\t$stmt->execute();\n 1355  \t\t\t\t$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\n ....\n 1358  \t\t\t\t\tfor ($j = 0; $j < sizeof($result); $j++){\n 1359  \t\t\t\t\t\t$units[$i]->actions[] = new Action(\n 1360: \t\t\t\t\t\t\t$result[$j][\"id\"],\n 1361: \t\t\t\t\t\t\t$result[$j][\"turn\"],\n 1362: \t\t\t\t\t\t\t$result[$j][\"type\"],\n 1363: \t\t\t\t\t\t\t$result[$j][\"dist\"],\n 1364: \t\t\t\t\t\t\t$result[$j][\"x\"],\n 1365: \t\t\t\t\t\t\t$result[$j][\"y\"],\n 1366: \t\t\t\t\t\t\t$result[$j][\"a\"],\n 1367: \t\t\t\t\t\t\t$result[$j][\"cost\"],\n 1368: \t\t\t\t\t\t\t$result[$j][\"delay\"],\n 1369: \t\t\t\t\t\t\t$result[$j][\"costmod\"],\n 1370: \t\t\t\t\t\t\t$result[$j][\"resolved\"]\n 1371  \t\t\t\t\t\t);\n 1372  \t\t\t\t\t}\n ....\n 1377  \n 1378  \t\tpublic function getEW($units, $turn){\n 1379: \t\t\t$stmt = $this->connection->prepare(\"\n 1380  \t\t\t\tSELECT * FROM sensors\n 1381  \t\t\t\tWHERE unitid = :unitid\n 1382  \t\t\t\tAND turn = :turn\n 1383: \t\t\t\");\n 1384  \n 1385  \t\t\tfor ($i = 0; $i < sizeof($units); $i++){\n 1386  \t\t\t\tif (!$units[$i]->ship){continue;}\n 1387: \t\t\t\t$stmt->bindParam(\":unitid\", $units[$i]->id);\n 1388: \t\t\t\t$stmt->bindParam(\":turn\", $turn);\n 1389  \t\t\t\t$stmt->execute();\n 1390  \t\t\t\t$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\n ....\n 1392  \t\t\t\tif ($result){\n 1393  \t\t\t\t\tfor ($j = 0; $j < sizeof($result); $j++){\n 1394: \t\t\t\t\t\t$units[$i]->getSystemById($result[$j][\"systemid\"])->ew[] = new EW(\n 1395: \t\t\t\t\t\t\t$result[$j][\"id\"],\n 1396: \t\t\t\t\t\t\t$result[$j][\"unitid\"],\n 1397: \t\t\t\t\t\t\t$result[$j][\"systemid\"],\n 1398: \t\t\t\t\t\t\t$result[$j][\"turn\"],\n 1399: \t\t\t\t\t\t\t$result[$j][\"angle\"],\n 1400: \t\t\t\t\t\t\t$result[$j][\"dist\"],\n 1401: \t\t\t\t\t\t\t$result[$j][\"type\"]\n 1402  \t\t\t\t\t\t);\n 1403  \t\t\t\t\t}\n 1404: \t\t\t\t\t//Debug::log($units[$i]->classname.\" facing: \".$units[$i]->facing);\n 1405  \t\t\t\t}\n 1406  \t\t\t}\n ....\n 1409  \n 1410  \t\tpublic function insertDamageEntries($damages){\n 1411: \t\t\tDebug::log(\" => DB insertDamageEntries: \".sizeof($damages));\n 1412  \n 1413: \t\t\t$stmt = $this->connection->prepare(\"\n 1414  \t\t\t\tINSERT INTO damages \n 1415  \t\t\t\t\t( fireid, shipid, gameid, structureid, systemid, turn, roll, type, totalDmg, shieldDmg, structDmg, armourDmg, overkill, negation, destroyed, notes, new)\n 1416  \t\t\t\tVALUES\n 1417  \t\t\t\t\t( :fireid, :shipid, :gameid, :structureid, :systemid, :turn, :roll, :type, :totalDmg, :shieldDmg, :structDmg, :armourDmg, :overkill, :negation, :destroyed, :notes, :new)\n 1418: \t\t\t\");\n 1419  \n 1420  \t\t\t$new = 0;\n ....\n 1422  \t\t\t//echo json_encode($damages[0]);\n 1423  \t\t\tfor ($i = 0; $i < sizeof($damages); $i++){\n 1424: \t\t\t\t$stmt->bindParam(\":fireid\", $damages[$i]->fireid);\n 1425: \t\t\t\t$stmt->bindParam(\":shipid\", $damages[$i]->shipid);\n 1426: \t\t\t\t$stmt->bindParam(\":gameid\", $damages[$i]->gameid);\n 1427: \t\t\t\t$stmt->bindParam(\":structureid\", $damages[$i]->structureid);\n 1428: \t\t\t\t$stmt->bindParam(\":systemid\", $damages[$i]->systemid);\n 1429: \t\t\t\t$stmt->bindParam(\":turn\", $damages[$i]->turn);\n 1430: \t\t\t\t$stmt->bindParam(\":roll\", $damages[$i]->roll);\n 1431: \t\t\t\t$stmt->bindParam(\":type\", $damages[$i]->type);\n 1432: \t\t\t\t$stmt->bindParam(\":totalDmg\", $damages[$i]->totalDmg);\n 1433: \t\t\t\t$stmt->bindParam(\":shieldDmg\", $damages[$i]->shieldDmg);\n 1434: \t\t\t\t$stmt->bindParam(\":structDmg\", $damages[$i]->structDmg);\n 1435: \t\t\t\t$stmt->bindParam(\":armourDmg\", $damages[$i]->armourDmg);\n 1436: \t\t\t\t$stmt->bindParam(\":overkill\", $damages[$i]->overkill);\n 1437: \t\t\t\t$stmt->bindParam(\":negation\", $damages[$i]->negation);\n 1438: \t\t\t\t$stmt->bindParam(\":destroyed\", $damages[$i]->destroyed);\n 1439: \t\t\t\t$stmt->bindParam(\":notes\", $damages[$i]->notes);\n 1440: \t\t\t\t$stmt->bindParam(\":new\", $new);\n 1441  \n 1442  \t\t\t\t$stmt->execute();\n ....\n 1454  \n 1455  \t\tpublic function insertCritEntries($crits, $gameid){\n 1456: \t\t\tDebug::log(\" => DB insertCritEntries: \".sizeof($crits));\n 1457  \t\t\t\n 1458: \t\t\t$stmt = $this->connection->prepare(\"\n 1459  \t\t\t\tINSERT INTO systemcrits \n 1460  \t\t\t\t\t( shipid, systemid, turn, type, duration, value)\n 1461  \t\t\t\tVALUES\n 1462  \t\t\t\t\t( :shipid, :systemid, :turn, :type, :duration, :value)\n 1463: \t\t\t\");\n 1464  \n 1465  \t\t\tfor ($i = 0; $i < sizeof($crits); $i++){\n 1466  \t\t\t\tif ($crits[$i]->new){\n 1467: \t\t\t\t\t$stmt->bindParam(\":shipid\", $crits[$i]->shipid);\n 1468: \t\t\t\t\t$stmt->bindParam(\":systemid\", $crits[$i]->systemid);\n 1469: \t\t\t\t\t$stmt->bindParam(\":turn\", $crits[$i]->turn);\n 1470: \t\t\t\t\t$stmt->bindParam(\":type\", $crits[$i]->type);\n 1471: \t\t\t\t\t$stmt->bindParam(\":duration\", $crits[$i]->duration);\n 1472: \t\t\t\t\t$stmt->bindParam(\":value\", $crits[$i]->value);\n 1473  \t\t\t\t\t$stmt->execute();\n 1474  \n ....\n 1485  \n 1486  \t\tpublic function getPlayerStatus($gameid){\n 1487: \t\t\t$stmt = $this->connection->prepare(\"\n 1488  \t\t\t\tSELECT * FROM playerstatus\n 1489  \t\t\t\tWHERE\n 1490  \t\t\t\t\tgameid = :gameid\n 1491: \t\t\t\");\n 1492  \n 1493: \t\t\t$stmt->bindParam(\":gameid\", $gameid);\n 1494  \t\t\t$stmt->execute();\n 1495  \n ....\n 1503  \n 1504  \t\tpublic function setPlayerstatus($userid, $gameid, $turn, $phase, $status){\n 1505: \t\t\t//Debug::log(\"setPlayerstatus for player \".$userid. \" adjusted to turn/phase: \".$turn.\"/\".$phase);\n 1506  \n 1507: \t\t\t$stmt = $this->connection->prepare(\"\n 1508  \t\t\t\tUPDATE playerstatus \n 1509  \t\t\t\tSET \n ....\n 1515  \t\t\t\tAND\n 1516  \t\t\t\t\tuserid = :userid\n 1517: \t\t\t\");\n 1518  \n 1519: \t\t\t$stmt->bindParam(\":userid\", $userid);\n 1520: \t\t\t$stmt->bindParam(\":gameid\", $gameid);\n 1521: \t\t\t$stmt->bindParam(\":turn\", $turn);\n 1522: \t\t\t$stmt->bindParam(\":phase\", $phase);\n 1523: \t\t\t$stmt->bindParam(\":status\", $status);\n 1524  \n 1525  \t\t\t$stmt->execute();\n 1526  \n 1527  \t\t\tif ($stmt->errorCode() == 0){\n 1528: \t\t\t\t//Debug::log(\"game \".$gameid.\",user \".$userid.\" adjusting to turn/phase/status \".$turn.\" \".$phase.\" \".$status);\n 1529  \t\t\t\treturn true;\n 1530  \t\t\t} else return false;\n ....\n 1532  \n 1533  \t\tpublic function setReinforceFaction($userid, $gameid, $faction){\n 1534: \t\t\t$stmt = $this->connection->prepare(\"\n 1535  \t\t\t\tUPDATE playerstatus \n 1536  \t\t\t\tSET faction = :faction\n ....\n 1539  \t\t\t\tAND\n 1540  \t\t\t\t\tuserid = :userid\n 1541: \t\t\t\");\n 1542  \n 1543: \t\t\t$stmt->bindParam(\":faction\", $faction);\n 1544: \t\t\t$stmt->bindParam(\":gameid\", $gameid);\n 1545: \t\t\t$stmt->bindParam(\":userid\", $userid);\n 1546  \n 1547  \t\t\t$stmt->execute();\n ....\n 1553  \n 1554  \t\tpublic function addReinforceValue($userid, $gameid, $add){\n 1555: \t\t\t//Debug::log(\"addReinforceValue: \".$add);\n 1556: \t\t\t$stmt = $this->connection->prepare(\"\n 1557  \t\t\t\tUPDATE playerstatus \n 1558  \t\t\t\tSET\tvalue = value + :add\n ....\n 1561  \t\t\t\tAND\n 1562  \t\t\t\t\tuserid = :userid\n 1563: \t\t\t\");\n 1564  \n 1565: \t\t\t$stmt->bindParam(\":add\", $add);\n 1566: \t\t\t$stmt->bindParam(\":gameid\", $gameid);\n 1567: \t\t\t$stmt->bindParam(\":userid\", $userid);\n 1568  \n 1569  \t\t\t$stmt->execute();\n ....\n 1576  \t\tpublic function getAmountOfPlayersInGame($gameid){\n 1577  \t\t\t//\tSELECT COUNT(*) FROM users\n 1578: \t\t\t$stmt = $this->connection->prepare(\"\n 1579  \t\t\t\tSELECT * FROM users\n 1580  \t\t\t\tJOIN playerstatus \n 1581  \t\t\t\tON playerstatus.gameid = :gameid\n 1582  \t\t\t\tAND users.id = playerstatus.userid\n 1583: \t\t\t\t\");\n 1584  \n 1585  \n 1586: \t\t\t$stmt->bindParam(\":gameid\", $gameid);\n 1587  \n 1588  \t\t\t$stmt->execute();\n ....\n 1597  \t\t\n 1598  \t\tpublic function getUsername($id){\t\n 1599: \t\t\t$sql = \"(SELECT username FROM users WHERE ID = \".$id.\")\";\n 1600  \t\t\t$result = $this->query($sql);\t\t\n 1601: \t\t\treturn $result[0][\"username\"];\n 1602  \t\t}\n 1603  \t\t\n ....\n 1605  \t\tpublic function getCurrentTurn($gameid){\n 1606  \n 1607: \t\t\t$sql = \"(SELECT turn FROM games WHERE id = \".$gameid.\")\";\n 1608  \t\t\t$result = $this->query($sql);\n 1609: \t\t\treturn $result[0][\"turn\"];\n 1610  \t\t}\n 1611  \t\t\n 1612  \t\tpublic function getMyStatusForGame($gameid, $userid, $turn){\n 1613  \t\t\n 1614: \t\t\t$stmt = $this->connection->prepare(\"\n 1615  \t\t\t\tSELECT status FROM playerstatus\n 1616  \t\t\t\tWHERE gameid = :gameid\n 1617  \t\t\t\tAND userid = :userid\n 1618  \t\t\t\tAND turn = :turn\n 1619: \t\t\t\");\n 1620  \t\t\t\n 1621: \t\t\t$stmt->bindParam(\":gameid\", $gameid);\n 1622: \t\t\t$stmt->bindParam(\":userid\", $userid);\n 1623: \t\t\t$stmt->bindParam(\":turn\", $turn);\n 1624  \t\t\t$stmt->execute();\n 1625  \t\t\t\t\t\n ....\n 1636  \t\tpublic function getGameDetails($gameid){\n 1637  \n 1638: \t\t\t$stmt = $this->connection->prepare(\"\n 1639  \t\t\t\tSELECT * FROM games WHERE id = :id\n 1640: \t\t\t\");\n 1641  \n 1642: \t\t\t$stmt->bindParam(\":id\", $gameid);\n 1643  \t\t\t$stmt->execute();\t\t\t\t\n 1644  \t\t\t$result = $stmt->fetch(PDO::FETCH_ASSOC);\n ....\n 1647  \n 1648  \t\tpublic function getIncomingShips($gameid, $turn){\n 1649: \t\t/*\t$stmt = $this->connection->prepare(\"\n 1650  \t\t\t\tSELECT * FROM units\n 1651  \t\t\t\tWHERE gameid = :gameid\n ....\n 1654  \t\t\t\tAND status = 'bought'\n 1655  \t\t\t\tORDER BY userid ASC\n 1656: \t\t\t\");\n 1657  \t\t*/\n 1658: \t\t\t$stmt = $this->connection->prepare(\"\n 1659  \t\t\t\tSELECT units.id, units.userid, units.available, units.name, actions.x, actions.y, actions.a FROM units\n 1660  \t\t\t\tINNER JOIN actions ON\n ....\n 1664  \t\t\t\tAND status = 'bought'\n 1665  \t\t\t\tORDER BY userid ASC\n 1666: \t\t\t\");\n 1667  \t\t\t\n 1668: \t\t\t$stmt->bindParam(\":gameid\", $gameid);\n 1669: \t\t\t$stmt->bindParam(\":turn\", $turn);\n 1670  \t\t\t$stmt->execute();\n 1671  \t\t\t\t\t\n ....\n 1683  \n 1684  \t\tpublic function getActiveUnits($gameid, $turn){\n 1685: \t\t\t$stmt = $this->connection->prepare(\"\n 1686  \t\t\t\tSELECT * FROM units\n 1687  \t\t\t\tWHERE gameid = :gameid\n ....\n 1689  \t\t\t\tAND available <= :turn\n 1690  \t\t\t\tORDER BY userid ASC\n 1691: \t\t\t\");\n 1692  \t\t\t\n 1693: \t\t\t$stmt->bindParam(\":gameid\", $gameid);\n 1694: \t\t\t$stmt->bindParam(\":turn\", $turn);\n 1695  \t\t\t$stmt->execute();\n 1696  \t\t\t\t\t\n ....\n 1699  \t\t\tif ($units){\n 1700  \t\t\t\tfor ($i = 0; $i < sizeof($units); $i++){\n 1701: \t\t\t\t\tif ($units[$i][\"name\"] == \"Flight\" || $units[$i][\"ball\"]){\n 1702: \t\t\t\t\t\t$units[$i][\"subunits\"] = $this->getSubUnits($units[$i]);\n 1703: \t\t\t\t\t\t$units[$i][\"mission\"] = $this->getMission($units[$i]);\n 1704  \t\t\t\t\t}\n 1705  \t\t\t\t}\n 1706  \t\t\t}\n 1707: \t\t\t//Debug::log(\"getting: \".sizeof($units).\" units\");\n 1708  \t\t\treturn $units;\n 1709  \t\t}\n 1710  \n 1711  \t\tpublic function getSubUnits($unit){\n 1712: \t\t\t$stmt = $this->connection->prepare(\"\n 1713  \t\t\t\tSELECT * FROM subunits\n 1714  \t\t\t\tWHERE subunits.unitid = :id\n 1715: \t\t\t\");\n 1716  \t\t\t\n 1717: \t\t\t$stmt->bindParam(\":id\", $unit[\"id\"]);\n 1718  \t\t\t$stmt->execute();\n 1719  \t\t\t\t\t\n ....\n 1724  \n 1725  \t\tpublic function getMission($unit){\n 1726: \t\t\t$stmt = $this->connection->prepare(\"\n 1727  \t\t\t\tSELECT * FROM missions\n 1728  \t\t\t\tWHERE missions.unitid = :id\n 1729  \t\t\t\tORDER BY TURN ASC\n 1730: \t\t\t\");\n 1731  \t\t\t\n 1732: \t\t\t$stmt->bindParam(\":id\", $unit[\"id\"]);\n 1733  \t\t\t$stmt->execute();\n 1734  \t\t\t\t\t\n ....\n 1737  \t\t}\n 1738  \t\tpublic function getShipLoad($ships){\n 1739: \t\t\t$stmt = $this->connection->prepare(\"\n 1740  \t\t\t\tSELECT systemid, name, amount \n 1741  \t\t\t\tFROM loads \n 1742  \t\t\t\tWHERE shipid = :shipid\n 1743: \t\t\t\");\n 1744  \n 1745  \t\t\tfor ($i = 0; $i < sizeof($ships); $i++){\n 1746: \t\t\t\t$stmt->bindParam(\":shipid\", $ships[$i]->id);\n 1747  \t\t\t\t$stmt->execute();\n 1748  \t\t\t\t$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\n ....\n 1756  \n 1757  \t\tpublic function deleteEmptyLoads(){\n 1758: \t\t\t$stmt = $this->connection->prepare(\"\n 1759  \t\t\t\tDELETE FROM loads\n 1760  \t\t\t\tWHERE amount = 0;\n 1761: \t\t\t\");\n 1762  \n 1763  \t\t\t$stmt->execute();\n ....\n 1768  \n 1769  \t\tpublic function getAllFireOrders($gameid){\n 1770: \t\t\t//Debug::log(\"getAllFireOrders for game: \".$gameid);\n 1771: \t\t\t$stmt = $this->connection->prepare(\"\n 1772  \t\t\t\tSELECT * FROM fireorders\n 1773  \t\t\t\tWHERE gameid = :gameid\n 1774: \t\t\t\");\n 1775  \n 1776: \t\t\t$stmt->bindParam(\":gameid\", $gameid);\n 1777  \t\t\t$stmt->execute();\n 1778  \t\t\t$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\n ....\n 1787  \n 1788  \t\tpublic function getUnresolvedFireOrders($gameid, $turn){\n 1789: \t\t\t$stmt = $this->connection->prepare(\"\n 1790  \t\t\t\tSELECT * FROM fireorders\n 1791  \t\t\t\tWHERE gameid = :gameid\n 1792  \t\t\t\tAND resolved = :resolved\n 1793: \t\t\t\");\n 1794  \t\t\t$resolved = 0;\n 1795: \t\t\t$stmt->bindParam(\":gameid\", $gameid);\n 1796: \t\t\t$stmt->bindParam(\":resolved\", $resolved);\n 1797  \t\t\t$stmt->execute();\n 1798  \t\t\t$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\n ....\n 1807  \n 1808  \t\tpublic function resolveDeployActions($units){\n 1809: \t\t\tDebug::log(\"resolveDeployActions s: \".sizeof($units));\n 1810  \n 1811: \t\t\t$stmt = $this->connection->prepare(\"\n 1812  \t\t\t\tUPDATE actions\n 1813  \t\t\t\tSET resolved = :resolved\n 1814  \t\t\t\tWHERE shipid = :shipid\n 1815: \t\t\t\");\n 1816  \n 1817  \t\t\t$resolved = 1;\n 1818  \n 1819  \t\t\tfor ($i = 0; $i < sizeof($units); $i++){\n 1820: \t\t\t\t$stmt->bindParam(\":shipid\", $units[$i]);\n 1821: \t\t\t\t$stmt->bindParam(\":resolved\", $resolved);\n 1822  \t\t\t\t$stmt->execute();\n 1823: \t\t\t//\tDebug::log(\"aaa\");\n 1824  \n 1825  \t\t\t\tif ($stmt->errorCode() == 0){\n ....\n 1830  \n 1831  \t\tpublic function resolveUnitMovementDB($ships){\n 1832: \t\t\tDebug::log(\"resolveUnitMovementDB\");\n 1833  \n 1834: \t\t\t$stmt = $this->connection->prepare(\"\n 1835  \t\t\t\tUPDATE actions\n 1836  \t\t\t\tSET resolved = 1\n ....\n 1839  \t\t\t\tAND\n 1840  \t\t\t\t\tresolved = 0\n 1841: \t\t\t\");\n 1842  \n 1843  \t\t\tfor ($i = 0; $i < sizeof($ships); $i++){\n 1844: \t\t\t\t$stmt->bindParam(\":shipid\", $ships[$i]->id);\n 1845  \t\t\t\t$stmt->execute();\n 1846  \n ....\n 1855  \t\t\t\n 1856  \t\tpublic function getPlayersInGame($gameid){\n 1857: \t\t\t$stmt = $this->connection->prepare(\"\n 1858  \t\t\t\tSELECT * FROM users\n 1859  \t\t\t\tJOIN playerstatus \n 1860  \t\t\t\tON playerstatus.gameid = :gameid\n 1861  \t\t\t\tAND users.id = playerstatus.userid\n 1862: \t\t\t\");\n 1863  \n 1864: \t\t\t$stmt->bindParam(\":gameid\", $gameid);\n 1865  \t\t\t$stmt->execute();\t\t\t\t\n 1866  \t\t\t$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\n ....\n 1872  \n 1873  \t\tpublic function getMyGames($userid){\n 1874: \t\t/*\t$stmt = $this->connection->prepare(\"\n 1875  \t\t\t\tSELECT * FROM games\n 1876  \t\t\t\tJOIN playerstatus \n 1877  \t\t\t\t\tON playerstatus.userid = :id\n 1878  \t\t\t\tAND games.id = playerstatus.userid\n 1879: \t\t\t\");\n 1880  \t\t*/\n 1881  \n 1882: \t\t\t$stmt = $this->connection->prepare(\"\n 1883  \t\t\t\tSELECT playerstatus.status as playerstatus, games.id, games.name, games.turn, games.phase, games.status FROM playerstatus\n 1884  \t\t\t\tRIGHT JOIN games\n ....\n 1886  \t\t\t\tWHERE playerstatus.userid = :userid\n 1887  \t\t\t\tAND games.status = :status\n 1888: \t\t\t\");\n 1889: \t\t\t$status = \"active\";\n 1890: \t\t\t$stmt->bindParam(\":status\", $status);\n 1891: \t\t\t$stmt->bindParam(\":userid\", $userid);\n 1892  \t\t\t$stmt->execute();\n 1893  \t\t\t\n ....\n 1901  \t\t\t$null = 0;\n 1902  \t\t\t\n 1903: \t\t\t$stmt = $this->connection->prepare(\"\n 1904  \t\t\t\tSELECT * FROM games\n 1905  \t\t\t\tWHERE games.status = :status\n 1906: \t\t\t\");\n 1907  \t\t\t\n 1908: \t\t\t$open = \"open\";\n 1909: \t\t\t$stmt->bindParam (\":status\", $open);\n 1910  \t\t\t$stmt->execute();\n 1911  \t\t\t\n ....\n 1926  \t\t\t$null = 0;\n 1927  \t\t\t\n 1928: \t\t\t$stmt = $this->connection->prepare(\"\n 1929  \t\t\t\tSELECT id, name\n 1930  \t\t\t\tFROM games\n ....\n 1933  \t\t\t\tOR playerB = :value1\n 1934  \t\t\t\tAND playerA = 0\n 1935: \t\t\t\");\n 1936  \t\t\t\n 1937: \t\t\t$stmt->bindParam(\":value1\", $id);\n 1938  \t\t\t$stmt->execute();\n 1939  \t\t\t\n ....\n 1941  \t\t\t\n 1942  \t\t\tif (sizeof($result) >= 1){\n 1943: \t\t\t//\tDebug::log(\"Games found: \".sizeof($result));\n 1944  \t\t\t\treturn $result;\n 1945  \t\t\t}\n 1946  \t\t\telse {\n 1947: \t\t\t//\tDebug::log(\"no gams found\");\n 1948  \t\t\t\treturn false;\n 1949  \t\t\t}\n ....\n 1954  \t\tpublic function getAllUnfinishedGames(){\n 1955  \n 1956: \t\t\t$stmt = $this->connection->prepare(\"\n 1957  \t\t\t\tSELECT * FROM games\n 1958  \t\t\t\tWHERE status <> (:finished)\n 1959: \t\t\t\");\n 1960: \t\t\t$finished = \"finished\";\n 1961: \t\t\t$stmt->bindParam(\":finished\", $finished);\n 1962  \n 1963  \t\t\t$stmt->execute();\n ....\n 1968  \t\t\tfor ($i = 0; $i < sizeof($result); $i++){\n 1969  \t\t\t\t\n 1970: \t\t\t\t$result[$i][\"playerdata\"] = array();\n 1971  \n 1972: \t\t\t\t$stmt = $this->connection->prepare(\"\n 1973  \t\t\t\t\tSELECT playerstatus.playerid, playerstatus.status, player.username FROM usersstatus\n 1974  \t\t\t\t\tINNER JOIN player\n 1975  \t\t\t\t\t\tON playerstatus.playerid = player.id\n 1976  \t\t\t\t\tWHERE playerstatus.gameid = :gameid\n 1977: \t\t\t\t\");\n 1978  \n 1979: \t\t\t\t$stmt->bindParam(\":gameid\", $result[$i][\"id\"]);\n 1980  \n 1981  \t\t\t\t$stmt->execute();\n ....\n 1984  \n 1985  \t\t\t\tif ($playerdata){\n 1986: \t\t\t\t\t$result[$i][\"playerdata\"] = $playerdata;\n 1987  \t\t\t\t}\n 1988  \n ....\n 1998  \n 1999  \t\tpublic function updateAllPlayerStatusForGame($gameid, $turn, $status){\n 2000: \t\t\tDebug::log(\"updateAllPlayerStatusForGame\");\n 2001  \n 2002: \t\t\t$stmt = $this->connection->prepare(\"\n 2003  \t\t\t\tUPDATE playerstatus\n 2004  \t\t\t\tSET \n ....\n 2006  \t\t\t\t\tstatus = :status\n 2007  \t\t\t\tWHERE gameid = :gameid\n 2008: \t\t\t\");\n 2009  \n 2010  \t\t\t$newTurn = $turn +1;\n 2011  \n 2012: \t\t\t$stmt->bindParam(\":turn\", $newTurn);\n 2013: \t\t\t$stmt->bindParam(\":status\", $status);\n 2014: \t\t\t$stmt->bindParam(\":gameid\", $gameid);\n 2015  \n 2016  \t\t\t$stmt->execute();\n 2017  \n 2018  \t\t\tif ($stmt->errorCode() == 0){\n 2019: \t\t\t//\tDebug::log(\"done\");\n 2020  \t\t\t\treturn true;\n 2021  \t\t\t}\n ....\n 2024  \n 2025  \t\tpublic function setGameTurnPhase($gameid, $turn, $phase){\n 2026: \t\t\t//Debug::log(\"setGameTurnPhase: \".$turn.\"/\".$phase);\n 2027: \t\t\t$stmt = $this->connection->prepare(\"\n 2028  \t\t\t\tUPDATE games\n 2029  \t\t\t\tSET\n ....\n 2031  \t\t\t\t\tturn = :turn\n 2032  \t\t\t\tWHERE id = :id\n 2033: \t\t\t\");\n 2034  \n 2035: \t\t\t$stmt->bindParam(\":turn\", $turn);\n 2036: \t\t\t$stmt->bindParam(\":phase\", $phase);\n 2037: \t\t\t$stmt->bindParam(\":id\", $gameid);\n 2038  \n 2039  \t\t\t$stmt->execute();\n\nC:\\xampp\\htdocs\\fire\\server\\debug.php:\n    4  \t\n    5  \tstatic function log($string){\n    6: \t\t//file_put_contents('/tmp/fire.log', $string.\"\\n\", FILE_APPEND);\n    7: \t\tfile_put_contents('log.txt', $string.\"\\n\", FILE_APPEND);\n    8  \t}\n    9  }\n\nC:\\xampp\\htdocs\\fire\\server\\fighter.php:\n   24  \tpublic function jsonSerialize(){\n   25  \t\treturn array(\n   26:         \t\"id\" => $this->id,\n   27:         \t\"name\" => $this->name,\n   28:         \t\"faction\" => $this->faction,\n   29:         \t\"value\" => $this->value,\n   30:         \t\"mass\" => $this->mass,\n   31:         \t\"integrity\" => $this->integrity,\n   32:         \t\"ep\" => $this->ep,\n   33:         \t\"turns\" => $this->turns,\n   34:         \t\"negation\" => $this->negation,\n   35:         \t\"systems\" => $this->systems,\n   36:         \t\"damages\" => $this->damages,\n   37:         \t\"crits\" => $this->crits,\n   38:         \t\"destroyed\" => $this->destroyed\n   39          );\n   40      }\n   ..\n   46  \n   47  class Aurora extends Fighter {\n   48: \tpublic $name = \"Aurora\";\n   49: \tpublic $display = \"Aurora\";\n   50: \tpublic $faction = \"Earth Alliance\";\n   51  \tpublic $value = 29;\n   52  \tpublic $mass = 38;\n   ..\n   65  \n   66  class Thunderbolt extends Fighter {\n   67: \tpublic $name = \"Thunderbolt\";\n   68: \tpublic $display = \"Thunderbolt\";\n   69: \tpublic $faction = \"Earth Alliance\";\n   70  \tpublic $value = 32;\n   71  \tpublic $mass = 42;\n   ..\n   85  \n   86  class Nial extends Fighter {\n   87: \tpublic $name = \"Nial\";\n   88: \tpublic $display = \"Nial\";\n   89: \tpublic $faction = \"Minbari Federation\";\n   90  \tpublic $value = 44;\n   91  \tpublic $mass = 36;\n   ..\n  104  \n  105  class Sentri extends Fighter {\n  106: \tpublic $name = \"Sentri\";\n  107: \tpublic $display = \"Sentri\";\n  108: \tpublic $faction = \"Centauri Republic\";\n  109  \tpublic $value = 28;\n  110  \tpublic $mass = 32;\n  ...\n  123  \n  124  class Sitara extends Fighter {\n  125: \tpublic $name = \"Sitara\";\n  126: \tpublic $display = \"Sitara\";\n  127: \tpublic $faction = \"Centauri Republic\";\n  128  \tpublic $value = 24;\n  129  \tpublic $mass = 32;\n  ...\n  142  \n  143  class Gorith extends Fighter {\n  144: \tpublic $name = \"Gorith\";\n  145: \tpublic $display = \"Gorith\";\n  146: \tpublic $faction = \"Narn Regime\";\n  147  \tpublic $value = 22;\n  148  \tpublic $mass = 30;\n  ...\n  161  \n  162  class Frazi extends Fighter {\n  163: \tpublic $name = \"Frazi\";\n  164: \tpublic $display = \"Frazi\";\n  165: \tpublic $faction = \"Narn Regime\";\n  166  \tpublic $value = 32;\n  167  \tpublic $mass = 35;\n\nC:\\xampp\\htdocs\\fire\\server\\flight.php:\n    3  class Flight extends Mixed {\n    4  \tpublic $flight = true;\n    5: \tpublic $unitType = \"Flight\";\n    6: \tpublic $name = \"Flight\";\n    7: \tpublic $display = \"Flight\";\n    8  \tpublic $faction = false;\n    9  \tpublic $baseSize = 25;\n   ..\n   54  \n   55  \tpublic function addMissionDB($data, $userid, $turn, $phase){\n   56: \t\t//Debug::log(\"flight #\".$this->id.\", data :\".sizeof($data));\n   57  \t\tif ($this->userid == $userid){\n   58  \t\t\t$this->mission = new Mission($data[sizeof($data)-1]);\n   ..\n   60  \t\telse if ($phase == -1){\n   61  \t\t\tfor ($i = sizeof($data)-1; $i >= 0; $i--){\n   62: \t\t\t\tif ($data[$i][\"turn\"] < $turn){\n   63  \t\t\t\t\t$this->mission = new Mission($data[$i]);\n   64  \t\t\t\t\treturn;\n\nC:\\xampp\\htdocs\\fire\\server\\manager.php:\n   15  \n   16  \tpublic $index = 0;\n   17: \tpublic $faction = \"\";\n   18  \tpublic $value = 0;\n   19  \n   ..\n   36  \n   37  \tpublic $const = array(\n   38: \t\t\"ew\" => array(\n   39: \t\t\t\"p\" => 1.5,\n   40: \t\t\t\"len\" => 10, \n   41: \t\t\t\"effect\" => array(0 => 0.5, 1 => 0.5, 2 => 0.25)\n   42  \t\t),\n   43  \t);\n   44  \n   45  \tfunction __construct($userid = 0, $gameid = 0){\n   46: \t\t//Debug::log(\"constructing manager \".$userid.\"/\".$gameid);\n   47  \t\t//$this->getMemory();\n   48  \t\t$this->userid = $userid;\n   ..\n   61  \t\t\tDebug::log($ship->id);\n   62  \t\t}\n   63: \t\tDebug::log(\"====\");\n   64  \t\tforeach ($this->incoming as $incoming){\n   65: \t\t\tDebug::log($incoming[\"id\"]);\n   66  \t\t}*/\n   67  \t\treturn;\n   ..\n   86  \t\twhile ($shots > 0){\n   87  \t\t\t$sys = $fire->target->getHitSystem($fire);\n   88: \t\t\t//Debug::log(get_class($sys).\", armourmod: \".$sys->getArmourMod().\" => \".$ship->getArmourValue($fire, $sys));\n   89  \t\t\t$shots--;\n   90  \t\t}\n   ..\n   92  \t\t$ship->primary->remaining -= $add;\n   93  \n   94: \t\tDebug::log(\"determing to hit for \".get_class($ship).\" #\".$ship->id);\n   95  \n   96  \t\t$total = $ship->primary->getHitChance();\n   ..\n  100  \t\t\tif ($ship->structures[$struct]->systems[$i]->isDestroyed()){continue;}\n  101  \t\t\t$avail += $ship->structures[$struct]->systems[$i]->getHitChance();\n  102: \t\t\tDebug::log(\"adding \".get_class($ship->structures[$struct]->systems[$i]).\", chance: \".$ship->structures[$struct]->systems[$i]->getHitChance());\n  103  \t\t}\n  104  \n  105: \t\tDebug::log(\"-> primary to struct: \".$total.\" / \".$avail.\" => \".(round($total/$avail, 2)*100).\"%\");\n  106  \n  107  \t\t$avail = $total;\n  108  \n  109  \t\t$fraction = round($ship->primary->remaining / $ship->primary->integrity, 3);\n  110: \t\tDebug::log(\"main structure at \".$fraction.\"%\");\n  111  \t\tfor ($i = 0; $i < sizeof($ship->primary->systems); $i++){\n  112  \t\t\tif (!$ship->isExposed($fraction, $ship->primary->systems[$i])){continue;}\n  113  \t\t\t$odd = $ship->primary->systems[$i]->getHitChance();\n  114  \t\t\t$avail += $odd;\n  115: \t\t\tDebug::log(\"adding \".get_class($ship->primary->systems[$i]).\", chance: \".$ship->primary->systems[$i]->getHitChance());\n  116  \t\t}\n  117  \n  118  \n  119: \t\tDebug::log(\"-> main to internal: \".$total.\" / \".$avail.\" => \".(round($total/$avail, 2)*100).\"%\");\n  120: \t\tDebug::log(\"-> chance to divert to single internal on main hit: \".$ship->primary->systems[$i-1]->getHitChance().\" / \".$avail.\" => \".(round($ship->primary->systems[$i-1]->getHitChance()/$avail, 2)*100).\"%\");\n  121  \t\t\n  122  \t\treturn;\n  ...\n  128  \t\t$turn = 3;\n  129  \n  130: \t\t$query[] = \"update playerstatus set phase = 2, status = 'ready' where gameid = \".$id;\n  131: \t\t\t$query[] = \"update games set phase = 2 where id = \".$id;\n  132: \t\t\t$query[] = \"update fireorders set resolved = 0, hits = 0 where gameid = \".$id;\n  133: \t\t\t$query[] = \"delete from damages where turn = \".$turn;\n  134: \t\t\t$query[] = \"delete from systemcrits where turn = \".$turn;\n  135  \n  136  \n  137: \t\t$query[] = \"update playerstatus set phase = 2, status = 'ready' where gameid = \".$id;\n  138: \t\t\t$query[] = \"update games set phase = 2 where id = \".$id;\n  139: \t\t\t$query[] = \"update fireorders set resolved = 0, hits = 0 where gameid = \".$id;\n  140: \t\t\t$query[] = \"delete from damages where turn = \".$turn;\n  141: \t\t\t$query[] = \"delete from systemcrits where turn = \".$turn;\n  142  \t\tforeach ($query as $sql){\n  143  \t\t\t$db->query($sql);\n  ...\n  160  \n  161  \t\treturn array(\n  162: \t\t\t\"id\" => $this->gameid,\n  163: \t\t\t\"name\" => $this->name,\n  164: \t\t\t\"status\" => $this->status,\n  165: \t\t\t\"turn\" => $this->turn,\n  166: \t\t\t\"phase\" => $this->phase,\n  167: \t\t\t\"ships\" => $this->getShipData(),\n  168: \t\t\t\"reinforcements\" => $this->rdyReinforcements,\n  169: \t\t\t\"deploys\" => $this->deploys,\n  170: \t\t\t\"incoming\" =>$this->incoming,\n  171: \t\t\t\"const\" => $this->const\n  172  \t\t);\n  173  \n  ...\n  199  \n  200  \tpublic function getGeneralData(){\n  201: \t\t//Debug::log(\"getGeneralData for game \".$this->gameid);\n  202  \t\t$gd = DBManager::app()->getGameDetails($this->gameid);\n  203  \n  204: \t\t$this->name = $gd[\"name\"];\n  205: \t\t$this->pv = $gd[\"pv\"];\n  206: \t\t$this->reinforce = $gd[\"reinforce\"];\n  207: \t\t$this->status = $gd[\"status\"];\n  208: \t\t$this->turn = $gd[\"turn\"];\n  209: \t\t$this->phase = $gd[\"phase\"];\n  210  \t\t$this->playerstatus = DBManager::app()->getPlayerStatus($this->gameid);\n  211  \t}\n  ...\n  215  \n  216  \t\tfor ($i = 0; $i < sizeof($ships); $i++){\n  217: \t\t\t$used = $used + $ships[$i][\"value\"];\n  218  \t\t}\n  219  \n  ...\n  227  \n  228  \tpublic function getGameData(){\n  229: \t\t//Debug::log(\"getGameData\");\n  230  \t\t$db = DBManager::app();\n  231  \n  ...\n  235  \t\t$this->ships = $this->assembleUnits();\n  236  \t\t$this->setCC();\n  237: \t\t//Debug::log(\"ships: \".sizeof($this->ships));\n  238  \t\t//$this->ballistics = $this->assembleBallistics();\n  239  \n  ...\n  251  \tpublic function setUserIndex(){\n  252  \t\tfor ($i = 0; $i < sizeof($this->playerstatus); $i++){\n  253: \t\t\tif ($this->playerstatus[$i][\"userid\"] == $this->userid){\n  254  \t\t\t\t$this->userindex = $i % 2;\n  255  \t\t\t}\n  ...\n  263  \tpublic function setReinforceStatus(){\n  264  \t\tfor ($i = 0; $i < sizeof($this->playerstatus); $i++){\n  265: \t\t\tif ($this->playerstatus[$i][\"userid\"] == $this->userid){\n  266: \t\t\t\t$this->faction = $this->playerstatus[$i][\"faction\"];\n  267: \t\t\t\t$this->value = $this->playerstatus[$i][\"value\"];\n  268  \t\t\t\tbreak;\n  269  \t\t\t}\n  ...\n  318  \n  319  \tpublic function readyReinforcements(){\n  320: \t\t//Debug::log(\"readyReinforcements s\".sizeof($this->reinforcements));\n  321  \t\t$data = array();\n  322  \n  323  \t\tfor ($i = 0; $i < sizeof($this->reinforcements); $i++){\n  324: \t\t\tif ($this->reinforcements[$i][\"userid\"] == $this->userid){\n  325: \t\t\t\t$s = new $this->reinforcements[$i][\"name\"](-$this->reinforcements[$i][\"id\"], $this->userid, $this->turn + $this->reinforcements[$i][\"eta\"], \"available\", 0);\n  326: \t\t\t\t$s->cost = $this->reinforcements[$i][\"cost\"];\n  327  \t\t\t\t$s->currentImpulse = $s->baseImpulse;\n  328  \n  ...\n  337  \n  338  \tpublic function assembleUnits(){\n  339: \t\t//Debug::log(\"assembleUnits\");\n  340  \t\t$db =  DBManager::app()->getActiveUnits($this->gameid, $this->turn); \n  341  \t\t$units = array();\n  342  \n  343  \t\tfor ($i = 0; $i < sizeof($db); $i++){\n  344: \t\t\t$unit = new $db[$i][\"name\"](\n  345: \t\t\t\t$db[$i][\"id\"],\n  346: \t\t\t\t$db[$i][\"userid\"],\n  347: \t\t\t\t$db[$i][\"available\"],\n  348: \t\t\t\t$db[$i][\"status\"],\n  349: \t\t\t\t$db[$i][\"destroyed\"]\n  350  \t\t\t);\n  351  \n  352: \t\t\t$unit->facing = $db[$i][\"angle\"];\n  353: \t\t\t$unit->remainingDelay = $db[$i][\"delay\"];\n  354: \t\t\t$unit->currentImpulse = $db[$i][\"thrust\"];\n  355: \t\t\t$unit->x = $db[$i][\"x\"];\n  356: \t\t\t$unit->y = $db[$i][\"y\"];\n  357  \n  358  \t\t\tif (!$unit->ship){\n  359: \t\t\t\t$unit->addSubUnits($db[$i][\"subunits\"]);\n  360: \t\t\t\t$unit->addMissionDB($db[$i][\"mission\"], $this->userid, $this->turn, $this->phase);\n  361  \t\t\t}\n  362  \t\t\t$units[] = $unit;\n  ...\n  402  \n  403  \tpublic function canAdvance($gameid){\n  404: \t\t//Debug::log(\"canAdvance?\");\n  405  \t\t$this->playerstatus = DBManager::app()->getPlayerStatus($gameid);\n  406: \t\tif ($this->status == \"open\"){\n  407  \t\t\treturn false;\n  408  \t\t}\n  409  \t\telse if (sizeof($this->playerstatus) >= 2){\n  410  \t\t\tfor ($i = 0; $i < sizeof($this->playerstatus); $i++){\n  411: \t\t\t\tif ($this->playerstatus[$i][\"status\"] == \"waiting\"){\n  412  \t\t\t\t\treturn false;\n  413  \t\t\t\t}\n  ...\n  418  \n  419  \tpublic function prepareAdvance($gameid){\n  420: \t\t//Debug::log(\"prepareAdvance + get data\");\n  421  \t\t$this->gameid = $gameid;\n  422  \t\t$this->getGeneralData();\n  ...\n  425  \n  426  \tpublic function doAdvance(){\n  427: \t\tDebug::log(\"doAdvance for game\".$this->gameid.\" from phase \".$this->phase.\" to phase \".($this->phase+1));\n  428  \t\t//return;\n  429  \t\t$time = -microtime(true);\n  ...\n  456  \t\t\t\t//$this->phase = 2;\n  457  \t\t\t\t//DBManager::app()->setGameTurnPhase($this->gameid, $this->turn, $this->phase);\n  458: \t\t\t\t//$this->updatePlayerStatus(\"waiting\");\n  459  \t\t\t\tbreak;\n  460  \t\t\tdefault:\n  ...\n  463  \n  464  \t\t$time += microtime(true); \n  465: \t\tDebug::log(\"advancing game state time: \".round($time, 3).\" seconds.\");\n  466  \t\treturn true;\n  467  \t}\n  ...\n  469  \tpublic function updatePlayerStatus($status){\n  470  \t\tfor ($i = 0; $i < sizeof($this->playerstatus); $i++){\n  471: \t\t\tDBManager::app()->setPlayerstatus($this->playerstatus[$i][\"userid\"], $this->gameid, $this->turn, $this->phase, $status);\n  472  \t\t}\n  473  \t}\n  ...\n  479  \t\t\t$avail = 0;\n  480  \t\t\tfor ($j = 0; $j < sizeof($this->reinforcements); $j++){\n  481: \t\t\t\tif ($this->reinforcements[$j][\"userid\"] == $this->playerstatus[$i][\"userid\"]){\n  482  \t\t\t\t\t$avail++;\n  483  \t\t\t\t}\n  ...\n  493  \t\t\t$max = 1;\n  494  \t\t\tif (!$max){continue;}\n  495: \t\t\t$validShips = $this->getReinforcementShips($this->playerstatus[$i][\"faction\"]);\n  496  \t\t\t//$validShips = array_merge($validShips, $this->getFlights());\n  497  \t\t\t//$validShips = $this->getFlights();\n  ...\n  501  \t\t\t\t$roll = mt_rand(1, 10);\n  502  \n  503: \t\t\t\tif ($roll >= $pick[\"weight\"]){\n  504  \t\t\t\t\t$now++;\n  505: \t\t\t\t\t$pick[\"eta\"] += mt_rand(3, 4);\n  506: \t\t\t\t\t$pick[\"eta\"] = max(2, $pick[\"eta\"]);\n  507: \t\t\t\t\t$pick[\"value\"] = ceil($pick[\"value\"] * (mt_rand(8, 12))/10);\n  508  \t\t\t\t\t$picks[] = $pick;\n  509  \n  ...\n  514  \t\t\t}\n  515  \t\t\tif (sizeof($picks)){\n  516: \t\t\t\tDBManager::app()->insertReinforcements($this->gameid, $this->playerstatus[$i][\"userid\"], $picks);\n  517  \t\t\t}\n  518  \t\t}\n  ...\n  520  \t\n  521  \tpublic function handleDeploymentPhase(){\n  522: \t\t//Debug::log(\"handleDeploymentPhase\");\n  523  \t\t$this->initBallistics();\n  524  \t\t$this->handleDeploymentActions();\n  ...\n  529  \n  530  \tpublic function initBallistics(){\n  531: \t\tDebug::log(\"initBallistics\");\n  532  \t\t$fires = DBManager::app()->getUnresolvedFireOrders($this->gameid, $this->turn); // fireorders from deployment -> hangar, launcher\n  533  \t\tusort($fires, function($a, $b){\n  ...\n  538  \t\t$units = array();\n  539  \t\tfor ($i = 0; $i < sizeof($fires); $i++){\n  540: \t\t\t//Debug::log(\"handling fire #\".$i);\n  541  \t\t\t$skip = 0;\n  542  \t\t\t$shooter = $this->getUnit($fires[$i]->shooterid);\n  ...\n  544  \t\t\t$fires[$i]->shots = $launcher->getShots($this->turn);\n  545  \t\t\tif (!($launcher instanceof Launcher)){\n  546: \t\t\t\t//Debug::log(\"Hangar fireorder, resolving: \".$fires[$i]->id);\n  547  \t\t\t\tif ($launcher instanceof Hangar){\n  548  \t\t\t\t\t$fires[$i]->resolved = 1;\n  549  \t\t\t\t\tcontinue;\n  550  \t\t\t\t}\n  551: \t\t\t\tDebug::log(\"FATAL ERROR, unresolved non-launcher/hangar  fireorder: \".$fires[$i]->id);\n  552  \t\t\t\tcontinue;\n  553  \t\t\t}\n  554  \t\t\t$name = $launcher->getAmmo()->name;\n  555  \t\t\t$adjust[] = array(\n  556: \t\t\t\t\"launchData\" => array(\"shipid\" => $shooter->id, \"systemid\" => $launcher->id, \n  557: \t\t\t\t\t\"loads\" => array(0 => array(\"name\" => $name, \"launch\" => $fires[$i]->shots)\n  558  \t\t\t\t\t)\n  559  \t\t\t\t)\n  ...\n  561  \n  562  \t\t\tfor ($j = 0; $j < sizeof($units); $j++){\n  563: \t\t\t\tif ($units[$j][\"launchData\"][\"shipid\"] == $shooter->id && $units[$j][\"launchData\"][\"loads\"][0][\"name\"] == $name && $units[$j][\"mission\"][\"targetid\"] == $fires[$i]->targetid){\n  564: \t\t\t\t\t//Debug::log(\"merging\");\n  565: \t\t\t\t\t$units[$j][\"launchData\"][\"loads\"][0][\"launch\"] += $fires[$i]->shots;\n  566  \t\t\t\t\t$skip = 1;\n  567  \t\t\t\t\tbreak;\n  ...\n  570  \n  571  \t\t\tif ($skip){\n  572: \t\t\t\tDebug::log(\"skipping\");\n  573  \t\t\t\tcontinue;\n  574  \t\t\t}\n  ...\n  577  \t\t\t$tPos = $this->getUnit($fires[$i]->targetid)->getCurrentPosition();\n  578  \t\t\t$a = Math::getAngle($sPos->x, $sPos->y, $tPos->x, $tPos->y);\n  579: \t\t\t//Debug::log(\"i = \".$i.\", shooterid: \".$shooter->id);\n  580  \t\t\t$devi = Math::getPointInDirection($shooter->size/3, $a, $sPos->x + mt_rand(-10, 10), $sPos->y + mt_rand(-10, 10));\n  581: \t\t\t$mission = array(\"type\" => 2, \"turn\" => $this->turn, \"targetid\" => $fires[$i]->targetid, \"x\" => $tPos->x, \"y\" => $tPos->y, \"arrived\" => 0, \"new\" => 1);\n  582: \t\t\t$move = array(\"turn\" => $this->turn, \"type\" => \"deploy\", \"dist\" => 0, \"x\" => $devi->x, \"y\" => $devi->y, \"a\" => $a, \"cost\" => 0, \"delay\" => 0, \"costmod\" => 0, \"resolved\" => 0);\n  583: \t\t\t$launchData = array(\"shipid\" => $shooter->id, \"systemid\" => $launcher->id, \"loads\" => array(0 => array(\"launch\" => $fires[$i]->shots, \"name\" => $name)));\n  584  \n  585: \t\t\t$units[] = array(\"gameid\" => $this->gameid, \"userid\" => $shooter->userid, \"type\" => \"Salvo\", \"name\" => \"Salvo\", \"turn\" => $this->turn, \"eta\" => 0,\n  586: \t\t\t\t\"mission\" => $mission, \"actions\" => array($move), \"launchData\" => $launchData);\n  587  \n  588  \n  ...\n  597  \t\t\tDBManager::app()->updateSystemLoad($adjust);\n  598  \t\t\tfor ($i = 0; $i < sizeof($units); $i++){\n  599: \t\t\t\t$this->ships[] = new Salvo($units[$i][\"id\"], $units[$i][\"userid\"], $this->turn, \"deployed\", 0);\n  600: \t\t\t\tif ($this->ships[sizeof($this->ships)-1]->destroyed){\"dis salvo is estroyed\";}\n  601  \t\t\t\t$this->ships[sizeof($this->ships)-1]->setState($this->turn, $this->phase);\n  602: \t\t\t\t$this->ships[sizeof($this->ships)-1]->actions[] = new Action(-1, $this->turn, \"deploy\", 0, $units[$i][\"actions\"][0][\"x\"], $units[$i][\"actions\"][0][\"y\"], $a, 0, 0, 0, 0);\n  603  \t\t\t}\n  604  \t\t}\n  ...\n  610  \t\t\tif ($this->ships[$i]->available == $this->turn){\n  611  \t\t\t\tif (sizeof($this->ships[$i]->actions) == 1){\n  612: \t\t\t\t\tDebug::log(\"handleDeploymentActions #\".$this->ships[$i]->id);\n  613  \t\t\t\t\t$data[] = $this->ships[$i]->id;\n  614  \t\t\t\t}\n  ...\n  620  \n  621  \tpublic function handleJumpActions(){\n  622: \t\tDebug::log(\"handleJumpActions\");\n  623  \t\t$updated = array();\n  624  \n  ...\n  631  \t\t\tif ($this->ships[$i]->ship && $this->ships[$i]->available == $this->turn){\n  632  \t\t\t\t$order = $this->ships[$i]->actions[0];\n  633: \t\t\t\t$output = $this->ships[$i]->getSystemByName(\"Sensor\")->output;\n  634  \t\t\t\t$shift = round($this->ships[$i]->size / $output*500*$mod, 2);\n  635  \t\t\t\t$aShift = ceil($shift);\n  636  \t\t\t\t$pShift = ceil($shift*2);\n  637: \t\t\t\tDebug::log(\"jumpin: #\".$this->ships[$i]->id.\", class: \".$this->ships[$i]->name.\", size: \".$this->ships[$i]->size.\", sensor: \".$output.\", ordered to: \".$order->x.\"/\".$order->y.\", shiftPotential: \".$shift.\"%\");\n  638: \t\t\t\tDebug::log($this->ships[$i]->name.\", aShift: \".$aShift.\"°, pShift: \".$pShift.\"px\");\n  639  \n  640  \t\t\t\t$aShift = mt_rand(-$aShift, $aShift);\n  ...\n  643  \t\t\t\t$dist = Math::getDist($order->x, $order->y, $order->x + $xShift, $order->y + $yShift);\n  644  \n  645: \t\t\t\tDebug::log(\"--> aShift: \".$aShift.\"°, psShift: \".$xShift.\"/\".$yShift.\" (\".$dist.\"px)\");\n  646  \n  647  \t\t\t\t$this->ships[$i]->actions[0]->resolved = 1;\n  648: \t\t\t\t$this->ships[$i]->actions[] = new Action(-1, $this->turn, \"jump\", $dist, $order->x + $xShift, $order->y + $yShift, $aShift, 0, 0, 0, 0);\n  649  \t\t\t\t$updated[] = $this->ships[$i];\n  650  \t\t\t}\n  ...\n  652  \n  653  \t\tif (sizeof($updated)){\n  654: \t\t\tDebug::log(\"action size: \".sizeof($updated[0]->actions));\n  655  \t\t\tDBManager::app()->insertServerActions($updated);\n  656  \t\t}\n  ...\n  658  \n  659  \tpublic function startMovementPhase(){\n  660: \t\t//Debug::log(\"startShipMovementPhase\");\n  661  \t\t$dbManager = DBManager::app();\n  662  \t\t$this->phase = 0;\n  663  \n  664  \t\tif ($dbManager->setGameTurnPhase($this->gameid, $this->turn, $this->phase)){\n  665: \t\t\t$this->updatePlayerStatus(\"waiting\");\n  666  \t\t\treturn true;\n  667  \t\t}\n  ...\n  669  \n  670  \tpublic function startFighterMovementPhase(){\n  671: \t\t//Debug::log(\"startFighterMovementPhase\");\n  672  \t\t$dbManager = DBManager::app();\n  673  \t\t$this->phase = 1;\n  ...\n  677  \t\t\t\t$hasFlight = false;\n  678  \t\t\t\tfor ($j = 0; $j < sizeof($this->ships); $j++){\n  679: \t\t\t\t\tif ($this->ships[$j]->userid == $this->playerstatus[$i][\"userid\"] && $this->ships[$j]->flight){\n  680  \t\t\t\t\t\t$hasFlight = true;\n  681  \t\t\t\t\t\tbreak;\n  ...\n  684  \n  685  \t\t\t\tif ($hasFlight){\n  686: \t\t\t\t\t$dbManager->setPlayerstatus($this->playerstatus[$i][\"userid\"], $this->gameid, $this->turn, $this->phase, \"waiting\");\n  687  \t\t\t\t}\n  688: \t\t\t\telse $dbManager->setPlayerstatus($this->playerstatus[$i][\"userid\"], $this->gameid, $this->turn, $this->phase, \"ready\");\n  689  \t\t\t}\n  690  \t\t}\n  ...\n  696  \n  697  \tpublic function handleMovementPhase(){\n  698: \t\tDebug::log(\"handleMovementPhase\");\n  699  \t\t$this->handleShipMovement();\n  700  \t\t$this->flight = 1;\n  ...\n  708  \n  709  \tpublic function handleShipMovement(){\n  710: \t\tDebug::log(\"handleShipMovement\");\n  711  \t\tfor ($i = 0; $i < sizeof($this->ships); $i++){\n  712  \t\t\tif ($this->ships[$i]->ship){\n  ...\n  722  \n  723  \tpublic function handleMixedMovement(){\n  724: \t\tDebug::log(\"handleMixedMovement\");\n  725  \t\t$missions = array();\n  726  \t\t$stack = array(array(), array(), array());\n  ...\n  737  \t\t\t}\n  738  \n  739: \t\t\tDebug::log(\" ==== handling mixed #\".$this->ships[$i]->id);\n  740  \n  741  \t\t\tif (!$this->ships[$i]->mission->arrived && $this->ships[$i]->available < $this->turn && $this->ships[$i]->mission->turn == $this->turn){\n  742: \t\t\t\tDebug::log(\"SKIPPING flight in delay mode, mission start turn: \".$this->ships[$i]->mission->turn);\n  743  \t\t\t\t$tPos = $this->ships[$i]->getCurrentPosition(); // Patrol\n  744: \t\t\t\t$move = new Action(-1, $this->turn,\t\"patrol\",\t0, $tPos->x, $tPos->y, 0, 0, 0, 0, 0);\n  745  \t\t\t\t$this->ships[$i]->actions[] = $move;\n  746  \t\t\t\t$units[] = $this->ships[$i];\n  ...\n  752  \t\t\t\t\t$dist = Math::getDist2($this->ships[$i]->getCurrentPosition(), $tPos);\n  753  \t\t\t\t\t$angle = Math::getAngle2($this->ships[$i]->getCurrentPosition(), $tPos);\n  754: \t\t\t\t\t$move = new Action(-1, $this->turn,\t\"move\",\t$dist, $tPos->x, $tPos->y, $angle, 0, 0, 0, 0);\n  755  \t\t\t\t\t$this->ships[$i]->actions[] = $move;\n  756: \t\t\t\t\tDebug::log(\"STRIKE #\".$this->ships[$i]->id.\", adding move to: \".$move->x.\"/\".$move->y);\n  757  \t\t\t\t\t$units[] = $this->ships[$i];\n  758  \t\t\t\t} \n  759  \t\t\t\telse {\n  760  \t\t\t\t\t$tPos = $this->ships[$i]->getCurrentPosition(); // Patrol\n  761: \t\t\t\t\t$move = new Action(-1, $this->turn,\t\"patrol\",\t0, $tPos->x, $tPos->y, 0, 0, 0, 0, 0);\n  762  \t\t\t\t\t$this->ships[$i]->actions[] = $move;\n  763: \t\t\t\t\tDebug::log(\"PATROL #\".$this->ships[$i]->id.\", adding patrol: \".$move->x.\"/\".$move->y);\n  764  \t\t\t\t\t$units[] = $this->ships[$i];\n  765  \t\t\t\t}\n  ...\n  773  \t\t\t\t\t$target = $this->getUnit($this->ships[$i]->mission->targetid);\n  774  \t\t\t\t\tif ($target->ship){\n  775: \t\t\t\t\t\tDebug::log(\"STRIKE #\".$this->ships[$i]->id.\" advance vs ship\");\n  776  \t\t\t\t\t\t$stack[1][] = $this->ships[$i];\n  777  \t\t\t\t\t}\n  778  \t\t\t\t\telse {\n  779: \t\t\t\t\t\tDebug::log(\"STRIKE #\".$this->ships[$i]->id.\" advance vs mixed\");\n  780  \t\t\t\t\t\t$stack[2][] = $this->ships[$i];\n  781  \t\t\t\t\t} \n  ...\n  793  \t\t}\n  794  \n  795: \t\tDebug::log(\"RESOLVING (layer 0 -> patrol target, layer 1 => strike)\");\n  796  \t\tfor ($i = 0; $i < sizeof($stack); $i++){\n  797: \t\t\tDebug::log(\"resolving stack #\".$i);\n  798  \t\t\tfor ($j = 0; $j < sizeof($stack[$i]); $j++){\n  799: \t\t\t\tDebug::log(\"resolving mixed #\".$stack[$i][$j]->id);\n  800: \t\t\t\tDebug::log(\"_____________________\");\n  801  \t\t\t\t$origin = $stack[$i][$j]->getCurrentPosition();\n  802  \t\t\t\t$impulse = $stack[$i][$j]->getCurrentImpulse();\n  ...\n  814  \t\t\t\t$angle = Math::getAngle2($origin, $tPos);\n  815  \n  816: \t\t\t\t//Debug::log(\"Flight #\".$stack[$i][$j]->id.\", impulse: \".$impulse);\n  817: \t\t\t\t//Debug::log(\"From \".$origin->x.\"/\".$origin->y.\" to \".$tPos->x.\"/\".$tPos->y);\n  818: \t\t\t\t//Debug::log(\"Dist \".$dist.\", angle: \".$angle);\n  819  \n  820  \t\t\t\tif ($impulse < $dist){\n  821: \t\t\t\t\tDebug::log(\"close in\");\n  822  \t\t\t\t\t$tPos = Math::getPointInDirection($impulse, $angle, $origin->x, $origin->y);\n  823  \t\t\t\t}\n  824  \t\t\t\telse {\n  825: \t\t\t\t\tDebug::log(\"arrival\");\n  826  \t\t\t\t\t$stack[$i][$j]->mission->arrived = $this->turn;\n  827  \t\t\t\t}\n  ...\n  829  \t\t\t\t$missions[] = $stack[$i][$j]->mission;\n  830  \t\t\t\t$stack[$i][$j]->facing = $angle;\n  831: \t\t\t\t$move = new Action(-1, $this->turn,\t\"move\",\t$dist, $tPos->x, $tPos->y,\n  832  \t\t\t\t$angle, 0, 0, 0, 0);\n  833  \t\t\t\t$stack[$i][$j]->actions[] = $move;\n  834  \n  835: \t\t\t\t//Debug::log(\"adding move to: \".$move->x.\"/\".$move->y);\n  836  \n  837  \t\t\t\t$units[] = $stack[$i][$j];\n  ...\n  849  \n  850  \tpublic function assembleEndStates(){\n  851: \t\tDebug::log(\"assembleEndStates\");\n  852  \t\t$states = array();\n  853  \t\tfor ($i = 0; $i < sizeof($this->ships); $i++){\n  854: \t\t\t//Debug::log(\"#\".$this->ships[$i]->id);\n  855  \t\t\t//if ($this->ships[$i]->destroyed){continue;}\n  856: \t\t\t//if ($this->ships[$i]->destroyed){Debug::log(\"im destroyed!\");}\n  857  \t\t\t$states[] = $this->ships[$i]->getEndState($this->turn, $this->phase);\n  858  \t\t}\n  ...\n  860  \t\tif ($this->phase == 3){\n  861  \t\t\tfor ($i = 0; $i < sizeof($this->incoming); $i++){\n  862: \t\t\t\tif ($this->incoming[$i][\"available\"] == $this->turn+1){\n  863  \t\t\t\t\t$states[] = array(\n  864: \t\t\t\t\t\t\"id\" => $this->incoming[$i][\"id\"], \n  865: \t\t\t\t\t\t\"x\" => $this->incoming[$i][\"x\"], \n  866: \t\t\t\t\t\t\"y\" => $this->incoming[$i][\"y\"], \n  867: \t\t\t\t\t\t\"delay\" => 0, \n  868: \t\t\t\t\t\t\"angle\" => $this->incoming[$i][\"a\"], \n  869: \t\t\t\t\t\t\"thrust\" => 0\n  870  \t\t\t\t\t);\n  871  \t\t\t\t}\n  ...\n  878  \n  879  \tpublic function startFiringPhase(){\n  880: \t//\tDebug::log(\"startFiringPhase\");\n  881  \t\t$dbManager = DBManager::app();\n  882  \t\t$this->phase = 2;\n  ...\n  884  \t\tif ($dbManager->setGameTurnPhase($this->gameid, $this->turn, $this->phase)){\n  885  \t\t\t//$players = $dbManager->getPlayerStatus($this->gameid);\n  886: \t\t\t$this->updatePlayerStatus(\"waiting\");\n  887  \t\t\treturn true;\n  888  \t\t}\n  ...\n  905  \t\t$this->writeCritEntries();\n  906  \t\t$time += microtime(true); \n  907: \t\tDebug::log(\"handleFiringPhase time: \".round($time, 3).\" seconds.\");\n  908  \t\treturn true;\n  909  \t}\n  ...\n  914  \n  915  \tpublic function endTurn(){\n  916: \t\tDebug::log(\"endTurn\");\n  917  \t\t$this->freeFlights();\n  918  \t\t$this->setUnitStatus();\n  ...\n  923  \tpublic function alterReinforcementPoints(){\n  924  \t\tfor ($i = 0; $i < sizeof($this->playerstatus); $i++){\n  925: \t\t\tDBManager::app()->addReinforceValue($this->playerstatus[$i][\"userid\"], $this->gameid, $this->reinforce);\n  926  \t\t};\n  927  \t}\n  ...\n  955  \t\t\tif ($this->ships[$i]->flight && $this->ships[$i]->mission->arrived && $this->ships[$i]->mission->type == 2){\n  956  \t\t\t\tif ($this->getUnit($this->ships[$i]->mission->targetid)->destroyed){\n  957: \t\t\t\tDebug::log(\"freeeing flight #\".$this->ships[$i]->id.\" from mission\");\n  958  \t\t\t\t\t$this->ships[$i]->mission->type = 1;\n  959  \t\t\t\t\t$this->ships[$i]->mission->turn = $this->turn - 2;\n  ...\n  969  \n  970  \tpublic function startNewTurn(){\n  971: \t\t//Debug::log(\"startNewTurn\");\n  972  \t\t$this->turn = $this->turn+1;\n  973  \t\t$this->phase = -1;\n  ...\n  976  \n  977  \tpublic function startDeploymentPhase(){\n  978: \t\t//Debug::log(\"startDeploymentPhase\");\n  979  \t\t$this->pickReinforcements();\n  980: \t\t$this->updatePlayerStatus(\"waiting\");\n  981  \t}\n  982  \n  ...\n 1007  \t\treturn;\n 1008  \t\tfor ($i = 0; $i < sizeof($this->ships); $i++){\n 1009: \t\t\tDebug::log(\"FROM: #\".$this->ships[$i]->id);\n 1010  \t\t\tforeach ($this->ships[$i]->angles as $val){\n 1011: \t\t\t\tDebug::log(\"--> ANGLE TO: #\".$val[0].\": \".$val[1]);\n 1012  \t\t\t}\n 1013  \t\t\tforeach ($this->ships[$i]->distances as $val){\n 1014: \t\t\t\tDebug::log(\"-->  DIST TO: #\".$val[0].\": \".$val[1]);\n 1015  \t\t\t}\n 1016  \t\t}\n ....\n 1027  \t\t\t\t\tif ($ship->cc[$j] == $this->ships[$i]->id){\n 1028  \t\t\t\t\t\tif ($this->ships[$i]->flight || $this->ships[$i]->salvo){\n 1029: \t\t\t\t\t\t\t//Debug::log(\"adding CC fighter lock from #\".$ship->id.\" vs #\".$this->ships[$i]->id);\n 1030  \t\t\t\t\t\t\t$ship->locks[] = array($this->ships[$i]->id, 1);\n 1031  \t\t\t\t\t\t}\n ....\n 1035  \t\t}\n 1036  \t\telse if ($ship->ship){\n 1037: \t\t\t//Debug::log(\"ew for #\".$ship->id);\n 1038  \t\t\t$origin = $ship->getCurrentPosition();\n 1039: \t\t\t$sensor =  $ship->getSystemByName(\"Sensor\");\n 1040  \t\t\t$ew = $sensor->getEW($this->turn);\n 1041  \t\t\tif ($sensor->destroyed || $sensor->disabled  || !$ew){\n ....\n 1046  \t\t\t\t\tif ($this->ships[$i]->id == $ship->id || $ship->userid == $this->ships[$i]->userid){continue;}\n 1047  \t\t\t\t\tswitch ($ew->type){\n 1048: \t\t\t\t\t\tcase 2: $ship->locks[] = array($this->ships[$i]->id, $this->const[\"ew\"][\"effect\"][$ew->type]); break;\n 1049  \t\t\t\t\t}\n 1050  \t\t\t\t}\n ....\n 1060  \t\t\t\telse {\n 1061  \t\t\t\t\t$str = $sensor->getOutput($this->turn);\n 1062: \t\t\t\t\t$w = min(180, $this->const[\"ew\"][\"len\"] * pow($str/$ew->dist, $this->const[\"ew\"][\"p\"]));\n 1063  \t\t\t\t\t$start = Math::addAngle(0 + $w-$ship->getFacing(), $ew->angle);\n 1064  \t\t\t\t\t$end = Math::addAngle(360 - $w-$ship->getFacing(), $ew->angle);\n 1065  \t\t\t\t}\n 1066  \n 1067: \t\t\t\t//Debug::log(\"specific EW for ship #\".$ship->id.\", EW from \".$start.\" to \".$end.\", dist: \".$ew->dist);\n 1068  \t\t\t\tfor ($i = 0; $i < sizeof($this->ships); $i++){\n 1069  \t\t\t\t\t$multi = $this->ships[$i]->getLockMultiplier();\n ....\n 1076  \t\t\t\t\t\t\t\tif ($this->ships[$i]->flight){ // flight\n 1077  \t\t\t\t\t\t\t\t\t$multi = $multi / 180 * $w;\n 1078: \t\t\t\t\t\t\t\t\t//Debug::log(\"adding CC lock from ship #\".$ship->id.\" vs flight# #\".$this->ships[$i]->id.\" for value: \".$multi);\n 1079  \n 1080  \t\t\t\t\t\t\t\t\t$ship->locks[] = array($this->ships[$i]->id, $multi);\n ....\n 1084  \t\t\t\t\t\t\t\t\t$angle = Math::getAngle2($origin, $this->ships[$i]->getTrajectoryStart());\n 1085  \t\t\t\t\t\t\t\t\tif (Math::isInArc($angle, $start, $end)){\n 1086: \t\t\t\t\t\t\t\t\t\t//Debug::log(\"adding CC lock from ship vs salvo\");\n 1087  \t\t\t\t\t\t\t\t\t\t$ship->locks[] = array($this->ships[$i]->id, $multi);\n 1088  \t\t\t\t\t\t\t\t\t\t$skip = 1; break;\n ....\n 1100  \t\t\t\t\tif (Math::getDist2($origin, $dest) <= $ew->dist){\n 1101  \t\t\t\t\t\t$a = Math::getAngle2($origin, $dest);\n 1102: \t\t\t\t\t\t//Debug::log(\"versus #\".$this->ships[$i]->id.\", a: \".$a);\n 1103  \t\t\t\t\t\tif (Math::isInArc($a, $start, $end)){\n 1104  \t\t\t\t\t\t\tif ($ew->type == 0){ // LOCK\n 1105: \t\t\t\t\t\t\t\t//Debug::log(\"locking onto: #\".$this->ships[$i]->id);\n 1106  \t\t\t\t\t\t\t\t$ship->locks[] = array($this->ships[$i]->id, $multi);\n 1107  \t\t\t\t\t\t\t}\n 1108  \t\t\t\t\t\t\telse if ($ew->type == 1){ // MASK\n 1109  \t\t\t\t\t\t\t\tif (!$this->ships[$i]->flight){\n 1110: \t\t\t\t\t\t\t\t\t//Debug::log(\"masking from #\".$this->ships[$i]->id);\n 1111  \t\t\t\t\t\t\t\t\t$ship->masks[] = array($this->ships[$i]->id, $multi);\n 1112  \t\t\t\t\t\t\t\t}\n 1113  \t\t\t\t\t\t\t}\n 1114: \t\t\t\t\t\t}// else Debug::log(\"out of arc\");\n 1115  \t\t\t\t\t}\n 1116  \t\t\t\t}\n ....\n 1118  \n 1119  \t\t\t//foreach ($ship->locks as $entry){\n 1120: \t\t\t//\tDebug::log(\"lock vs #\".$entry[0].\" with val: \".$entry[1]);\n 1121  \t\t\t//}\n 1122  \t\t}\n ....\n 1125  \tpublic function setFireOrderDetails(){\n 1126  \t\tfor ($i = sizeof($this->fires)-1; $i >= 0; $i--){\n 1127: \t\t\t//echo \"fire: \".$this->fires[$i]->id; echo \"</br></br>\";\n 1128: \t\t\t//var_export($this->fires[$i]); echo \"</br></br>\";\n 1129  \t\t\t$this->fires[$i]->shooter = $this->getUnit($this->fires[$i]->shooterid);\n 1130  \t\t\t$this->fires[$i]->weapon = $this->fires[$i]->shooter->getSystemById($this->fires[$i]->weaponid);\n 1131  \t\t\t$this->fires[$i]->shots = $this->fires[$i]->weapon->getShots($this->turn);\n 1132  \t\t\t$this->fires[$i]->target = $this->getUnit($this->fires[$i]->targetid);\n 1133: \t\t\t//var_export($this->fires[$i]->weapon); echo \"</br></br>\";\n 1134: \t\t\t//var_export($this->fires[$i]->weapon->getBoostLevel($this->turn)); echo \"</br></br>\";\n 1135  \t\t}\n 1136  \t}\n ....\n 1156  \t\t// resolve ship vs ship / fighter\n 1157  \t\tfor ($i = 0; $i < sizeof($this->fires); $i++){\n 1158: \t\t\t//Debug::log(\"fire [\".$i.\"]\");\n 1159  \t\t\tif (!$this->fires[$i]->resolved){\n 1160: \t\t\t\t//Debug::log(\"HANDLING\");\n 1161  \t\t\t\tif ($this->fires[$i]->shooter->flight == false){\n 1162  \t\t\t\t\t//var_export($this->fires[$i]->id);\n ....\n 1188  \t\tfor ($i = 0; $i < sizeof($this->fires); $i++){\n 1189  \t\t\tif ($this->fires[$i]->resolved || !$this->fires[$i]->shooter->flight){continue;}\n 1190: \t\t\t//Debug::log(\"comparing :\".$this->fires[$i]->id);\n 1191  \t\t\tfor ($j = $i+1; $j < sizeof($this->fires); $j++){\n 1192  \t\t\t\tif ($this->fires[$j]->resolved || !$this->fires[$j]->shooter->flight){continue;}\n 1193: \t\t\t\t//Debug::log(\"to :\".$this->fires[$j]->id);\n 1194  \t\t\t\tif ($this->fires[$j]->shooterid == $this->fires[$i]->shooterid){\n 1195  \t\t\t\t\tif ($this->fires[$j]->targetid == $this->fires[$i]->targetid){\n 1196  \t\t\t\t\t\tif ($this->fires[$j]->weapon->name == $this->fires[$i]->weapon->name){\n 1197: \t\t\t\t\t\t\t//Debug::log(\"could add fire: \".$this->fires[$j]->id.\" to fire \".$this->fires[$i]->id);\n 1198  \t\t\t\t\t\t\t$this->fires[$i]->shots++;\n 1199  \t\t\t\t\t\t\t$this->fires[$j]->shots--;\n 1200  \t\t\t\t\t\t\t$this->fires[$j]->resolved = 1;\n 1201: \t\t\t\t\t\t\t//$this->fires[$j]->notes = \"+\";\n 1202  \t\t\t\t\t\t}\n 1203  \t\t\t\t\t}\n ....\n 1228  \t\t\t\t\t}\n 1229  \t\t\t\t\t$this->fires[$i]->target->resolveFireOrder($this->fires[$i]);\n 1230: \t\t\t\t\t//Debug::log(\"resolving fire id: \".$this->fires[$i]->id);\n 1231  \t\t\t\t\tif (sizeof($this->fires[$i]->damages)){\n 1232  \t\t\t\t\t\t$this->damages = array_merge($this->damages, $this->fires[$i]->damages);\n ....\n 1264  \n 1265  \tpublic function resolveBallisticFireOrders(){\n 1266: \t\tDebug::log(\"resolveBallisticFireOrders\");\n 1267  \t\t$fires = array();\n 1268  \n ....\n 1291  \n 1292  \tpublic function cleanFireOrders(){\n 1293: \t\tDebug::log(\"cleanFireOrders, fires: \".sizeof($this->fires));\n 1294  \t\tDBManager::app()->updateFireOrders($this->fires);\n 1295  \t\tDBManager::app()->deleteUnresolvedFireOrders($this->gameid);\n ....\n 1301  \t\t\t\t$this->ships[$i]->testForCrits($this->turn);\n 1302  \t\t\t} \n 1303: \t\t\t//else Debug::log(\"skipping undamaged unit #\".$this->ships[$i]->id.\" for crit testing!\");\n 1304  \t\t}\n 1305  \t}\n ....\n 1312  \n 1313  \tpublic function writeCritEntries(){\n 1314: \t\t//Debug::log(\"writeCritEntries\");\n 1315  \t\t$all = array();\n 1316  \t\tfor ($i = 0; $i < sizeof($this->ships); $i++){\n ....\n 1322  \n 1323  \tpublic function startDamageControlPhase(){\n 1324: \t\t//Debug::log(\"startDamageControlPhase\");\n 1325  \n 1326  \t\t$dbManager = DBManager::app();\n ....\n 1328  \n 1329  \t\tif ($dbManager->setGameTurnPhase($this->gameid, $this->turn, $this->phase)){\n 1330: \t\t\t$this->updatePlayerStatus(\"waiting\");\n 1331  \t\t\treturn true;\n 1332  \t\t}\n ....\n 1334  \n 1335  \tpublic function finishTurn(){\n 1336: \t\t//Debug::log(\"finishTurn\");\n 1337  \t}\n 1338  \n ....\n 1342  \n 1343  \tpublic function getUnit($id){\n 1344: \t\t//Debug::log(\"looking for unit :\".$unitid);\n 1345  \t\tfor ($i = 0; $i < sizeof($this->ships); $i++){\n 1346  \t\t\tif ($this->ships[$i]->id == $id){\n ....\n 1351  \n 1352  \tpublic function getFactions(){\n 1353: \t\treturn array(\"Earth Alliance\", \"Centauri Republic\", \"Minbari Federation\", \"Narn Regime\");\n 1354  \t}\n 1355  \n 1356  \tpublic function getFightersForFaction($faction){\n 1357: \t\t//Debug::log(\"getFightersForFaction\");\n 1358  \t}\n 1359  \n 1360  \tpublic function getFlights(){\n 1361  \t\treturn array(array(\n 1362: \t\t\t\"name\" => \"Flight\",\n 1363: \t\t\t\"value\" => 500,\n 1364: \t\t\t\"eta\" => 2\n 1365  \t\t));\n 1366  \t}\n 1367  \n 1368  \tpublic function getReinforcementShips($faction){\n 1369: \t\t//Debug::log(\"getShipsForFaction\");\n 1370  \t\t$ships = array();\n 1371  \t\t$data = array();\n 1372  \n 1373  \t\tswitch ($faction){\n 1374: \t\t\tcase \"Earth Alliance\";\n 1375  \t\t\t\t$ships = array(\n 1376: \t\t\t\t\tarray(\"Omega\", 8, 2),\n 1377: \t\t\t\t\tarray(\"Hyperion\", 6, 1),\n 1378: \t\t\t\t\tarray(\"Artemis\", 5, 0),\n 1379: \t\t\t\t\tarray(\"Olympus\", 5, 0),\n 1380: \t\t\t\t\tarray(\"Tethys\", 4, -1)\n 1381  \t\t\t\t);\n 1382  \t\t\t\tbreak;\n 1383: \t\t\tcase \"Centauri Republic\";\n 1384  \t\t\t\t$ships = array(\n 1385: \t\t\t\t\tarray(\"Primus\", 8, 2),\n 1386: \t\t\t\t\tarray(\"Altarian\", 5, 0),\n 1387: \t\t\t\t\tarray(\"Darkner\", 4, 0),\n 1388: \t\t\t\t\tarray(\"Demos\", 5, 0),\n 1389: \t\t\t\t\tarray(\"Vorchan\", 3, -1),\n 1390: \t\t\t\t\tarray(\"Haven\", 3, -1),\n 1391  \t\t\t\t\t);\n 1392  \t\t\t\tbreak;\n 1393: \t\t\tcase \"Minbari Federation\";\n 1394  \t\t\t\t$ships = array(\n 1395: \t\t\t\t\tarray(\"Sharlin\", 8, 1),\n 1396: \t\t\t\t\tarray(\"Tinashi\", 4, 0),\n 1397: \t\t\t\t\tarray(\"WhiteStar\", 5, -2),\n 1398  \t\t\t\t);\n 1399  \t\t\t\tbreak;\n 1400: \t\t\tcase \"Narn Regime\";\n 1401  \t\t\t\t$ships = array(\n 1402: \t\t\t\t\tarray(\"GQuan\", 6, 0)\n 1403  \t\t\t\t);\n 1404  \t\t\t\tbreak;\n ....\n 1412  \t\t\t$name = $ships[$i][0];\n 1413  \t\t\t$ship = array(\n 1414: \t\t\t\t\"name\" => $ships[$i][0],\n 1415: \t\t\t\t\"value\" => $name::$value,\n 1416: \t\t\t\t\"weight\" => $ships[$i][1],\n 1417: \t\t\t\t\"eta\" => $ships[$i][2]\n 1418  \t\t\t);\n 1419  \t\t\t$data[] = $ship;\n ....\n 1425  \n 1426  \tpublic function getShipsForFaction($faction){\n 1427: \t\t//Debug::log(\"getShipsForFaction\");\n 1428  \t\t$ships = array();\n 1429  \t\t$data = array();\n 1430  \n 1431  \t\tswitch ($faction){\n 1432: \t\t\tcase \"Earth Alliance\";\n 1433  \t\t\t\t$ships = array(\n 1434: \t\t\t\t\t\"Omega\",\n 1435: \t\t\t\t\t\"Avenger\",\n 1436: \t\t\t\t\t\"Hyperion\",\n 1437: \t\t\t\t\t\"Saggitarius\",\n 1438: \t\t\t\t\t\"Artemis\",\n 1439: \t\t\t\t\t\"Olympus\",\n 1440: \t\t\t\t\t\"Tethys\"\n 1441  \t\t\t\t);\n 1442  \t\t\t\tbreak;\n 1443: \t\t\tcase \"Centauri Republic\";\n 1444  \t\t\t\t$ships = array(\n 1445: \t\t\t\t\t\"Primus\",\n 1446: \t\t\t\t\t\"Altarian\",\n 1447: \t\t\t\t\t\"Demos\",\n 1448: \t\t\t\t\t\"Darkner\",\n 1449: \t\t\t\t\t\"Vorchan\",\n 1450: \t\t\t\t\t\"Haven\"\n 1451  \t\t\t\t\t);\n 1452  \t\t\t\tbreak;\n 1453: \t\t\tcase \"Minbari Federation\";\n 1454  \t\t\t\t$ships = array(\n 1455: \t\t\t\t\t\"Sharlin\",\n 1456: \t\t\t\t\t\"Tinashi\",\n 1457: \t\t\t\t\t\"WhiteStar\",\n 1458  \t\t\t\t);\n 1459  \t\t\t\tbreak;\n 1460: \t\t\tcase \"Narn Regime\";\n 1461  \t\t\t\t$ships = array(\n 1462: \t\t\t\t\t\"GQuan\"\n 1463  \t\t\t\t);\n 1464  \t\t\t\tbreak;\n ....\n 1472  \t\t\t$name = $ships[$i];\n 1473  \t\t\t$ship = array(\n 1474: \t\t\t\t\"name\" => $ships[$i],\n 1475: \t\t\t\t\"value\" => $name::$value,\n 1476: \t\t\t\t\"eta\" => 0\n 1477  \t\t\t);\n 1478  \t\t\t$data[] = $ship;\n ....\n 1483  \n 1484  \tpublic function getPreviewData($name){\n 1485: \t\t//Debug::log(\"asking for preview of: \".$name);\n 1486: \t\t$ship = new $name(1, 1, 0, \"\", 0);\n 1487  \t\t$ship->setState(0, 0);\n 1488  \t\treturn $ship;\n ....\n 1494  \t\tfor ($i = 0; $i < sizeof($array); $i++){\n 1495  \t\t\tswitch ($array[$i]){\n 1496: \t\t\t\tcase \"Ion\":\n 1497: \t\t\t\t\t$systems[] = array(\"LightIon\", \"MediumTwinIon\", \"HeavyIon\"); break;\n 1498: \t\t\t\tcase \"Pulse\":\n 1499: \t\t\t\t\t$systems[] = array(\"LightPulse\", \"MediumPulse\"); break;\n 1500: \t\t\t\tcase \"Laser\":\n 1501: \t\t\t\t\t$systems[] = array(\"LightLaser\", \"MediumLaser\", \"HeavyLaser\"); break;\n 1502: \t\t\t\tcase \"Matter\":\n 1503: \t\t\t\t\t$systems[] = array(\"MediumRailGun\", \"HeavyRailGun\"); break;\n 1504  \t\t\t\tdefault: break;\n 1505  \t\t\t}\n ....\n 1527  \tpublic function logShips($elements){\n 1528  \t\t$data = func_get_args();\n 1529: \t\tif ($data[0] == \"all\"){\n 1530  \t\t\treturn $this->logAllShips();\n 1531  \t\t}\n ....\n 1552  \n 1553  \t\tfor ($i = 0; $i < sizeof($allShips); $i++){\n 1554: \t\t\t$name = $allShips[$i][\"name\"];\n 1555  \t\t\t$ship = new $name(0, 0, 0, 0, 0, 0);\n 1556  \t\t\t$ship->setProps(1, 0);\n ....\n 1568  \tstatic function convertToFireOrder($data){\n 1569  \t\treturn new FireOrder(\n 1570: \t\t\t$data[\"id\"],\n 1571: \t\t\t$data[\"gameid\"],\n 1572: \t\t\t$data[\"turn\"],\n 1573: \t\t\t$data[\"shooterid\"],\n 1574: \t\t\t$data[\"targetid\"],\n 1575: \t\t\t$data[\"weaponid\"],\n 1576: \t\t\t$data[\"shots\"],\n 1577: \t\t\t$data[\"req\"],\n 1578: \t\t\t$data[\"notes\"],\n 1579: \t\t\t$data[\"hits\"],\n 1580: \t\t\t$data[\"resolved\"]\n 1581  \t\t);\n 1582  \t}\n\nC:\\xampp\\htdocs\\fire\\server\\mixed.php:\n   39  \n   40  \tpublic function setState($turn, $phase){\n   41: \t\t//Debug::log(\"setState #\".$this->id);\n   42  \t\tfor ($i = 0; $i < sizeof($this->structures); $i++){\n   43  \t\t\t$this->structures[$i]->setState($turn);\n   ..\n  148  \t\t}\n  149  \n  150: \t\tDebug::log(\"got no ANGLE set on \".$this->id.\" targeted by #\".$fire->shooter->id);\n  151  \t}\n  152  \n  ...\n  154  \t\tfor ($i = 0; $i < sizeof($fire->rolls); $i++){\n  155  \t\t\tif ($fire->target->destroyed){\n  156: \t\t\t\tDebug::log(\"aborting shot resolution vs dead target #\".$this->id);\n  157  \t\t\t}\n  158  \t\t\t$target = $this->getHitSystem($fire);\n  ...\n  194  \tpublic function addSubUnits($elements){\n  195  \t\tfor ($i = 0; $i < sizeof($elements); $i++){\n  196: \t\t\tfor ($j = 1; $j <= $elements[$i][\"amount\"]; $j++){\n  197: \t\t\t\t$this->structures[] = new $elements[$i][\"name\"](\n  198  \t\t\t\t\t$this->getId(),\n  199  \t\t\t\t\t$this->id\n  ...\n  225  \n  226  \tpublic function testForCrits($turn){\n  227: \t\t//Debug::log(\"= testForCrits for \".get_class($this).\", #\".$this->id.\", turn: \".$turn);\n  228  \t\tfor ($i = 0; $i < sizeof($this->structures); $i++){\n  229  \t\t\t$this->structures[$i]->testCrit($turn, 0);\n  ...\n  240  \n  241  \tpublic function getMoveState($turn){\n  242: \t\tDebug::log(\"getMoveState for \".$this->id);\n  243  \t\t$angle = $this->actions[sizeof($this->actions)-1]->a;\n  244  \n  ...\n  250  \t\t}\n  251  \n  252: \t\t//Debug::log(\"getMoveState for \".get_class($this).\" #\".$this->id.\" current facing \".$this->facing.\", now: \".$angle);\n  253  \n  254: \t\treturn array(\"id\" => $this->id, \"x\" => $this->actions[sizeof($this->actions)-1]->x, \"y\" => $this->actions[sizeof($this->actions)-1]->y, \"delay\" => $this->remainingDelay, \"angle\" => $angle, \"thrust\" => $this->currentImpulse);\n  255  \t}\n  256  }\n\nC:\\xampp\\htdocs\\fire\\server\\salvo.php:\n    2  \n    3  class Salvo extends Mixed {\n    4: \tpublic $name = \"Salvo\";\n    5: \tpublic $unitType = \"Salvo\";\n    6  \tpublic $salvo = true;\n    7  \tpublic $traverse = -4;\n    .\n   13  \n   14  \tpublic function getFireOrder($gameid, $turn, $target){\n   15: \t\t$fire = new FireOrder(-1, $gameid, $turn, $this->id, $target->id, $this->structures[0]->systems[0]->id, $this->getShots($turn), 0, 0, \"\", 0, 0);\n   16  \t\t$fire->weapon = $this->structures[0]->systems[0];\n   17  \t\t$fire->target = $target;\n\nC:\\xampp\\htdocs\\fire\\server\\ship.php:\n    6  \tpublic $x;\n    7  \tpublic $y;\n    8: \tpublic $unitType = \"Ship\";\n    9  \tpublic $userid;\n   10  \tpublic $available;\n   ..\n   58  \t\t$this->addPrimary();\n   59  \t\t$this->addStructures();\n   60: \t\t$this->getSystemByName(\"Reactor\")->setOutput($this->getPowerReq());\n   61  \t}\n   62  \n   ..\n   67  \n   68  \tpublic function setState($turn, $phase){\n   69: \t\t//Debug::log(\"setState #\".$this->id);\n   70  \t\tif ($this->primary->isDestroyed()){\n   71  \t\t\t$this->destroyed = 1;\n   ..\n   75  \t\t\t$this->primary->systems[$i]->setState($turn);\n   76  \t\t\tswitch ($this->primary->systems[$i]->name){\n   77: \t\t\t\tcase \"Reactor\":\n   78  \t\t\t\t\tif ($this->primary->systems[$i]->destroyed){\n   79  \t\t\t\t\t\t$this->destroyed = 1;\n   ..\n   83  \t\t\t\t\t}\n   84  \t\t\t\t\tbreak;\n   85: \t\t\t\tcase \"Bridge\":\n   86  \t\t\t\t\tif ($this->primary->systems[$i]->destroyed || $this->primary->systems[$i]->disabled){\n   87  \t\t\t\t\t\t$this->doUncommandShip($turn);\n   ..\n  116  \n  117  \tpublic function setProps($turn, $phase){\n  118: \t\t//Debug::log(\"setProps #\".$this->id);\n  119  \t\t$this->cost = static::$value;\n  120  \t\t$this->setCurrentImpulse($turn, $phase);\n  ...\n  167  \n  168  \t\tfor ($j = 0; $j < sizeof($this->primary->systems); $j++){\n  169: \t\t\tif ($this->primary->systems[$j]->name == \"Sensor\"){\n  170  \t\t\t\t$this->primary->systems[$j]->hideEW($turn);\n  171  \t\t\t}\n  ...\n  204  \tpublic function setCurrentImpulse($turn, $phase){\n  205  \t\t//if (!$this->flight){return;}\n  206: \t\t//Debug::log(\"id: \".$this->id);\n  207  \t\t$impulse = $this->currentImpulse;\n  208: \t\t//Debug::log(\"c \".$this->currentImpulse);\n  209  \t\tif ($turn == $this->available){\n  210: \t\t\t//Debug::log(\"launchTurn\");\n  211  \t\t\t$impulse = $this->getBaseImpulse();\n  212  \t\t}\n  213  \t\t$step = $this->getImpulseStep();\n  214: \t\t\t//Debug::log(\"step: \".$step);\n  215  \n  216  \t\tfor ($i = 0; $i < sizeof($this->actions); $i++){\n  217  \t\t\tif (!$this->actions[$i]->resolved){continue;}\n  218: \t\t\tif ($this->actions[$i]->type == \"speed\"){\n  219: \t\t\t\t//Debug::log(\"add: \".$$step*$this->actions[$i]->dist);\n  220  \t\t\t\t$impulse += $step*$this->actions[$i]->dist;\n  221  \t\t\t}\n  222  \t\t}\n  223: \t\t//Debug::log(\"end: \".$this->currentImpulse);\n  224  \t\t$this->currentImpulse = $impulse;\n  225  \t}\n  226  \n  227  \tpublic function getCurrentImpulse(){\n  228: \t\t//Debug::log(\"getCurrentImpulse #\".$this->id);\n  229  \t\treturn $this->currentImpulse;\n  230  \t}\n  ...\n  240  \n  241  \tpublic function getEndState($turn, $phase){\n  242: \t\t//Debug::log(\"getEndState #\".$this->id);\n  243  \t\tif ($phase == -1){\n  244  \t\t\tif ($this->available == $turn){\n  ...\n  256  \t\tfor ($i = 0; $i < sizeof($this->actions); $i++){\n  257  \t\t\tif ($this->actions[$i]->turn < $turn){continue;}\n  258: \t\t\tif ($turn == 1 && $this->actions[$i]->type == \"deploy\"){\n  259  \t\t\t\t$angle += $this->actions[$i]->a;\n  260  \t\t\t}\n  261: \t\t\telse if ($turn == $this->available && $this->actions[$i]->type == \"jump\"){\n  262: \t\t\t\t//Debug::log(\"adding \".$this->actions[$i]->a);\n  263  \t\t\t\t$angle += $this->actions[$i]->a;\n  264  \t\t\t}\n  ...\n  271  \t\t}\n  272  \n  273: \t\t//Debug::log(\"returning data fro getDeployState\");\n  274: \t\t//Debug::log(\"returning total angle: \".$angle);\n  275: \t\tDebug::log(\"getDeployState for \".get_class($this).\" #\".$this->id.\" current facing \".$this->facing.\", now: \".$angle);\n  276  \t\t\n  277: \t\treturn array(\"id\" => $this->id, \"x\" => $this->actions[sizeof($this->actions)-1]->x , \"y\" => $this->actions[sizeof($this->actions)-1]->y, \"delay\" => $this->remainingDelay, \"angle\" => $angle, \"thrust\" => $this->currentImpulse);\n  278  \t}\n  279  \n  280  \n  281  \tpublic function getMoveState($turn){\n  282: \t\t//Debug::log(\"getMoveState for \".$this->id);\n  283  \t\t$delay = $this->remainingDelay;\n  284  \t\t$angle = $this->facing;\n  285  \t\tfor ($i = 0; $i < sizeof($this->actions); $i++){\n  286  \t\t\tif ($this->actions[$i]->turn < $turn){continue;}\n  287: \t\t\tif ($delay && $this->actions[$i]->type == \"move\"){\n  288  \t\t\t\t$delay = max(0, $delay - $this->actions[$i]->dist);\n  289: \t\t\t} else if ($this->actions[$i]->type == \"turn\"){\n  290  \t\t\t\t$delay += $this->actions[$i]->delay;\n  291  \t\t\t\t$angle += $this->actions[$i]->a;\n  ...\n  300  \t\t}\n  301  \n  302: \t\t//Debug::log(\"getMoveState for \".get_class($this).\" #\".$this->id.\" current facing \".$this->facing.\", now: \".$angle);\n  303  \n  304: \t\treturn array(\"id\" => $this->id, \"x\" => $this->actions[sizeof($this->actions)-1]->x, \"y\" => $this->actions[sizeof($this->actions)-1]->y, \"delay\" => $delay, \"angle\" => $angle, \"thrust\" => $this->currentImpulse);\n  305  \t}\n  306  \n  ...\n  310  \t\tfor ($i = 0; $i < sizeof($this->actions); $i++){\n  311  \t\t\tif (!$this->actions[$i]->resolved){continue;}\n  312: \t\t\tif ($delay && $this->actions[$i]->type == \"move\"){\n  313  \t\t\t\t$delay = max(0, $delay - $this->actions[$i]->dist);\n  314: \t\t\t} else if ($this->actions[$i]->type == \"turn\"){\n  315  \t\t\t\t$delay += $this->actions[$i]->delay;\n  316  \t\t\t}\n  ...\n  325  \n  326  \t\tfor ($i = 1; $i < sizeof($dbLoad); $i++){\n  327: \t\t\tif ($dbLoad[$i][\"systemid\"] != $chunk[sizeof($chunk)-1][\"systemid\"]){\n  328: \t\t\t\t$this->getSystemById($chunk[sizeof($chunk)-1][\"systemid\"])->adjustLoad($chunk);\n  329  \t\t\t\t$chunk = array();\n  330  \t\t\t\t$chunk[] = $dbLoad[$i];\n  ...\n  335  \t\t}\n  336  \n  337: \t\t$this->getSystemById($chunk[sizeof($chunk)-1][\"systemid\"])->adjustLoad($chunk);\n  338  \n  339  \t\treturn true;\n  ...\n  392  \t\t\t\t\t$this->primary->addDamage($dmg);\n  393  \t\t\t\t\tif ($this->primary->isDestroyed()){\n  394: \t\t\t\t\t\t//Debug::log(\"destroying unit #\".$this->id);\n  395  \t\t\t\t\t\t$this->destroyed = 1;\n  396  \t\t\t\t\t}\n  ...\n  405  \t\t\t\t\t\t\t\t\t$this->primary->addDamage($dmg);\n  406  \t\t\t\t\t\t\t\t\tif ($this->primary->isDestroyed()){\n  407: \t\t\t\t\t\t\t\t\t\t//Debug::log(\"destroying unit #\".$this->id);\n  408  \t\t\t\t\t\t\t\t\t\t$this->destroyed = 1;\n  409  \t\t\t\t\t\t\t\t\t}\n  ...\n  419  \t\t\t\t\t\t$this->primary->addDamage($dmg);\n  420  \t\t\t\t\t\tif ($this->primary->isDestroyed()){\n  421: \t\t\t\t\t\t\t//Debug::log(\"destroying unit #\".$this->id);\n  422  \t\t\t\t\t\t\t$this->destroyed = 1;\n  423  \t\t\t\t\t\t}\n  ...\n  428  \t\t}\n  429  \n  430: \t\tDebug::log(\"WARNING couldnt apply damage: #.\".$dmg->id);\n  431  \t}\n  432  \n  433  \tpublic function doUnpowerAllSystems($turn){\n  434: \t\tdebug::log(\"doUnpowerAllSystems\");\n  435  \t\tfor ($i = 0; $i < sizeof($this->structures); $i++){\n  436  \t\t\tfor ($j = 0; $j < sizeof($this->structures[$i]->systems); $j++){\n  ...\n  477  \t\t\treturn true;\n  478  \t\t}\n  479: \t\telse if ($this->getSystemByName(\"Reactor\")->destroyed){\n  480  \t\t\t$this->destroyed = 1;\n  481: \t\t\t$this->status = \"destroyed\";\n  482  \t\t\treturn true;\n  483  \t\t}\n  ...\n  488  \t\tfor ($i = 0; $i < sizeof($this->cc); $i++){\n  489  \t\t\tif ($this->cc[$i] == $id){\n  490: \t\t\t\t//Debug::log(\"close combat! \".$this->id.\"/\".$fire->shooterid);\n  491  \t\t\t\treturn true;\n  492  \t\t\t}\n  ...\n  519  \n  520  \tpublic function resolveFireOrder($fire){\n  521: \t\tDebug::log(\"resolveFireOrder - ID \".$fire->id.\", shooter: \".get_class($fire->shooter).\" #\".$fire->shooterid.\" vs \".get_class($fire->target).\" #\".$fire->targetid.\", w: \".get_class($fire->weapon).\" #\".$fire->weaponid.\", shots: \".$fire->shots);\n  522  \n  523  \t\tif ($this->isDestroyed()){\n  ...\n  541  \t\t\t$roll = mt_rand(1, 100);\n  542  \t\t\t$fire->rolls[] = $roll;\n  543: \t\t\t$fire->notes .= $roll.\" \";\n  544  \t\t}\n  545  \t\treturn true;\n  ...\n  552  \t\tfor ($i = 0; $i < sizeof($fire->rolls); $i++){\n  553  \t\t\tif ($fire->target->destroyed){\n  554: \t\t\t\tDebug::log(\"aborting shot resolution vs dead target #\".$this->id);\n  555  \t\t\t}\n  556  \t\t\telse  if ($fire->rolls[$i] <= $fire->req){\n  ...\n  582  \n  583  \t\t$req = $base * $multi * $traverse - $range;\n  584: \t\t//Debug::log(\"CALCULATE TO HIT - angle: \".$fire->angle.\", base: \".$base.\", trav: \".$traverse.\", total multi: \".$multi.\", dist/range: \".$fire->dist.\"/\".$range.\", req: \".$req);\n  585  \n  586  \t\treturn ceil($req);\n  ...\n  596  \n  597  \tpublic function getHitSystem($fire){\n  598: \t\t//Debug::log(\"getHitSystem \".$this->name);\n  599  \t\t$roll;\n  600  \t\t$current = 0;\n  601  \t\t$main = $this->primary->getHitChance();// * $this->getShipTypeMod();\n  602: \t\t//Debug::log(\"main: \".$main);\n  603  \t\t$total = $main;\n  604  \n  ...\n  608  \t\t\tif ($struct->systems[$i]->destroyed){continue;}\n  609  \t\t\t$total += $struct->systems[$i]->getHitChance();\n  610: \t\t\t//Debug::log(\"adding: \".$struct->systems[$i]->name.\" for \".$struct->systems[$i]->getHitChance());\n  611  \t\t}\n  612  \n  613: \t\t//Debug::log(\"total: \".$total);\n  614  \n  615  \t\t$roll = mt_rand(0, $total);\n  616: \t\t//Debug::log(\"roll: \".$roll);\n  617  \t\t$current += $main;\n  618  \t\tif ($roll <= $current){\n  619: \t\t\t//Debug::log($roll.\", get primary system\");\n  620  \t\t\treturn $this->getPrimaryHitSystem();\n  621  \t\t}\n  ...\n  624  \t\t\t\tif (!$struct->systems[$i]->destroyed){\n  625  \t\t\t\t\t$current += $struct->systems[$i]->getHitChance();\n  626: \t\t\t\t\t//Debug::log(\"current: \".$current);\n  627  \t\t\t\t\tif ($roll <= $current){\n  628: \t\t\t\t\t\t//Debug::log(\"EXTERNAL HIT: \".$struct->systems[$i]->name.\" #\".$struct->systems[$i]->id);\n  629  \t\t\t\t\t\treturn $struct->systems[$i];\n  630  \t\t\t\t\t}\n  ...\n  632  \t\t\t}\n  633  \t\t}\n  634: \t\t//Debug::log(\"ERROR getHitSystem()\");\n  635  \t}\n  636  \n  ...\n  640  \t\t$total = $this->primary->getHitChance();\n  641  \t\t$fraction = round($this->primary->remaining / $this->primary->integrity, 3);\n  642: \t\t//Debug::log(\"fraction:\".$fraction);\n  643  \t\t$valid = array();\n  644  \n  ...\n  652  \n  653  \t\tif (!sizeof($valid)){\n  654: \t\t\t//Debug::log(\"hitting main structure\");\n  655  \t\t\treturn $this->primary;\n  656  \t\t}\n  657  \n  658: \t\t//Debug::log(\"valid:\".sizeof($valid));\n  659  \n  660  \t\tfor ($i = 0; $i < sizeof($valid); $i++){\n  ...\n  663  \t\t$roll = mt_rand(0, $total);\n  664  \t\t$current += $this->primary->getHitChance();\n  665: \t\t//Debug::log(\"roll: \".$roll);\n  666  \n  667  \t\tif ($roll <= $current){\n  668: \t\t\t//Debug::log(\"current: \".$current.\", hitting main structure\");\n  669  \t\t\treturn $this->primary;\n  670  \t\t}\n  671  \t\telse {\n  672: \t\t\t//Debug::log(\"hitting internal\");\n  673  \t\t\tfor ($i = 0; $i < sizeof($valid); $i++){\n  674  \t\t\t\t$current += $valid[$i]->getHitChance();\n  675: \t\t\t\t//Debug::log(\"current: \".$current);\n  676  \t\t\t\tif ($roll <= $current){\n  677: \t\t\t\t\t//Debug::log(\"non primary HIT --- \".$valid[$i]->name.\" #\".$valid[$i]->id);\n  678  \t\t\t\t\treturn $valid[$i];\n  679  \t\t\t\t}\n  ...\n  714  \tpublic function getImpulseProfileMod($fire){\n  715  \t\tif (!$fire->shooter->ship || !$fire->target->ship){\n  716: \t\t\t//Debug::log(\"shooter or target is NOT A SHIP -> no impulse mod\");\n  717  \t\t\treturn 0;\n  718  \t\t}\n  ...\n  764  \tpublic function setFacing(){\n  765  \t\tfor ($i = 0; $i < sizeof($this->actions); $i++){\n  766: \t\t\tif ($this->actions[$i]->type == \"turn\"){\n  767  \t\t\t\t$this->facing += $this->actions[$i]->a;\n  768  \t\t\t}\n  ...\n  775  \t\t}\n  776  \t\t\n  777: \t\t//Debug::log(\"setting facing for: #\".$this->id.\": \".$thia->facing);\n  778  \t}\n  779  \n  ...\n  789  \t\t}\n  790  \n  791: \t\tDebug::log(\"got no DIST set on \".$this->id.\" targeted by #\".$fire->shooter->id);\n  792  \t\t\n  793  \t\t$tPos = $this->getCurrentPosition();\n  ...\n  808  \t\t}\n  809  \n  810: \t\tDebug::log(\"got no ANGLE set on \".$this->id.\" targeted by #\".$fire->shooter->id);\n  811  \t}\n  812  \n  ...\n  818  \t\t$locs = array();\n  819  \t\t$fire->angle = Math::addAngle($this->facing, $fire->angle);\n  820: \t\t//Debug::log(\"angle: \".$fire->angle.\", facing: \".$this->facing.\" => to adjusted: \".$adjusted);\n  821  \t\tfor ($i = 0; $i < sizeof($this->structures); $i++){\n  822  \t\t\tif (Math::isInArc($fire->angle, $this->structures[$i]->start, $this->structures[$i]->end)){\n  ...\n  833  \n  834  \tpublic function testForCrits($turn){\n  835: \t\t//Debug::log(\"= testForCrits for \".$this->name.\", #\".$this->id.\", turn: \".$turn);\n  836  \n  837  \t\t$spike = 0;\n  ...\n  842  \t\t\t\tif ($this->structures[$i]->systems[$j]->destroyed){\n  843  \t\t\t\t\tif (mt_rand(1, 1) && $this->structures[$i]->systems[$j]->isDestroyedThisTurn($turn, 0)){\n  844: \t\t\t\t\t\tDebug::log(\"adding spike #\".$this->id.\"/\".$this->structures[$i]->systems[$j]->id);\n  845  \t\t\t\t\t\t$spike += $this->structures[$i]->systems[$j]->getPowerUsage($turn);\n  846  \t\t\t\t\t}\n  ...\n  861  \n  862  \t\tif ($spike){\n  863: \t\t\tDebug::log(\"potential total power spike for unit #\".$this->id.\": \".$spike);\n  864  \t\t\tfor ($j = 0; $j < sizeof($this->primary->systems); $j++){\n  865: \t\t\t\tif ($this->primary->systems[$j]->name == \"Reactor\"){\n  866  \t\t\t\t\t$this->primary->systems[$j]->applyPowerSpike($turn, $spike);\n  867  \t\t\t\t}\n  ...\n  878  \n  879  \tpublic function getStructureById($id){\n  880: \t\t//Debug::log(\"looking for: \".$id);\n  881  \t\tfor ($i = 0; $i < sizeof($this->structures); $i++){\n  882: \t\t\t//Debug::log(\"now: \".$this->structures[$i]->id);\n  883  \t\t\tif ($this->structures[$i]->id == $id){\n  884  \t\t\t\treturn $this->structures[$i];\n  ...\n  888  \n  889  \tpublic function getBaseSystemById($id){\n  890: \t\t//echo $id.\"</br>\";\n  891  \t\tif ($this->ship){\n  892  \t\t\tfor ($i = 0; $i < sizeof($this->primary->systems); $i++){\n  ...\n  972  \t\tfor ($j = 0; $j < sizeof($this->structures); $j++){\n  973  \t\t\tfor ($k = 0; $k < sizeof($this->structures[$j]->systems); $k++){\n  974: \t\t\t\tif (is_a($this->structures[$j]->systems[$k], \"Hangar\")){\n  975  \t\t\t\t\tcontinue;\n  976  \t\t\t\t}\n  ...\n  983  \tpublic function getArmour(){\n  984  \t\t$data = array(\n  985: \t\t\t\"integrity\" => 0,\n  986: \t\t\t\"negation\" => array()\n  987  \t\t);\n  988  \n  ...\n  990  \n  991  \t\tforeach ($this->structures as $struct){\n  992: \t\t\t$data[\"integrity\"] += $struct->integrity;\n  993: \t\t\t$data[\"negation\"][] = $struct->negation;\n  994  \t\t}\n  995  \t\treturn $data;\n  ...\n 1002  \tpublic function getEP(){\n 1003  \t\tfor ($j = 0; $j < sizeof($this->primary->systems); $j++){\n 1004: \t\t\tif ($this->primary->systems[$j]->name == \"Engine\"){\n 1005  \t\t\t\treturn $this->primary->systems[$j]->output;\n 1006  \t\t\t}\n ....\n 1009  \n 1010  \tpublic function getActiveLocks($turn){\n 1011: \t\t$sensor = $this->getSystemByName(\"Sensor\");\n 1012  \t\t$str = $sensor->getOutput($turn);\n 1013  \t\t$ew = $sensor->ew[sizeof($sensor->ew)-1];\n ....\n 1059          parent::__construct($id, $userid, $available, $status, $destroyed);\n 1060  \t\t$this->hitTable = array(\n 1061: \t\t\t\"Bridge\" => 0.25,\n 1062: \t\t\t\"Engine\" => 0.4,\n 1063: \t\t\t\"LifeSupport\" => 0.6,\n 1064: \t\t\t\"Sensor\" => 0.7,\n 1065: \t\t\t\"Reactor\" => 0.6\n 1066  \t\t);\n 1067  \t}\n ....\n 1075          parent::__construct($id, $userid, $available, $status, $destroyed);\n 1076  \t\t$this->hitTable = array(\n 1077: \t\t\t\"Bridge\" => 0.5,\n 1078: \t\t\t\"Engine\" => 0.55,\n 1079: \t\t\t\"LifeSupport\" => 0.6,\n 1080: \t\t\t\"Sensor\" => 0.8,\n 1081: \t\t\t\"Reactor\" => 0.75\n 1082  \t\t);\n 1083  \t}\n ....\n 1091          parent::__construct($id, $userid, $available, $status, $destroyed);\n 1092  \t\t$this->hitTable = array(\n 1093: \t\t\t\"Bridge\" => 0.55,\n 1094: \t\t\t\"Engine\" => 0.65,\n 1095: \t\t\t\"LifeSupport\" => 0.7,\n 1096: \t\t\t\"Sensor\" => 0.85,\n 1097: \t\t\t\"Reactor\" => 0.8\n 1098  \t\t);\n 1099  \t}\n ....\n 1107          parent::__construct($id, $userid, $available, $status, $destroyed);\n 1108  \t\t$this->hitTable = array(\n 1109: \t\t\t\"Bridge\" => 0.65,\n 1110: \t\t\t\"Engine\" => 0.7,\n 1111: \t\t\t\"LifeSupport\" => 0.8,\n 1112: \t\t\t\"Sensor\" => 1,\n 1113: \t\t\t\"Reactor\" => 0.8\n 1114  \t\t);\n 1115  \t}\n ....\n 1127          parent::__construct($id, $userid, $available, $status, $destroyed);\n 1128  \t\t$this->hitTable = array(\n 1129: \t\t\t\"Bridge\" => 0.7,\n 1130: \t\t\t\"Engine\" => 0.8,\n 1131: \t\t\t\"LifeSupport\" => 1,\n 1132: \t\t\t\"Sensor\" => 1,\n 1133: \t\t\t\"Reactor\" => 0.8\n 1134  \t\t);\n 1135  \t}\n ....\n 1147          parent::__construct($id, $userid, $available, $status, $destroyed);\n 1148  \t\t$this->hitTable = array(\n 1149: \t\t\t\"Bridge\" => 0.85,\n 1150: \t\t\t\"Engine\" => 1,\n 1151: \t\t\t\"LifeSupport\" => 1,\n 1152: \t\t\t\"Sensor\" => 1,\n 1153: \t\t\t\"Reactor\" => 0.9\n 1154  \t\t);\n 1155  \t}\t\n\nC:\\xampp\\htdocs\\fire\\server\\ships\\altarian.php:\n    2  \n    3  class Altarian extends Medium {\n    4: \tpublic $name = \"Altarian\";\n    5: \tpublic $display = \"Altarian\";\n    6: \tpublic $faction = \"Centauri Republic\";\n    7  \tpublic $size = 55;\n    8  \tpublic static $value = 525;\n    .\n   30  \n   31  \t\t$aft = new Structure($this->getId(), $this->id, 150, 210, 550, 16);\n   32: \t\t$aft->systems[] = new Hangar($this->getId(), $this->id, 330, 30, 260, 8, array(\"Sentri\", \"Sitara\"));\n   33  \t\t$structs[] = $aft;\n   34  \n\nC:\\xampp\\htdocs\\fire\\server\\ships\\artemis.php:\n    2  \n    3  class Artemis extends Medium {\n    4: \tpublic $name = \"Artemis\";\n    5: \tpublic $display = \"Artemis\";\n    6: \tpublic $faction = \"Earth Alliance\";\n    7  \tpublic $size = 50;\n    8  \tpublic static $value = 490;\n    .\n   24  \n   25  \t\t$right = new Structure($this->getId(), $this->id, 45, 135, 375, 15);\n   26: \t\t$right->systems[] = new Dual($this->getId(), $this->id, 0, 180, 14, array(\"LightPulse\", \"LightParticleBeam\"));\n   27: \t\t$right->systems[] = new Dual($this->getId(), $this->id, 0, 180, 14, array(\"LightPulse\", \"LightParticleBeam\"));\n   28  \t\t$structs[] = $right;\n   29  \n   ..\n   34  \n   35  \t\t$left = new Structure($this->getId(), $this->id, 225, 315, 375, 15);\n   36: \t\t$left->systems[] = new Dual($this->getId(), $this->id, 180, 360, 14, array(\"LightPulse\", \"LightParticleBeam\"));\n   37: \t\t$left->systems[] = new Dual($this->getId(), $this->id, 180, 360, 14, array(\"LightPulse\", \"LightParticleBeam\"));\n   38  \t\t$structs[] = $left;\n   39  \n\nC:\\xampp\\htdocs\\fire\\server\\ships\\avenger.php:\n    2  \n    3  class Avenger extends Heavy {\n    4: \tpublic $name = \"Avenger\";\n    5: \tpublic $display = \"Avenger Heavvy Carrier\";\n    6: \tpublic $faction = \"Earth Alliance\";\n    7  \tpublic $size = 80;\n    8  \tpublic static $value = 400;\n    .\n   18  \n   19  \t\t$front = new Structure($this->getId(), $this->id, 330, 30, 625, 21);\n   20: \t\t$front->systems[] = new Dual($this->getId(), $this->id, 300, 60, 14, array(\"LightPulse\", \"LightParticleBeam\"));\n   21: \t\t$front->systems[] = new Dual($this->getId(), $this->id, 300, 60, 14, array(\"LightPulse\", \"LightParticleBeam\"));\n   22  \t\t$structs[] = $front;\n   23  \n   24  \t\t$rightTop = new Structure($this->getId(), $this->id, 30, 90, 800, 19);\n   25: \t\t$rightTop->systems[] = new Dual($this->getId(), $this->id, 0, 180, 14, array(\"LightPulse\", \"LightParticleBeam\"));\n   26: \t\t$rightTop->systems[] = new Dual($this->getId(), $this->id, 0, 180, 14, array(\"LightPulse\", \"LightParticleBeam\"));\n   27: \t\t$rightTop->systems[] = new Hangar($this->getId(), $this->id, 30, 150, 800, 12, array(\"Aurora\"));\n   28  \t\t$structs[] = $rightTop;\n   29  \n   30  \t\t$rightBottomm = new Structure($this->getId(), $this->id, 90, 150, 800, 18);\n   31: \t\t$rightBottomm->systems[] = new Dual($this->getId(), $this->id, 0, 180, 14, array(\"LightPulse\", \"LightParticleBeam\"));\n   32: \t\t$rightBottomm->systems[] = new Dual($this->getId(), $this->id, 0, 180, 14, array(\"LightPulse\", \"LightParticleBeam\"));\n   33: \t\t$rightBottomm->systems[] = new Hangar($this->getId(), $this->id, 45, 150, 800, 12, array(\"Aurora\"));\n   34  \t\t$structs[] = $rightBottomm;\n   35  \n   36  \t\t$aft = new Structure($this->getId(), $this->id, 150, 210, 550, 16);\n   37: \t\t$aft->systems[] = new Dual($this->getId(), $this->id, 120, 240, 14, array(\"LightPulse\", \"LightParticleBeam\"));\n   38: \t\t$aft->systems[] = new Dual($this->getId(), $this->id, 120, 240, 14, array(\"LightPulse\", \"LightParticleBeam\"));\n   39  \t\t$structs[] = $aft;\n   40  \n   41  \t\t$leftBottom = new Structure($this->getId(), $this->id, 210, 270, 800, 18);\n   42: \t\t$leftBottom->systems[] = new Dual($this->getId(), $this->id, 180, 360, 14, array(\"LightPulse\", \"LightParticleBeam\"));\n   43: \t\t$leftBottom->systems[] = new Dual($this->getId(), $this->id, 180, 360, 14, array(\"LightPulse\", \"LightParticleBeam\"));\n   44: \t\t$leftBottom->systems[] = new Hangar($this->getId(), $this->id, 210, 330, 800, 12, array(\"Aurora\"));\n   45  \t\t$structs[] = $leftBottom;\n   46  \n   47  \t\t$leftTop = new Structure($this->getId(), $this->id, 270, 330, 800, 19);\n   48: \t\t$leftTop->systems[] = new Dual($this->getId(), $this->id, 180, 360, 14, array(\"LightPulse\", \"LightParticleBeam\"));\n   49: \t\t$leftTop->systems[] = new Dual($this->getId(), $this->id, 180, 360, 14, array(\"LightPulse\", \"LightParticleBeam\"));\n   50: \t\t$leftTop->systems[] = new Hangar($this->getId(), $this->id, 210, 330, 800, 12, array(\"Aurora\"));\n   51  \t\t$structs[] = $leftTop;\n   52  \n\nC:\\xampp\\htdocs\\fire\\server\\ships\\battlecrab.php:\n    2  \n    3  class BattleCrab extends SuperHeavy {\n    4: \tpublic $name = \"BattleCrab\";\n    5: \tpublic $display = \"Battlecrab\";\n    6: \tpublic $faction = \"The Shadows\";\n    7  \tpublic $size = 100;\n    8  \tpublic static $value = 1200;\n    .\n   24  \n   25  \t\t$aft = new Structure($this->getId(), $this->id, 90, 150, 1050, 30);\n   26: \t\t\t$aft->systems[] = new Hangar($this->getId(), $this->id, 150, 210, 350, 6, array(\"Aurora\", \"Thunderbolt\"));\n   27  \t\t$structs[] = $aft;\n   28  \n\nC:\\xampp\\htdocs\\fire\\server\\ships\\darkner.php:\n    2  \n    3  class Darkner extends Light {\n    4: \tpublic $name = \"Darkner\";\n    5: \tpublic $display = \"Darkner\";\n    6: \tpublic $faction = \"Centauri Republic\";\n    7  \tpublic $size = 50;\n    8  \tpublic static $value = 420;\n\nC:\\xampp\\htdocs\\fire\\server\\ships\\demos.php:\n    2  \n    3  class Demos extends Medium {\n    4: \tpublic $name = \"Demos\";\n    5: \tpublic $display = \"Demos\";\n    6: \tpublic $faction = \"Centauri Republic\";\n    7  \tpublic $size = 50;\n    8  \tpublic static $value = 450;\n    .\n   19  \t\t$front = new Structure($this->getId(), $this->id, 300, 60, 400, 17);\n   20  \t\t$front->systems[] = new MediumPlasma($this->getId(), $this->id, 315, 45);\n   21: \t\t$front->systems[] = new MissileLauncher($this->getId(), $this->id, 300, 60,\tarray(array(\"Triarii\", 9, 3), array(\"Javelin\", 9, 3)));\n   22  \t\t$front->systems[] = new MediumPlasma($this->getId(), $this->id, 315, 45);\n   23  \t\t$structs[] = $front;\n\nC:\\xampp\\htdocs\\fire\\server\\ships\\gquan.php:\n    2  \n    3  class GQuan extends Heavy {\n    4: \tpublic $name = \"GQuan\";\n    5: \tpublic $display = \"GQuan\";\n    6: \tpublic $faction = \"Narn Regime\";\n    7  \tpublic $size = 80;\n    8  \tpublic static $value = 875;\n    .\n   34  \t\t$aft->systems[] = new LightIon($this->getId(), $this->id, 90, 270);\n   35  \t\t$aft->systems[] = new LightIon($this->getId(), $this->id, 90, 270);\n   36: \t\t$aft->systems[] = new Hangar($this->getId(), $this->id, 0, 360, 600, 8, array(\"Gorith\", \"Frazi\"));\n   37  \t\t$aft->systems[] = new LightIon($this->getId(), $this->id, 90, 270);\n   38  \t\t$aft->systems[] = new LightIon($this->getId(), $this->id, 90, 270);\n\nC:\\xampp\\htdocs\\fire\\server\\ships\\haven.php:\n    2  \n    3  class Haven extends SuperLight {\n    4: \tpublic $name = \"Haven\";\n    5: \tpublic $display = \"Haven\";\n    6: \tpublic $faction = \"Centauri Republic\";\n    7  \tpublic $size = 35;\n    8  \tpublic static $value = 240;\n\nC:\\xampp\\htdocs\\fire\\server\\ships\\hyperion.php:\n    2  \n    3  class Hyperion extends Heavy {\n    4: \tpublic $name = \"Hyperion\";\n    5: \tpublic $display = \"Hyperion Light Cruiser\";\n    6: \tpublic $faction = \"Earth Alliance\";\n    7  \tpublic $size = 80;\n    8  \tpublic static $value = 850;\n    .\n   19  \t\t$front = new Structure($this->getId(), $this->id, 330, 30, 625, 21);\n   20  \t\t$front->systems[] = new MediumRailGun($this->getId(), $this->id, 300, 60);\n   21: \t\t$front->systems[] = new Dual($this->getId(), $this->id, 240, 120, 14, array(\"LightPulse\", \"LightParticleBeam\"));\n   22: \t\t//$front->systems[] = new Dual($this->getId(), $this->id, 300, 360, 35, array(\"HeavyLaser\", \"HeavyPulse\"));\n   23: \t\t$front->systems[] = new Hangar($this->getId(), $this->id, 330, 30, 400, 10, array(\"Aurora\"));\n   24: \t\t$front->systems[] = new Dual($this->getId(), $this->id, 240, 120, 14, array(\"LightPulse\", \"LightParticleBeam\"));\n   25  \t\t$front->systems[] = new MediumRailGun($this->getId(), $this->id, 300, 60);\n   26  \t\t$structs[] = $front;\n   ..\n   28  \t\t$right = new Structure($this->getId(), $this->id, 30, 150, 800, 19);\n   29  \t\t$right->systems[] = new HeavyLaser($this->getId(), $this->id, 0, 60);\n   30: \t\t$right->systems[] = new Dual($this->getId(), $this->id, 0, 180, 14, array(\"LightPulse\", \"LightParticleBeam\"));\n   31: \t\t$right->systems[] = new Dual($this->getId(), $this->id, 0, 180, 14, array(\"LightPulse\", \"LightParticleBeam\"));\n   32  \t\t$structs[] = $right;\n   33  \n   ..\n   39  \t\t$left = new Structure($this->getId(), $this->id, 210, 330, 800, 19);\n   40  \t\t$left->systems[] = new HeavyLaser($this->getId(), $this->id, 300, 360);\n   41: \t\t$left->systems[] = new Dual($this->getId(), $this->id, 180, 360, 14, array(\"LightPulse\", \"LightParticleBeam\"));\n   42: \t\t$left->systems[] = new Dual($this->getId(), $this->id, 180, 360, 14, array(\"LightPulse\", \"LightParticleBeam\"));\n   43  \t\t$structs[] = $left;\n   44  \n\nC:\\xampp\\htdocs\\fire\\server\\ships\\olympus.php:\n    2  \n    3  class Olympus extends Medium {\n    4: \tpublic $name = \"Olympus\";\n    5: \tpublic $display = \"Olympus\";\n    6: \tpublic $faction = \"Earth Alliance\";\n    7  \tpublic $size = 45;\n    8  \tpublic static $value = 410;\n    .\n   25  \t\t$right = new Structure($this->getId(), $this->id, 60, 180, 300, 13);\n   26  \t\t$right->systems[] = new LightPulse($this->getId(), $this->id, 0, 180);\n   27: \t\t$right->systems[] = new MissileLauncher($this->getId(), $this->id, 270, 90, array(array(\"Naga\", 6, 2)));\n   28  \n   29  \t\t$structs[] = $right;\n   ..\n   31  \t\t$left = new Structure($this->getId(), $this->id, 180, 300, 300, 13);\n   32  \t\t$left->systems[] = new LightPulse($this->getId(), $this->id, 180, 360);\n   33: \t\t$left->systems[] = new MissileLauncher($this->getId(), $this->id, 270, 90, array(array(\"Naga\", 6, 2)));\n   34  \t\t$structs[] = $left;\n   35  \n\nC:\\xampp\\htdocs\\fire\\server\\ships\\omega.php:\n    2  \n    3  class Omega extends SuperHeavy {\n    4: \tpublic $name = \"Omega\";\n    5: \tpublic $display = \"Omega Destroyer\";\n    6: \tpublic $faction = \"Earth Alliance\";\n    7  \tpublic $size = 100;\n    8  \tpublic static $value = 1200;\n    .\n   18  \n   19  \t\t$front = new Structure($this->getId(), $this->id, 330, 30, 1200, 23);\n   20: \t\t$front->systems[] = new Dual($this->getId(), $this->id, 300, 360, 25, array(\"HeavyLaser\", \"HeavyPulse\"));\n   21: \t\t$front->systems[] = new Dual($this->getId(), $this->id, 300, 360, 25, array(\"HeavyLaser\", \"HeavyPulse\"));\n   22: \t\t$front->systems[] = new Hangar($this->getId(), $this->id, 330, 30, 1100, 14, array(\"Aurora\", \"Thunderbolt\"));\n   23: \t\t$front->systems[] = new Dual($this->getId(), $this->id, 0, 60, 25, array(\"HeavyLaser\", \"HeavyPulse\"));\n   24: \t\t$front->systems[] = new Dual($this->getId(), $this->id, 0, 60, 25, array(\"HeavyLaser\", \"HeavyPulse\"));\n   25  \t\t$structs[] = $front;\n   26  \n   27  \t\t$right = new Structure($this->getId(), $this->id, 30, 150, 1500, 21);\n   28: \t\t$right->systems[] = new Dual($this->getId(), $this->id, 0, 180, 14, array(\"LightPulse\", \"LightParticleBeam\"));\n   29: \t\t$right->systems[] = new Dual($this->getId(), $this->id, 0, 180, 14, array(\"LightPulse\", \"LightParticleBeam\"));\n   30: \t\t$right->systems[] = new Dual($this->getId(), $this->id, 0, 180, 14, array(\"LightPulse\", \"LightParticleBeam\"));\n   31: \t\t$right->systems[] = new Dual($this->getId(), $this->id, 0, 180, 14, array(\"LightPulse\", \"LightParticleBeam\"));\n   32: \t\t$right->systems[] = new Dual($this->getId(), $this->id, 0, 180, 14, array(\"LightPulse\", \"LightParticleBeam\"));\n   33: \t\t$right->systems[] = new Dual($this->getId(), $this->id, 0, 180, 14, array(\"LightPulse\", \"LightParticleBeam\"));\n   34  \t\t$structs[] = $right;\n   35  \n   ..\n   42  \n   43  \t\t$left = new Structure($this->getId(), $this->id, 210, 330, 1500, 21);\n   44: \t\t$left->systems[] = new Dual($this->getId(), $this->id, 180, 360, 14, array(\"LightPulse\", \"LightParticleBeam\"));\n   45: \t\t$left->systems[] = new Dual($this->getId(), $this->id, 180, 360, 14, array(\"LightPulse\", \"LightParticleBeam\"));\n   46: \t\t$left->systems[] = new Dual($this->getId(), $this->id, 180, 360, 14, array(\"LightPulse\", \"LightParticleBeam\"));\n   47: \t\t$left->systems[] = new Dual($this->getId(), $this->id, 180, 360, 14, array(\"LightPulse\", \"LightParticleBeam\"));\n   48: \t\t$left->systems[] = new Dual($this->getId(), $this->id, 180, 360, 14, array(\"LightPulse\", \"LightParticleBeam\"));\n   49: \t\t$left->systems[] = new Dual($this->getId(), $this->id, 180, 360, 14, array(\"LightPulse\", \"LightParticleBeam\"));\n   50  \t\t$structs[] = $left;\n   51  \t\t\n\nC:\\xampp\\htdocs\\fire\\server\\ships\\primus.php:\n    2  \n    3  class Primus extends SuperHeavy {\n    4: \tpublic $name = \"Primus\";\n    5: \tpublic $display = \"Primus\";\n    6: \tpublic $faction = \"Centauri Republic\";\n    7  \tpublic $size = 100;\n    8  \tpublic static $value = 1080;\n    .\n   29  \t\t$right->systems[] = new LightIon($this->getId(), $this->id, 300, 120);\n   30  \t\t$right->systems[] = new LightIon($this->getId(), $this->id, 300, 120);\n   31: \t\t$right->systems[] = new Hangar($this->getId(), $this->id, 30, 90, 300, 9, array(\"Sentri\", \"Sitara\"));\n   32  \t\t$structs[] = $right;\n   33  \n   ..\n   42  \t\t$left->systems[] = new LightIon($this->getId(), $this->id, 240, 60);\n   43  \t\t$left->systems[] = new LightIon($this->getId(), $this->id, 240, 60);\n   44: \t\t$left->systems[] = new Hangar($this->getId(), $this->id, 270, 330, 300, 9, array(\"Sentri\", \"Sitara\"));\n   45  \t\t$structs[] = $left;\n   46  \t\t\n\nC:\\xampp\\htdocs\\fire\\server\\ships\\saggitarius.php:\n    2  \n    3  class Saggitarius extends Medium {\n    4: \tpublic $name = \"Saggitarius\";\n    5: \tpublic $display = \"Saggitarius Missile Destroyer\";\n    6: \tpublic $faction = \"Earth Alliance\";\n    7  \tpublic $size = 60;\n    8  \tpublic static $value = 400;\n    .\n   18  \t\t\n   19  \t\t$front = new Structure($this->getId(), $this->id, 330, 30, 375, 17);\n   20: \t\t$front->systems[] = new Dual($this->getId(), $this->id, 300, 60, 14, array(\"LightPulse\", \"LightParticleBeam\"));\n   21: \t\t$front->systems[] = new MissileLauncher($this->getId(), $this->id, 300, 60, array(array(\"Cyclops\", 20, 4), array(\"Titan\", 15, 3)));\n   22: \t\t$front->systems[] = new Dual($this->getId(), $this->id, 300, 60, 14, array(\"LightPulse\", \"LightParticleBeam\"));\n   23  \t\t$structs[] = $front;\n   24  \n   25  \t\t$right = new Structure($this->getId(), $this->id, 30, 150, 450, 17);\n   26: \t\t$right->systems[] = new MissileLauncher($this->getId(), $this->id, 0, 120, array(array(\"Naga\", 15, 3), array(\"Cyclops\", 12, 2)));\n   27: \t\t$right->systems[] = new MissileLauncher($this->getId(), $this->id, 0, 120, array(array(\"Naga\", 15, 3), array(\"Cyclops\", 12, 2)));\n   28  \t\t$structs[] = $right;\n   29  \n   30  \t\t$aft = new Structure($this->getId(), $this->id, 150, 210, 325, 15);\n   31: \t\t$aft->systems[] = new Dual($this->getId(), $this->id, 120, 240, 14, array(\"LightPulse\", \"LightParticleBeam\"));\n   32: \t\t$aft->systems[] = new Dual($this->getId(), $this->id, 120, 240, 14, array(\"LightPulse\", \"LightParticleBeam\"));\n   33  \t\t$structs[] = $aft;\n   34  \n   35  \t\t$left = new Structure($this->getId(), $this->id, 210, 330, 450, 17);\n   36: \t\t$left->systems[] = new MissileLauncher($this->getId(), $this->id, 240, 360, array(array(\"Naga\", 15, 3), array(\"Cyclops\", 12, 2)));\n   37: \t\t$left->systems[] = new MissileLauncher($this->getId(), $this->id, 240, 360, array(array(\"Naga\", 15, 3), array(\"Cyclops\", 12, 2)));\n   38  \t\t$structs[] = $left;\n   39  \t\t\n\nC:\\xampp\\htdocs\\fire\\server\\ships\\sharlin.php:\n    2  \n    3  class Sharlin extends UltraHeavy {\n    4: \tpublic $name = \"Sharlin\";\n    5: \tpublic $display = \"Sharlin\";\n    6: \tpublic $faction = \"Minbari Federation\";\n    7  \tpublic $size = 120;\n    8  \tpublic static $value = 200;\n    .\n   51  \t\t\t$aft->systems[] = new FusionCannon($this->getId(), $this->id, 0, 180);\n   52  \t\t\t$aft->systems[] = new NeutronLaser($this->getId(), $this->id, 120, 240);\n   53: \t\t\t$aft->systems[] = new Hangar($this->getId(), $this->id, 140, 220, 1100, 15, array(\"Nial\"));\n   54  \t\t\t$aft->systems[] = new NeutronLaser($this->getId(), $this->id, 120, 240);\n   55  \t\t$structs[] = $aft;\n\nC:\\xampp\\htdocs\\fire\\server\\ships\\tethys.php:\n    2  \n    3  class Tethys extends Light {\n    4: \tpublic $name = \"Tethys\";\n    5: \tpublic $display = \"Tethys\";\n    6: \tpublic $faction = \"Earth Alliance\";\n    7  \tpublic $size = 35;\n    8  \tpublic static $value = 220;\n\nC:\\xampp\\htdocs\\fire\\server\\ships\\tinashi.php:\n    2  \n    3  class Tinashi extends Medium {\n    4: \tpublic $name = \"Tinashi\";\n    5: \tpublic $display = \"Tinashi\";\n    6: \tpublic $faction = \"Minbari Federation\";\n    7  \tpublic $size = 70;\n    8  \tpublic static $value = 875;\n\nC:\\xampp\\htdocs\\fire\\server\\ships\\vorchan.php:\n    2  \n    3  class Vorchan extends Light {\n    4: \tpublic $name = \"Vorchan\";\n    5: \tpublic $display = \"Vorchan\";\n    6: \tpublic $faction = \"Centauri Republic\";\n    7  \tpublic $size = 35;\n    8  \tpublic static $value = 360;\n    .\n   18  \n   19  \t\t$front = new Structure($this->getId(), $this->id, 300, 60, 225, 14);\n   20: \t\t$front->systems[] = new MissileLauncher($this->getId(), $this->id, 300, 60,\tarray(array(\"Hasta\", 8, 4)));\n   21  \t\t$front->systems[] = new MediumIon($this->getId(), $this->id, 300, 60);\n   22  \t\t$structs[] = $front;\n\nC:\\xampp\\htdocs\\fire\\server\\ships\\whitestar.php:\n    2  \n    3  class WhiteStar extends Light {\n    4: \tpublic $name = \"WhiteStar\";\n    5: \tpublic $display = \"White Star\";\n    6: \tpublic $faction = \"Minbari Federation\";\n    7  \tpublic $size = 50;\n    8  \tpublic static $value = 600;\n\nC:\\xampp\\htdocs\\fire\\server\\systems\\nonweapon.php:\n    2  \n    3  class PrimarySystem extends System {\n    4: \tpublic $name = \"PrimarySystem\";\n    5: \tpublic $display = \"PrimarySystem\";\n    6  \tpublic $powerReq = 0;\n    7  \tpublic $internal = 1;\n    .\n   24  \n   25  \t\t$mod = 1;\n   26: \t\t$mod += $this->getBoostEffect(\"Output\") * $this->getBoostLevel($turn);\n   27: \t\t$mod -= $this->getCritMod(\"Output\", $turn);\n   28  \n   29: \t\t//Debug::log(\"ship: #\".$this->parentId.\", output: \".floor($this->output*$mod));\n   30  \t\treturn round($this->output * $mod);\n   31  \t}\n   ..\n   39  \t\t//$possible = $this->getValidEffects();\n   40  \n   41: \t\tDebug::log(\"determineCrit for \".$this->display.\" #\".$this->id.\" on unit #\".$this->parentId.\", dmg: \".$dmg);\n   42  \n   43  \t\tif ($dmg > 50 && mt_rand(0, 1)){\n   44: \t\t\tDebug::log(\"critical hit, disabling primary system \".get_class($this));\n   45  \t\t\t$this->crits[] = new Crit(\n   46: \t\t\t\tsizeof($this->crits)+1, $this->parentId, $this->id, $turn, \"Disabled\", 1, 0, 1\n   47  \t\t\t);\n   48  \t\t}\n   ..\n   54  \t\t//$id, $shipid, $systemid, $turn, $type, $duration, $value, $new){\n   55  \t\t$this->crits[] = new Crit(\n   56: \t\t\tsizeof($this->crits)+1, $this->parentId, $this->id, $turn, \"Output\", 0, $mod, 1\n   57  \t\t);\n   58: \t\tDebug::log(\"applying crit: \".$this->crits[sizeof($this->crits)-1]->type.\" / \".$this->crits[sizeof($this->crits)-1]->value);\n   59  \t}\n   60  }\n   61  \n   62  class Bridge extends PrimarySystem {\n   63: \tpublic $name = \"Bridge\";\n   64: \tpublic $display = \"Bridge\";\n   65  \n   66  \tfunction __construct($id, $parentId, $mass, $output = 0, $effiency = 0, $destroyed = 0){\n   ..\n   78  \n   79  class Reactor extends PrimarySystem {\n   80: \tpublic $name = \"Reactor\";\n   81: \tpublic $display = \"Reactor\";\n   82  \tpublic $powerReq = 0;\n   83  \n   ..\n   91  \n   92  \tpublic function applyPowerSpike($turn, $spike){\n   93: \t\tDebug::log(\"applyPowerSpike to #\".$this->id.\", spike: \".$spike);\n   94  \t\t$mod = round($spike / $this->output, 2);\n   95  \t\t//d, $shipid, $systemid, $turn, $type, $duration, $value, $new){\n   96: \t\t$this->crits[] = new Crit(sizeof($this->crits)+1, $this->parentId, $this->id, $turn, \"Output\", 0, $mod, 1);\t\n   97  \n   98  \t}\n   ..\n  100  \n  101  class Engine extends PrimarySystem {\n  102: \tpublic $name = \"Engine\";\n  103: \tpublic $display = \"Engine\";\n  104  \n  105  \tfunction __construct($id, $parentId, $mass, $output = 0, $destroyed = 0){\n  106  \t\t$this->powerReq = ceil($output / 20);\n  107: \t\t$this->boostEffect[] = new Effect(\"Output\", 0.08);\n  108          parent::__construct($id, $parentId, $mass, $output, ceil($this->powerReq/3), $destroyed);\n  109      }\n  ...\n  111  \n  112  class Sensor extends PrimarySystem {\n  113: \tpublic $name = \"Sensor\";\n  114: \tpublic $display = \"Sensor\";\n  115  \tpublic $ew = array();\n  116  \n  117  \tfunction __construct($id, $parentId, $mass, $output = 0, $effiency, $destroyed = 0){\n  118  \t\t$this->powerReq = floor($output/60);\n  119: \t\t$this->boostEffect[] = new Effect(\"Output\", 0.10);\n  120: \t\t//$this->modes = array(\"Lock\", \"Scramble\", \"Sweep\", \"Mask\");\n  121  \t\t//$this->states = array(0, 0, 0, 0);\n  122: \t\t$this->modes = array(\"Lock\", \"Scramble\");\n  123  \t\t$this->states = array(0, 0);\n  124          parent::__construct($id, $parentId, $mass, $output, ceil($this->powerReq/3), $destroyed);\n  ...\n  164  \n  165  class LifeSupport extends PrimarySystem {\n  166: \tpublic $name = \"LifeSupport\";\n  167: \tpublic $display = \"Life Support\";\n  168  \n  169  \tfunction __construct($id, $parentId, $mass, $output = 0, $effiency = 0, $destroyed = 0){\n  ...\n  173  \n  174  class Hangar extends Weapon {\n  175: \tpublic $type = \"Hangar\";\n  176: \tpublic $name = \"Hangar\";\n  177: \tpublic $display = \"Hangar\";\n  178  \tpublic $loads = array();\n  179  \tpublic $reload = 1;\n  ...\n  190  \t\t\t$fighter = new $loads[$i](0,0);\n  191  \t\t\t$this->loads[] = array(\n  192: \t\t\t\t\"name\" => $loads[$i],\n  193: \t\t\t\t\"amount\" => 0,\n  194: \t\t\t\t\"cost\" => $fighter->value,\n  195: \t\t\t\t\"mass\" => $fighter->mass,\n  196: \t\t\t\t\"integrity\" => $fighter->integrity,\n  197: \t\t\t\t\"launch\" => 0\n  198  \t\t\t);\n  199  \t\t}\n  ...\n  211  \t\tfor ($i = 0; $i < sizeof($dbLoad); $i++){\n  212  \t\t\tfor ($j = 0; $j < sizeof($this->loads); $j++){\n  213: \t\t\t\tif ($dbLoad[$i][\"name\"] == $this->loads[$j][\"name\"]){\n  214: \t\t\t\t\t$this->loads[$j][\"amount\"] = $dbLoad[$i][\"amount\"];\n  215  \t\t\t\t\tbreak; \n  216  \t\t\t\t}\n\nC:\\xampp\\htdocs\\fire\\server\\systems\\structure.php:\n   53  \n   54  class Primary {\n   55: \tpublic $name = \"Main Structure\";\n   56  \tpublic $id;\n   57  \tpublic $parentId;\n   ..\n   90  \n   91  \t\tif (!$this->destroyed && $this->remaining < 1){\n   92: \t\t\t//Debug::log(\"primary from units  #\".$this->parentId.\" below 0\");\n   93  \t\t\t$this->destroyed = 1;\n   94  \t\t}\n   ..\n  180  \t\t}\n  181  \t\tfor ($i = 0; $i < sizeof($this->crits); $i++){\n  182: \t\t\tif ($this->crits[$i]->type == \"Disabled\"){\n  183  \t\t\t\t$this->destroyed = true;\n  184  \t\t\t}\n  ...\n  208  \tpublic function getValidEffects(){\n  209  \t\treturn array(// attr, %-tresh, duration, modifier\n  210: \t\t\tarray(\"Disabled\", 75, 0, 0)\n  211  \t\t);\n  212  \t}\n  ...\n  218  \tpublic function determineCrit($old, $new, $turn){\n  219  \t\t$dmg = ($old + $new) / $this->integrity * 100;\n  220: \t\t//Debug::log(\"checking crit for \".get_class($this));\n  221  \t\t$crits = $this->getValidEffects();\n  222  \t\t$valid = array();\n  ...\n  230  \t\tif (sizeof($valid)){\n  231  \t\t\tif ($dmg > $valid[0][1] && mt_rand(0, floor($dmg)) > $valid[0][1]/2) {\n  232: \t\t\t\tDebug::log(\"Droput!\");\n  233  \t\t\t\t$this->crits[] = new Crit(\n  234  \t\t\t\t\tsizeof($this->crits)+1,\n\nC:\\xampp\\htdocs\\fire\\server\\systems\\system.php:\n   39  \n   40  \tpublic function setState($turn){\n   41: \t\t//Debug::log(\"set state system: \".$this->parentId);\n   42  \t\t$this->isDisabled($turn);\n   43  \t\t$this->isDestroyed();\n   ..\n  107  \t\t\treturn false;\n  108  \t\t}\n  109: \t\telse if ($this->crits[sizeof($this->crits)-1]->type == \"disabled\"){\n  110  \t\t\tif ($turn <= $this->crits[sizeof($this->crits)-1]->turn + $this->crits[sizeof($this->crits)-1]->duration){\n  111  \t\t\t\t$this->disabled = true;\n  ...\n  119  \t\tfor ($i = 0; $i < sizeof($this->boostEffect); $i++){\n  120  \t\t\tif ($this->boostEffect[$i]->type == $type){\n  121: \t\t\t\t//Debug::log(\"return:\".$this->boostEffect[$i]->value/100);\n  122  \t\t\t\treturn $this->boostEffect[$i]->value;\n  123  \t\t\t}\n  ...\n  198  \tpublic function getValidEffects(){\n  199  \t\treturn array(// attr, %-tresh, duration, modifier\n  200: \t\t\tarray(\"Disabled\", 80, 1, 0),\n  201: \t\t\tarray(\"Damage\", 30, 0, 0),\n  202: \t\t\tarray(\"Accuracy\", 30, 0, 0)\n  203  \t\t);\n  204  \t}\n  ...\n  209  \n  210  \n  211: \t\tDebug::log(\"determineCrit for \".$this->display.\" #\".$this->id.\" on unit #\".$this->parentId.\", dmg: \".$dmg.\"%\");\n  212  \n  213  \t\t$mod = $this->getCritModMax($dmg);\n  ...\n  224  \t\t\t\tsizeof($this->crits)+1, $this->parentId, $this->id, $turn, $possible[$i][0], $duration, $mod, 1\n  225  \t\t\t);\n  226: \t\t\tDebug::log(\"applying crit: \".$this->crits[sizeof($this->crits)-1]->type.\" / \".$this->crits[sizeof($this->crits)-1]->value);\n  227  \n  228  \t\t}\n\nC:\\xampp\\htdocs\\fire\\server\\systems\\weapon.php:\n   41  \t\n   42  \tpublic function getTraverseMod($fire){\n   43: \t\t//Debug::log(\"this: \".$this->traverse);\n   44: \t\t//Debug::log(\"target: \".$fire->target->traverse);\n   45  \t\treturn max(0, $this->traverse - $fire->target->traverse);\n   46  \t}\n   ..\n   49  \t\t$armourDmg = 0;\n   50  \t\t$structDmg = 0;\n   51: \t\t$notes = \"\";\n   52  \n   53  \t\tif ($totalDmg <= $negation){ \n   54: \t\t\t$notes = \"block\";\n   55  \t\t\t$armourDmg = round($totalDmg/2);\n   56  \t\t}\n   57  \t\telse {\n   58: \t\t\t$notes = \"pen\";\n   59  \t\t\t$armourDmg = round(min($totalDmg, $negation));\n   60  \t\t\t$structDmg = round($totalDmg - $armourDmg);\n   ..\n   72  \t\t$totalDmg = $this->getTotalDamage($fire);\n   73  \t\t$remInt = $system->getRemainingIntegrity();\n   74: \t\tDebug::log(\"doDamage, weapon: \".(get_class($this)).\", target: \".$fire->target->id.\"/\".$system->id.\"/\".get_class($system).\", totalDmg: \".$totalDmg.\", remaining: \".$remInt);\n   75  \n   76  \t\t$negation = $fire->target->getArmourValue($fire, $system);\n   ..\n   86  \t\t\t\t$overkill = abs($remInt - $dmg->structDmg);\n   87  \t\t\t\t$dmg->structDmg = $remInt;\n   88: \t\t\t\tDebug::log(\" => OVERKILL ship target system \".$name.\" #\".$system->id.\" was destroyed, rem: \".$remInt.\", doing: \".$dmg->structDmg.\", OK for: \".$overkill.\" dmg\");\n   89  \t\t\t}\n   90  \t\t\telse {\n   91: \t\t\t\tDebug::log(\" => OVERKILL non-ship target system \".$name.\" #\".$system->id.\" was destroyed, rem: \".$remInt.\", doing: \".$dmg->structDmg);\n   92  \t\t\t}\n   93  \t\t}\n   ..\n  104  \t\tif (!$fire->dist){return 0;}\n  105  \t\tif ($fire->shooter->flight){\n  106: \t\t\t//Debug::log(\"fire id #\".$fire->id.\" dist: \".$fire->dist);\n  107  \t\t}\n  108  \t\treturn ceil($this->accDecay * $fire->weapon->getAccuracyMod($fire) * $fire->dist / 1000);\n  ...\n  111  \tpublic function getAccuracyMod($fire){\n  112  \t\t$mod = 1;\n  113: \t\t$mod += $this->getCritMod(\"Accuracy\", $fire->turn);\n  114: \t\t$mod -= $this->getBoostEffect(\"Accuracy\")* $this->getBoostLevel($fire->turn);\n  115  \n  116: \t\tif ($mod != 1){Debug::log(\"weapon id: \".$this->id.\", RANGE LOSS mod: \".$mod);}\n  117  \t\treturn $mod;\n  118  \t}\n  ...\n  129  \t\t$mod = 1;\n  130  \n  131: \t\t$crit = $this->getCritMod(\"Damage\", $fire->turn);\n  132: \t\t$boost = $this->getBoostEffect(\"Damage\") * $this->getBoostLevel($fire->turn);\n  133  \n  134  \t\t$mod = $mod + $crit + $boost;\n  135: \t\tif ($mod != 1){Debug::log(get_class($this).\", weapon id: \".$this->id.\", DAMAGE mod: \".($crit + $boost ).\" (crits: \".$crit.\", boost: \".$boost.\")\");\n  136  \t\t}\n  137  \t\treturn $mod;\n\nC:\\xampp\\htdocs\\fire\\server\\systems\\weapons\\ammo.php:\n   16  \tpublic function getValidEffects(){\n   17  \t\treturn array(// attr, %-tresh, duration, modifier\n   18: \t\t\tarray(\"Disabled\", 80, 0, 0)\n   19  \t\t);\n   20  \t}\n   ..\n   22  \tpublic function jsonSerialize(){\n   23  \t\treturn array(\n   24:         \t\"id\" => $this->id,\n   25:         \t\"name\" => $this->name,\n   26:         \t\"display\" => $this->display,\n   27:         \t\"type\" => $this->type,\n   28:         \t\"minDmg\" => $this->minDmg,\n   29:         \t\"maxDmg\" => $this->maxDmg,\n   30:         \t\"Thrust\" => $this->impulse,\n   31:         \t\"integrity\" => $this->integrity,\n   32:         \t\"negation\" => $this->negation,\n   33:         \t\"mass\" => $this->mass,\n   34:         \t\"damages\" => $this->damages,\n   35:         \t\"crits\" => $this->crits,\n   36:         \t\"destroyed\" => $this->destroyed,\n   37:         \t\"fc\" => $this->fc,\n   38:         \t\"fireOrders\" => $this->fireOrders\n   39          );\n   40      }\n   ..\n   48  class Warhead extends Weapon {\n   49  \tpublic $priority = 10;\n   50: \tpublic $type = \"explosive\";\n   51  \n   52  \tfunction __construct($parentId, $id, $minDmg, $maxDmg, $traverse){\n   ..\n   68  \n   69  class Hasta extends Missile {\n   70: \tpublic $name = \"Hasta\";\n   71: \tpublic $display = \"Light Antifighter Missiles\";\n   72  \tpublic $minDmg = 18;\n   73  \tpublic $maxDmg = 24;\n   ..\n   82  \n   83  class Javelin extends Missile {\n   84: \tpublic $name = \"Javelin\";\n   85: \tpublic $display = \"Multirole Missiles\";\n   86  \tpublic $minDmg = 33;\n   87  \tpublic $maxDmg = 45;\n   ..\n   96  \n   97  class Triarii extends Missile {\n   98: \tpublic $name = \"Triarii\";\n   99: \tpublic $display = \"Heavy Multirole Missiles\";\n  100  \tpublic $minDmg = 41;\n  101  \tpublic $maxDmg = 53;\n  ...\n  110  \n  111  class Vanguard extends Missile {\n  112: \tpublic $name = \"Vanguard\";\n  113: \tpublic $display = \"Light Interceptor Missiles\";\n  114  \tpublic $minDmg = 9;\n  115  \tpublic $maxDmg = 12;\n  ...\n  124  \n  125  class Needle extends Missile {\n  126: \tpublic $name = \"Needle\";\n  127: \tpublic $display = \"Antifighter Missiles\";\n  128  \tpublic $minDmg = 18;\n  129  \tpublic $maxDmg = 24;\n  ...\n  138  \n  139  class Naga extends Missile {\n  140: \tpublic $name = \"Naga\";\n  141: \tpublic $display = \"Multirole Missiles\";\n  142  \tpublic $minDmg = 33;\n  143  \tpublic $maxDmg = 45;\n  ...\n  152  \n  153  class Cyclops extends Missile {\n  154: \tpublic $name = \"Cyclops\";\n  155: \tpublic $display = \"Light Antiship Missiles\";\n  156  \tpublic $minDmg = 55;\n  157  \tpublic $maxDmg = 76;\n  ...\n  166  \n  167  class Titan extends Missile {\n  168: \tpublic $name = \"Titan\";\n  169: \tpublic $display = \"Heavy Antiship Missiles\";\n  170  \tpublic $minDmg = 78;\n  171  \tpublic $maxDmg = 96;\n\nC:\\xampp\\htdocs\\fire\\server\\systems\\weapons\\area.php:\n    2  \n    3  class Area extends Weapon {\n    4: \tpublic $type = \"Area\";\n    5: \tpublic $animation = \"area\";\n    6  \tpublic $priority = 12;\n    7  \n    .\n   11  \n   12  \tpublic function doDamage($fire, $roll, $system){\n   13: \t\tDebug::log(\"doDamage, weapon: \".get_class($this).\", target: \".$fire->target->id.\"/\".$system->id);\n   14  \n   15  \t\tif ($system->destroyed){\n   16: \t\t\tDebug::log(\"multi disable, return\");\n   17  \t\t\treturn;\n   18  \t\t}\n   ..\n   21  \n   22  class EnergyMine extends Area {\n   23: \tpublic $name = \"EnergyMine\";\n   24: \tpublic $display = \"EnergyMine\";\n   25  \tpublic $minDmg = 6;\n   26  \tpublic $maxDmg = 9;\n   27  \tpublic $accDecay = 100;\n   28  \tpublic $shots = 5;\n   29: \tpublic $animColor = \"lightBlue\";\n   30  \tpublic $projSize = 2;\n   31  \tpublic $projSpeed = 8;\n\nC:\\xampp\\htdocs\\fire\\server\\systems\\weapons\\dual.php:\n    2  \n    3  class Dual extends Weapon {\n    4: \tpublic $type = \"Dual\";\n    5: \tpublic $display = \"Combo System\";\n    6  \tpublic $modes = array();\n    7  \tpublic $states = array();\n    .\n   23  \n   24  \tpublic function setState($turn){\n   25: \t\t//Debug::log(\"setState Dual\");\n   26  \t\tparent::setState($turn);\n   27  \t\t$this->setActiveSystem($turn);\n   ..\n   32  \n   33  \tpublic function setActiveSystem($turn){\n   34: \t\t//Debug::log(\"setActiveSystem\");\n   35  \t\tfor ($i = sizeof($this->powers)-1; $i >= 0; $i--){\n   36  \t\t\tif ($this->powers[$i]->type < 0){\n   37  \t\t\t\tif ($this->powers[$i]->turn == $turn || $this->powers[$i]->turn == $turn-1){\n   38  \t\t\t\t\t$this->states[abs($this->powers[$i]->type)-1] = 1;\n   39: \t\t\t\t\t//Debug::log(\"setting active\");\n   40  \t\t\t\t\treturn;\n   41  \t\t\t\t}\n   ..\n   48  \n   49  \tpublic function getActiveSystem(){\n   50: \t\t//echo \"getActiveSystem \".$this->parentId.\"/\".$this->id.\"</br>\";\n   51: \t\t//var_export($this->states); echo \"<br><br>\";\n   52: \t\t//var_export($this->powers);echo \"<br><br>\";\n   53  \t\tfor ($i = 0; $i < sizeof($this->states); $i++){\n   54  \t\t\tif ($this->states[$i]){\n   55: \t\t\t\t//echo \"returning </br>\";\n   56  \t\t\t\treturn $this->weapons[$i];\n   57  \t\t\t}\n   58  \t\t}\n   59: \t\tDebug::log(\"ERROR - \".$this->parentId.\"/\".$this->id.\" CANT RETURN ACTIVE WEAPON\");\n   60  \t}\n   61  \n   ..\n   73  \n   74  class DualPulseIon extends Weapon {\n   75: \tpublic $type = \"Dual\";\n   76: \tpublic $name = \"\";\n   77: \tpublic $display = \"\";\n   78: \tpublic $modes = array(\"LightPulse\", \"LightParticleBeam\", \"HeavyLaser\");\n   79  \tpublic $states = array(0, 0, 0);\n   80  \tpublic $weapons = array();\n\nC:\\xampp\\htdocs\\fire\\server\\systems\\weapons\\em.php:\n    2  \n    3  class EM extends Weapon {\n    4: \tpublic $type = \"EM\";\n    5: \tpublic $animation = \"beam\";\n    6  \tpublic $beamWidth;\n    7  \tpublic $priority = 12;\n    .\n   10  \tfunction __construct($id, $parentId, $start, $end, $output = 0, $effiency, $destroyed = 0){\n   11          parent::__construct($id, $parentId, $start, $end, $output, $destroyed);\n   12: \t\t$this->boostEffect[] = new Effect(\"Damage\", 0.20);\n   13  \t}\n   14  \n   15  \tpublic function doDamage($fire, $roll, $system){\n   16: \t\tDebug::log(\"doDamage, weapon: \".get_class($this).\", target: \".$fire->target->id.\"/\".$system->id);\n   17  \n   18  \t\tif ($system->destroyed){\n   19: \t\t\tDebug::log(\"multi disable, return\");\n   20  \t\t\treturn;\n   21  \t\t}\n   ..\n   25  \t\t$effect = false;\n   26  \n   27: \t\t$print = (\"doing: \".$totalDmg.\" vs negation: \".$negation. \" - \");\n   28  \t\tif ($totalDmg > $negation *2){\n   29  \t\t\t$effect = true;\n   30: \t\t\t$print .= (\"dmg > neg*2\");\n   31  \t\t}\n   32  \t\telse if ($totalDmg > $negation && !mt_rand(0, 1)){\n   33  \t\t\t$effect = true;\n   34: \t\t\t$print .= (\"dmg > neg and 50 %\");\n   35  \t\t}\n   36  \t\telse if ($totalDmg > $negation/2 && !mt_rand(0, 4)){\n   37  \t\t\t$effect = true;\n   38: \t\t\t$print .= (\"dmg > neg/2 and 33%\");\n   39  \t\t}\n   40  \t\telse {\n   41: \t\t\t//$print .= (\"dmg < neg/2 - deflected\");\n   42  \t\t}\n   43  \n   ..\n   46  \t\tif ($effect){\n   47  \t\t\tif ($fire->target->flight || $fire->target->salvo){\n   48: \t\t\t\t$system->crits[] = new Crit(sizeof($system->crits)+1, $system->parentId, $system->id, $fire->turn, \"Disabled\", 0, 0, 1);\n   49  \t\t\t\t$system->destroyed = true;\n   50  \t\t\t}\n   51: \t\t\telse if (is_a($system, \"Primary\")){\n   52: \t\t\t\t$reactor = $fire->target->getSystemByName(\"Reactor\");\n   53: \t\t\t\t$reactor->crits[] = new Crit(sizeof($reactor->crits)+1, $reactor->parentId, $reactor->id, $fire->turn, \"Output\", 1, 0.1, 1);\n   54  \t\t\t}\n   55  \t\t\telse if ($system->weapon && !$system->isDisabled($fire->turn)){\n   56: \t\t\t\t$system->crits[] = new Crit(sizeof($system->crits)+1, $system->parentId, $system->id, $fire->turn, \"Disabled\", 1, 0, 1);\n   57  \t\t\t\t$system->disabled = true;\n   58  \t\t\t}\n   ..\n   62  \n   63  class EMPulseCannon extends EM {\n   64: \tpublic $name = \"EMPulseCannon\";\n   65: \tpublic $display = \"EM Pulse Cannon\";\n   66  \tpublic $minDmg = 6;\n   67  \tpublic $maxDmg = 9;\n   68  \tpublic $accDecay = 200;\n   69  \tpublic $shots = 5;\n   70: \tpublic $animColor = \"lightBlue\";\n   71  \tpublic $projSize = 2;\n   72  \tpublic $projSpeed = 8;\n\nC:\\xampp\\htdocs\\fire\\server\\systems\\weapons\\laser.php:\n    2  \n    3  class Laser extends Weapon {\n    4: \tpublic $type = \"Laser\";\n    5: \tpublic $animation = \"beam\";\n    6  \tpublic $beamWidth;\n    7  \tpublic $priority = 2;\n    .\n   10  \tfunction __construct($id, $parentId, $start, $end, $output = 0, $effiency, $destroyed = 0){\n   11          parent::__construct($id, $parentId, $start, $end, $output, $destroyed);\n   12: \t\t$this->boostEffect[] = new Effect(\"Damage\", 0.20);\n   13  \t}\n   14  \t\n   ..\n   22  \t\t$mod = 1-($dist * $this->dmgLoss / 10000);\n   23  \n   24: \t\tDebug::log(get_class($this).\", weapon id: \".$this->id.\", RANGE DMG mod: \".$mod);\n   25  \n   26  \n   ..\n   30  \tpublic function doDamage($fire, $roll, $system){\n   31  \t\t$totalDmg = $this->getTotalDamage($fire);\n   32: \t\tDebug::log(\"doDamage, weapon: \".get_class($this).\", target: \".$fire->target->id.\" for \".$totalDmg.\" dmg\");\n   33: \t\t$print = \"hitting --- \";\n   34  \t\tif ($totalDmg <= 0){\n   35  \t\t\treturn;\n   ..\n   40  \t\tfor ($j = 0; $j < $this->rakes; $j++){\n   41  \t\t\t$system = $fire->target->getHitSystem($fire);\n   42: \t\t\t$print .= \" \".get_class($system).\": \".$rake.\"dmg, \";\n   43  \t\t\t$destroyed = false;\n   44  \t\t\t$remInt = $system->getRemainingIntegrity();\n   ..\n   51  \t\t\t\t$name = get_class($system);\n   52  \t\t\t\t$overkill = (abs($remInt - $dmg->structDmg));\n   53: \t\t\t\tDebug::log(\" => target system \".$name.\" #\".$system->id.\" was destroyed, rem: \".$remInt.\", doing: \".$dmg->structDmg.\", OK for: \".$overkill.\" dmg\");\n   54  \t\t\t\t$dmg->structDmg = $remInt;\n   55  \t\t\t}\n   ..\n   68  \n   69  class LightParticleBeam extends Laser {\n   70: \tpublic $name = \"LightParticleBeam\";\n   71: \tpublic $display = \"38mm Particle Beam\";\n   72: \tpublic $animColor = \"blue\";\n   73  \tpublic $rakeTime = 22;\n   74  \tpublic $beamWidth = 1;\n   ..\n   90  \tfunction __construct($id, $parentId, $start, $end, $output = 0, $destroyed = false){\n   91          parent::__construct($id, $parentId, $start, $end, $output, $destroyed);\n   92: \t\t$this->boostEffect[] = new Effect(\"Accuracy\", 0.20);\n   93  \t}\n   94  }\n   95  \n   96  class LightLaser extends Laser {\n   97: \tpublic $name = \"LightLaser\";\n   98: \tpublic $display = \"88mm 'Light' Laser\";\n   99: \tpublic $animColor = \"red\";\n  100  \tpublic $rakeTime = 40;\n  101  \tpublic $beamWidth = 2;\n  ...\n  120  \n  121  class MediumLaser extends Laser {\n  122: \tpublic $name = \"MediumLaser\";\n  123: \tpublic $display = \"164mm 'Medium' Laser\";\n  124: \tpublic $animColor = \"red\";\n  125  \tpublic $rakeTime = 55;\n  126  \tpublic $beamWidth = 3;\n  ...\n  144  \n  145  class HeavyLaser extends Laser {\n  146: \tpublic $name = \"HeavyLaser\";\n  147: \tpublic $display = \"215mm Pulse Laser\";\n  148: \tpublic $animColor = \"red\";\n  149  \tpublic $rakeTime = 70;\n  150  \tpublic $beamWidth = 4;\n  ...\n  168  \n  169  class SuperHeavyLaser extends Laser {\n  170: \tpublic $name = \"SuperHeavyLaser\";\n  171: \tpublic $display = \"340mm 'Heavy' Laser\";\n  172: \tpublic $animColor = \"red\";\n  173  \tpublic $rakeTime = 120;\n  174  \tpublic $beamWidth = 5;\n  ...\n  193  \n  194  class NeutronLaser extends Laser {\n  195: \tpublic $name = \"NeutronLaser\";\n  196: \tpublic $display = \"238mm Neutron Laser\";\n  197  \tpublic $rakeTime = 40;\n  198: \tpublic $animColor = \"yellow\";\n  199  \tpublic $beamWidth = 2;\n  200  \tpublic $minDmg = 95;\n  ...\n  218  \n  219  class NeutronAccelerator extends Laser {\n  220: \tpublic $name = \"NeutronAccelerator\";\n  221: \tpublic $display = \"Neutron Accelerator\";\n  222  \tpublic $rakeTime = 60;\n  223: \tpublic $animColor = \"yellow\";\n  224  \tpublic $beamWidth = 2;\n  225  \tpublic $minDmg = 58;\n\nC:\\xampp\\htdocs\\fire\\server\\systems\\weapons\\launcher.php:\n    2  \n    3  class Launcher extends Weapon {\n    4: \tpublic $type = \"Launcher\";\n    5: \tpublic $animation = \"projectile\";\n    6  \tpublic $priority = 8;\n    7  \tpublic $loads = array();\n    .\n   40  \t\tfor ($i = 0; $i < sizeof($dbLoad); $i++){\n   41  \t\t\tfor ($j = 0; $j < sizeof($this->loads); $j++){\n   42: \t\t\t\tif ($dbLoad[$i][\"name\"] == $this->loads[$j]->name){\n   43  \t\t\t\t\t$this->ammo = $j;\n   44: \t\t\t\t\t$this->output = $dbLoad[$i][\"amount\"];\n   45  \t\t\t\t\tbreak;\n   46  \t\t\t\t}\n   47  \t\t\t}\n   48  \t\t//$this->loads = array();\n   49: \t\t//$this->ammo = new $dbLoad[0][\"name\"]($this->id, 0);\n   50: \t\t//$this->ammo->output = $dbLoad[0][\"amount\"];\n   51  \t\t}\n   52  \t}\n   ..\n   62  \tpublic function getValidEffects(){\n   63  \t\treturn array(// attr, %-tresh, duration, modifier\n   64: \t\t\tarray(\"Disabled\", 80, 1, 0),\n   65: \t\t\tarray(\"Damage\", 30, 0, 0),\n   66: \t\t\tarray(\"Accuracy\", 30, 0, 0)\n   67  \t\t);\n   68  \t}\n   ..\n   71  \n   72  class MissileLauncher extends Launcher {\n   73: \tpublic $name = \"MissileLauncher\";\n   74: \tpublic $display = \"Missile Launcher\";\n   75: \tpublic $animColor = \"black\";\n   76  \n   77  \tfunction __construct($id, $parentId, $start, $end, $loads, $destroyed = false){\n\nC:\\xampp\\htdocs\\fire\\server\\systems\\weapons\\linked.php:\n   35  \n   36  class LinkedParticle extends Linked {\n   37: \tpublic $type = \"Particle\";\n   38: \tpublic $animation = \"projectile\";\n   39  \n   40  \tfunction __construct($id, $fighterId, $parentId, $shots, $linked, $minDmg, $maxDmg, $start, $end){\n   ..\n   44  \n   45  class IonBolt extends LinkedParticle {\n   46: \tpublic $name = \"IonBolt\";\n   47: \tpublic $display = \"Ion Accelerator\";\n   48  \tpublic $shots = 1;\n   49: \tpublic $animColor = \"orange\";\n   50  \tpublic $reload = 2;\n   51  \tpublic $projSize = 3;\n   ..\n   59  \n   60  class LinkedParticleGun extends LinkedParticle {\n   61: \tpublic $name = \"LinkedParticleGun\";\n   62: \tpublic $display = \"Linked Particle Gun\";\n   63: \tpublic $animColor = \"blue\";\n   64  \t\n   65  \tfunction __construct($id, $fighterId, $parentId, $shots, $linked, $minDmg, $maxDmg, $start, $end){\n   ..\n   69  \n   70  class LinkedNeutronRepeater extends LinkedParticle {\n   71: \tpublic $name = \"LinkedNeutronRepeater\";\n   72: \tpublic $display = \"Linked Neutron Repeater\";\n   73: \tpublic $animColor = \"green\";\n   74  \t\n   75  \tfunction __construct($id, $fighterId, $parentId, $shots, $linked, $minDmg, $maxDmg, $start, $end){\n   ..\n   80  \n   81  class FighterPulse extends Pulse {\n   82: \tpublic $type = \"Pulse\";\n   83: \tpublic $animation = \"projectile\";\n   84  \tpublic $projSpeed = 7;\n   85  \tpublic $projSize = 1.5;\n   ..\n   96  \n   97  class ParticlePulsar extends FighterPulse {\n   98: \tpublic $name = \"ParticlePulsar\";\n   99: \tpublic $display = \"Particle Pulsar\";\n  100: \tpublic $animColor = \"blue\";\n  101  \tpublic $shots = 1;\n  102  \tpublic $traverse = -3;\n\nC:\\xampp\\htdocs\\fire\\server\\systems\\weapons\\matter.php:\n    2  \n    3  class Matter extends Weapon {\n    4: \tpublic $type = \"Matter\";\n    5: \tpublic $animation = \"projectile\";\n    6  \tpublic $priority = 4;\n    7  \n    .\n   22  }\n   23  class MediumRailGun extends Matter {\n   24: \tpublic $name = \"MediumRailGun\";\n   25: \tpublic $display = \"127mm Rail Gun\";\n   26  \tpublic $minDmg = 29;\n   27  \tpublic $maxDmg = 38;\n   28  \tpublic $accDecay = 100;\n   29  \tpublic $shots = 2;\n   30: \tpublic $animColor = \"grey\";\n   31  \tpublic $projSize = 3;\n   32  \tpublic $projSpeed = 13;\n   ..\n   42  \n   43  class HeavyRailGun extends Matter {\n   44: \tpublic $name = \"HeavyRailGun\";\n   45: \tpublic $display = \"203mm Rail Gun\";\n   46  \tpublic $minDmg = 56;\n   47  \tpublic $maxDmg = 74;\n   48  \tpublic $accDecay = 60;\n   49  \tpublic $shots = 2;\n   50: \tpublic $animColor = \"grey\";\n   51  \tpublic $projSize = 4;\n   52  \tpublic $projSpeed = 10;\n   ..\n   62  \n   63  class Test extends MediumRailGun {\n   64: \tpublic $name = \"Test\";\n   65: \tpublic $display = \"Test\";\n   66  \tpublic $minDmg = 1;\n   67  \tpublic $maxDmg = 1;\n\nC:\\xampp\\htdocs\\fire\\server\\systems\\weapons\\particle.php:\n    2  \n    3  class Particle extends Weapon {\n    4: \tpublic $type = \"Particle\";\n    5: \tpublic $animation = \"projectile\";\n    6  \tpublic $priority = 10;\n    7  \n    .\n   12  \n   13  class LightIon extends Particle {\n   14: \tpublic $name = \"LightIon\";\n   15: \tpublic $display = \"32mm Ion Bolter Array\";\n   16  \tpublic $minDmg = 13;\n   17  \tpublic $maxDmg = 18;\n   18  \tpublic $accDecay = 180;\n   19  \tpublic $shots = 4;\n   20: \tpublic $animColor = \"orange\";\n   21  \tpublic $projSize = 2;\n   22  \tpublic $projSpeed = 8;\n   ..\n   30  \tfunction __construct($id, $parentId, $start, $end, $output = 0, $destroyed = false){\n   31          parent::__construct($id, $parentId, $start, $end, $output, $destroyed);\n   32:         $this->boostEffect[] = new Effect(\"Reload\", -1);\n   33  \t}\n   34  }\n   35  \n   36  class MediumIon extends LightIon {\n   37: \tpublic $name = \"MediumIon\";\n   38: \tpublic $display = \"68mm Ion Emitter\";\n   39  \tpublic $minDmg = 29;\n   40  \tpublic $maxDmg = 37;\n   41  \tpublic $accDecay = 120;\n   42  \tpublic $shots = 2;\n   43: \tpublic $animColor = \"orange\";\n   44  \tpublic $reload = 3;\n   45  \tpublic $projSize = 3;\n   ..\n   56  \n   57  class MediumTwinIon extends MediumIon {\n   58: \t//public $name = \"MediumTwinIon\";\n   59: \tpublic $display = \"68mm Dual Ion Cannon\";\n   60  \tpublic $shots = 2;\n   61  \tpublic $mass = 21;\n   ..\n   70  \n   71  class HeavyIon extends MediumIon {\n   72: \tpublic $name = \"HeavyIon\";\n   73: \tpublic $display = \"122mm Ion Burst Cannon\";\n   74  \tpublic $minDmg = 49;\n   75  \tpublic $maxDmg = 65;\n   76  \tpublic $accDecay = 90;\n   77  \tpublic $shots = 2;\n   78: \tpublic $animColor = \"orange\";\n   79  \tpublic $reload = 4;\n   80  \tpublic $projSize = 4;\n   ..\n   92  \n   93  class FusionCannon extends Particle {\n   94: \tpublic $name = \"FusionCannon\";\n   95: \tpublic $display = \"42mm Fusion Cannon\";\n   96  \tpublic $minDmg = 30;\n   97  \tpublic $maxDmg = 41;\n   98  \tpublic $accDecay = 110;\n   99  \tpublic $shots = 1;\n  100: \tpublic $animColor = \"green\";\n  101  \tpublic $projSize = 3;\n  102  \tpublic $projSpeed = 6;\n\nC:\\xampp\\htdocs\\fire\\server\\systems\\weapons\\plasma.php:\n    2  \n    3  class Plasma extends Weapon {\n    4: \tpublic $type = \"Plasma\";\n    5  \tpublic $priority = 6;\n    6  \tpublic $melt = 50;\n    .\n    8  \tfunction __construct($id, $parentId, $start, $end, $output = 0, $effiency, $destroyed = 0){\n    9          parent::__construct($id, $parentId, $start, $end, $output, $destroyed);\n   10: \t\t$this->boostEffect[] = new Effect(\"Damage loss\", -0.2);\n   11: \t\t$this->boostEffect[] = new Effect(\"Damage\", 0.1);\n   12  \t}\n   13  \t\n   14  \tpublic function getDmgRangeMod($fire){\n   15: \t\t$mod = $this->getBoostEffect(\"Damage loss\") * $this->getBoostLevel($fire->turn);\n   16  \t\tif ($mod){\n   17  \t\t\t$mod = 1-($fire->dist * $this->dmgLoss / 10000)*(1+$mod);\n   18: \t\t\tDebug::log(get_class($this).\", weapon id: \".$this->id.\", RANGE DMG mod: \".$mod);\n   19  \t\t\treturn $mod;\n   20  \t\t} else return 1;\n   ..\n   32  \t\t//$armourDmg = ceil(min($totalDmg, $negation)*1.5);\n   33  \t\t//$structDmg = min(max(0, $totalDmg - $negation), $totalDmg);\n   34: \t\t//Debug::log(\"Plasma DMG: \".$totalDmg.\": negation: \".$negation.\" - DOING \".$structDmg.\"/\".$armourDmg);\n   35  \t\t\n   36  \t\treturn new Divider($shieldDmg * $this->linked, $armourDmg * $this->linked, $structDmg * $this->linked);\n   ..\n   39  \n   40  class LightPlasma extends Plasma {\n   41: \tpublic $name = \"LightPlasma\";\n   42: \tpublic $display = \"46mm Plasma Gun\";\n   43  \tpublic $minDmg = 34;\n   44  \tpublic $maxDmg = 47;\n   ..\n   46  \tpublic $dmgLoss = 14;\n   47  \tpublic $shots = 1;\n   48: \tpublic $animColor = \"darkGreen\";\n   49  \tpublic $projSize = 2.5;\n   50  \tpublic $projSpeed = 8;\n   ..\n   62  \n   63  class MediumPlasma extends Plasma {\n   64: \tpublic $name = \"MediumPlasma\";\n   65: \tpublic $display = \"78mm Plasma Accelerator\";\n   66  \tpublic $minDmg = 51;\n   67  \tpublic $maxDmg = 69;\n   ..\n   69  \tpublic $dmgLoss = 10;\n   70  \tpublic $shots = 1;\n   71: \tpublic $animColor = \"darkGreen\";\n   72  \tpublic $projSize = 3;\n   73  \tpublic $projSpeed = 6;\n   ..\n   85  \n   86  class HeavyPlasma extends Plasma {\n   87: \tpublic $name = \"HeavyPlasma\";\n   88: \tpublic $display = \"148mm Plasma Cannon\";\n   89  \tpublic $minDmg = 75;\n   90  \tpublic $maxDmg = 98;\n   ..\n   92  \tpublic $dmgLoss = 6;\n   93  \tpublic $shots = 1;\n   94: \tpublic $animColor = \"darkGreen\";\n   95  \tpublic $projSize = 4;\n   96  \tpublic $projSpeed = 5;\n   ..\n  108  \n  109  class PlasmaShotgun extends Plasma {\n  110: \tpublic $name = \"PlasmaShotgun\";\n  111: \tpublic $display = \"6x36mm Plasma Shotgun\";\n  112  \tpublic $minDmg = 22;\n  113  \tpublic $maxDmg = 28;\n  ...\n  115  \tpublic $dmgLoss = 16;\n  116  \tpublic $shots = 1;\n  117: \tpublic $animColor = \"darkGreen\";\n  118  \tpublic $projSize = 3;\n  119  \tpublic $projSpeed = 4;\n\nC:\\xampp\\htdocs\\fire\\server\\systems\\weapons\\pulse.php:\n    2  \n    3  class Pulse extends Weapon {\n    4: \tpublic $type = \"Pulse\";\n    5: \tpublic $animation = \"projectile\";\n    6  \tpublic $priority = 8;\n    7  \tpublic $basePulses = 3;\n    .\n   27  \t\t$fire->hits++;\n   28  \n   29: \t\tDebug::log(\"fireid: \".$fire->id.\", doDamage, weapon: \".get_class($this).\" #\".$this->id.\", hits: \".$hits.\", target: \".$fire->target->id.\", armour: \".$negation.\", health: \".$remInt);\n   30  \n   31  \t\tfor ($i = 0; $i < $hits; $i++){\n   32  \t\t\t$totalDmg = $this->getTotalDamage($fire);\n   33: \t\t\t//Debug::log(\"hit: \".($i+1).\", doing dmg for: \".$totalDmg);\n   34  \t\t\t$dmg = $this->determineDamage($totalDmg, $negation);\n   35  \n   ..\n   41  \t\t\telse {\n   42  \t\t\t\t$overkill += $dmg->structDmg;\n   43: \t\t\t\tDebug::log(\"hit \".($i+1).\", adding damage to overkill which is at: \".$overkill.\" pts\");\n   44  \t\t\t}\t\t\n   45  \n   ..\n   47  \t\t\t\t$destroyed = 1;\n   48  \t\t\t\t$overkill = (abs($remInt - $dmg->structDmg));\n   49: \t\t\t\tDebug::log(\" => hit:\".($i+1).\", system was destroyed, HP: \".$remInt.\", doing: \".$struct.\", OK for: \".$overkill.\" dmg\");\n   50  \t\t\t\t// overkill takes target system armour, should take overkill-target (main struct) negation ?\n   51  \t\t\t\t$dmg->structDmg = $remInt;\n   ..\n   63  \n   64  class LightPulse extends Pulse {\n   65: \tpublic $name = \"LightPulse\";\n   66: \tpublic $display = \"35mm Pulse Cannon\";\n   67  \tpublic $minDmg = 16;\n   68  \tpublic $maxDmg = 20;\n   69  \tpublic $accDecay = 160;\n   70  \tpublic $shots = 1;\n   71: \tpublic $animColor = \"brown\";\n   72  \tpublic $projSize = 2;\n   73  \tpublic $projSpeed = 10;\n   ..\n   83  \n   84  class MediumPulse extends Pulse {\n   85: \tpublic $name = \"MediumPulse\";\n   86: \tpublic $display = \"60mm Pulse Cannon\";\n   87  \tpublic $minDmg = 25;\n   88  \tpublic $maxDmg = 32;\n   89  \tpublic $accDecay = 120;\n   90  \tpublic $shots = 1;\n   91: \tpublic $animColor = \"brown\";\n   92  \tpublic $projSize = 3;\n   93  \tpublic $projSpeed = 9;\n   ..\n  103  \n  104  class HeavyPulse extends Pulse {\n  105: \tpublic $name = \"HeavyPulse\";\n  106: \tpublic $display = \"102mm Pulse Cannon\";\n  107  \tpublic $minDmg = 38;\n  108  \tpublic $maxDmg = 55;\n  109  \tpublic $accDecay = 90;\n  110  \tpublic $shots = 1;\n  111: \tpublic $animColor = \"brown\";\n  112  \tpublic $projSize = 4;\n  113  \tpublic $projSpeed = 8;\n  ...\n  124  \n  125  class FusionPulsar extends Pulse {\n  126: \tpublic $name = \"FusionPulsar\";\n  127: \tpublic $display = \"Fusion Pulsar\";\n  128  \tpublic $minDmg = 25;\n  129  \tpublic $maxDmg = 35;\n  130  \tpublic $accDecay = 160;\n  131: \tpublic $animColor = \"lightGreen\";\n  132  \tpublic $projSize = 2;\n  133  \tpublic $projSpeed = 10;\n\nC:\\xampp\\htdocs\\fire\\shiptest.php:\n   14  \t\t\t$time = -microtime(true);\n   15  \n   16: \t\t//\t$ships = $manager->logShips(\"Omega\", \"Primus\", \"Hyperion\", \"GQuan\", \"Artemis\", \"Demos\", \"Haven\", \"Olympus\");\t\t\n   17  \n   18: \t\t// $ships = $manager->logShips(\"Omega\", \"Primus\", \"Hyperion\", \"Artemis\", \"Altarian\", \"Vorchan\", \"Haven\");\n   19: \t\t//\t$ships = $manager->logShips(\"all\");\n   20: \t\t\t$ships = $manager->logShips(\"Omega\", \"Primus\", \"Hyperion\", \"Artemis\", \"Altarian\", \"Vorchan\");\n   21  \t\t\t$shots = 200;\n   22  \t\t/*\tforeach ($ships[0]->structures[3]->systems as $sys){\n   23  \t\t\t\tvar_export($sys);\n   24: \t\t\t\techo \"<br><br>\";\n   25  \t\t\t}\n   26  \t\t*/\n   ..\n   30  \t\t\t}\n   31  \n   32: \t\t\tusort($ships, \"sortMass\");\n   33  \n   34  \n   ..\n   38  \t\t\t\t$ep = $ships[$i]->getEP();\n   39  \n   40: \t\t\t\techo \"<table class='unitTest'><tr><th colSpan=2 style='width: 80%'>\".$ships[$i]->name.\"</th></tr>\";\n   41: \t\t\t\techo \"<tr><td colSpan=2>\".($ships[$i]->shipType).\"</td></tr>\";\n   42: \t\t\t\techo \"<tr><td style='text-align: left'>Mass</td><td style='text-align: right'>\".($mass).\"</td></tr>\";\n   43: \t\t\t\techo \"<tr><td style='text-align: left'>Main HP</td><td style='text-align: right'>\".($ships[$i]->primary->integrity).\"</td></tr>\";\n   44: \t\t\t\techo \"<tr><td style='text-align: left'>Total Extra Internal HP </td><td style='text-align: right'>\".($ships[$i]->getInternals()).\"</td></tr>\";\n   45  \n   46: \t\t\t\techo \"<tr><td style='text-align: left'>EP</td><td style='text-align: right'>\".($ep).\"</td></tr>\";\n   47: \t\t\t\techo \"<tr><td style='text-align: left'>Turn Cost per 1°</td><td style='text-align: right'>\".($ships[$i]->baseTurnCost).\"</td></tr>\";\n   48: \t\t\t\techo \"<tr><td style='text-align: left'>Turn Delay per 1°</td><td style='text-align: right'>\".($ships[$i]->baseTurnDelay).\"</td></tr>\";\n   49: \t\t\t\techo \"<tr><td style='text-align: left'>Max Angle based on EP</td><td style='text-align: right'>\".(round($ep / $ships[$i]->baseTurnCost, 2)).\"°</td></tr>\";\n   50: \t\t\t\techo \"<tr><td style='text-align: left'>Turn Delay 30°</td><td style='text-align: right'>\".($ships[$i]->baseTurnDelay * 30).\" px</td></tr>\";\n   51: \t\t\t\techo \"<tr><td style='text-align: left'>Base Impulse</td><td style='text-align: right'>\".($ships[$i]->baseImpulse).\"</td></tr>\";\n   52: \t\t\t\techo \"<tr><td style='text-align: left'>MAX Turn @ Base Impulse</td><td style='text-align: right; color: red'>\".(round($ships[$i]->baseImpulse / $ships[$i]->baseTurnDelay, 2)).\"°</td></tr>\";\n   53  \n   54  \t\t\t\t$data = $ships[$i]->getTotalMass();\n   55: \t\t\t\techo \"<tr><td style='text-align: left'>Weapon Mass</td><td style='text-align: right'>\".(round($data[2] / $mass * 100, 2)).\"%</td></tr>\";\n   56: \t\t\t\techo \"<tr><td style='text-align: left'>Main</td><td style='text-align: right'>\".($data[0]).\"</td></tr>\";\n   57: \t\t\t\techo \"<tr><td style='text-align: left'>Internal</td><td style='text-align: right'>\".($data[1]).\"</td></tr>\";\n   58: \t\t\t\techo \"<tr><td style='text-align: left'>Guns</td><td style='text-align: right'>\".($data[2]).\"</td></tr>\";\n   59: \t\t\t\techo \"<tr><td style='text-align: left'>Hangar</td><td style='text-align: right'>\".($data[3]).\"</td></tr>\";\n   60: \t\t\t\techo \"<tr><td style='text-align: left'>Sum</td><td style='text-align: right'>\".(array_sum($data)).\"</td></tr>\";\n   61  \n   62  \n   ..\n   81  \t\t\t\t\telse if ($sys instanceof PrimarySystem){\n   82  \t\t\t\t\t\t$internal++;\n   83: \t\t\t\t\t\t//echo \"</br>hitting: \".$sys->name;\n   84  \t\t\t\t\t}\n   85  \t\t\t\t\telse {\n   ..\n   88  \t\t\t\t}\n   89  \n   90: \t\t\t\techo \"<tr><td colSpan=2 style='text-align: center; border: 1px solid white;'>Hit Chance from 0° / Front</td></tr>\";\n   91: \t\t\t\techo \"<tr><td style='text-align: left'>Main Structure</td><td style='text-align: right'>\".(round($main / $j, 2)*100).\"%</td></tr>\";\n   92: \t\t\t\techo \"<tr><td style='text-align: left'>Internals</td><td style='text-align: right'>\".(round($internal / $j, 2)*100).\"%</td></tr>\";\n   93: \t\t\t\techo \"<tr><th>Primary Total</th><th style='text-align: right'>\".(round(($main+$internal) / $j, 2)*100).\"%</th></tr>\";\n   94: \t\t\t\techo \"<tr><td style='text-align: left'>Weapons</td><td style='text-align: right'>\".(round($wpn / $j, 2)*100).\"%</td></tr>\";\n   95: \t\t\t\techo \"<tr><td style='text-align: left'>Hangar</td><td style='text-align: right'>\".(round($hangar / $j, 2)*100).\"%</td></tr>\";\n   96: \t\t\t\techo \"<tr><th>Outer Total</th><th style='text-align: right'>\".(round(($wpn+$hangar) / $j, 2)*100).\"%</th></tr>\";\n   97  \n   98  \n   ..\n  121  \t\t\t\t\t\t$main++;\n  122  \t\t\t\t\t}\n  123: \t\t\t\t\telse {debug::log(\"error\");}\n  124  \t\t\t\t}\n  125  \n  126: \t\t\t\techo \"<tr><td colSpan=2 style='text-align: center; border: 1px solid white;'>Hit Chance from 90° / Side</td></tr>\";\n  127: \t\t\t\techo \"<tr><td style='text-align: left'>Main Structure (inc. Intern.)</td><td style='text-align: right'>\".(round($main / $j, 2)*100).\"%</td></tr>\";\n  128: \t\t\t\t//echo \"<tr><td style='text-align: left'>Internals</td><td style='text-align: right'>\".(round($internal / $j, 2)*100).\"%</td></tr>\";\n  129: \t\t\t\techo \"<tr><th>Primary Total</th><th style='text-align: right'>\".(round(($main+$internal) / $j, 2)*100).\"%</th></tr>\";\n  130: \t\t\t\techo \"<tr><td style='text-align: left'>Weapons</td><td style='text-align: right'>\".(round($wpn / $j, 2)*100).\"%</td></tr>\";\n  131: \t\t\t\techo \"<tr><td style='text-align: left'>Hangar</td><td style='text-align: right'>\".(round($hangar / $j, 2)*100).\"%</td></tr>\";\n  132: \t\t\t\techo \"<tr><th>Outer Total</th><th style='text-align: right'>\".(round(($wpn+$hangar) / $j, 2)*100).\"%</th></tr>\";\n  133  \n  134: \t\t\t\techo \"</table>\";\n  135  \t\t\t}\n  136  \n  ...\n  140  \t\t\t/*\n  141  \t\t\t$time += microtime(true); \n  142: \t\t\techo \"</br><span style='font-size: 20px'>Time: \".round($time, 3).\" seconds.\";\n  143  \n  144  \n  ...\n  152  \t\t\t$time += microtime(true); \n  153  \n  154: \t\t\techo \"</br><span style='font-size: 20px'>Time: \".round($time, 3).\" seconds.\";\n  155  \n  156  \t\t\t$time = -microtime(true);\n  ...\n  161  \t\t\t$time += microtime(true); \n  162  \n  163: \t\t\techo \"</br><span style='font-size: 20px'>Time: \".round($time, 3).\" seconds.\";\n  164  \t\t\t*/\t\t\t\n  165  \t\t?>\n\nC:\\xampp\\htdocs\\fire\\systemtest.php:\n   10  \t\t$system = new $val(0, 0, 0, 0);\n   11  \t\t$avg = round(($system->minDmg + $system->maxDmg)/2, 2);\n   12: \t\techo \"<table class='unitTest'><tr><th colSpan=2 style='width: 210px'>\".$system->name.\"</th></tr>\";\n   13: \t\techo \"<tr><th colSpan=2 style='text-align: center'>\".($system->display).\"</th></tr>\";\n   14: \t\techo \"<tr><td colSpan=2>\".$system->fc[0].\"% / \".$system->fc[1].\"%</td></tr>\";\n   15: \t\techo \"<tr><td>AccDecay</td><td style='text-align: right'>\".($system->accDecay).\"</td></tr>\";\n   16: \t\techo \"<tr><td>Shots</td><td style='text-align: right'>\".($system->shots).\"</td></tr>\";\n   17: \t\techo \"<tr><td>MinDmg</td><td style='text-align: right'>\".($system->minDmg).\"</td></tr>\";\n   18: \t\techo \"<tr><td>MaxDmg</td><td style='text-align: right'>\".($system->maxDmg).\"</td></tr>\";\n   19: \t\techo \"<tr><td>Avg</td><td style='text-align: right'>\".($avg).\"</td></tr>\";\n   20: \t\techo \"<tr><td>Dmg per Salvo</td><td style='text-align: right'>\".($avg*$system->shots).\"</td></tr>\";\n   21: \t\techo \"</table>\";\n   22  \t}\n   23  \t\t/*\t\n   ..\n   26  \t\t\t\t$time = -microtime(true);\n   27  \n   28: \t\t\t\t$systems = $manager->logSystemsByClass(array(\"Matter\", \"Ion\", \"Pulse\"));\n   29: \t\t\t\t//$compare = array(\"LightIon\", \"MediumTwinIon\", \"LightPulse\", \"MediumPulse\", \"FusionCannon\");\n   30  \t\t\t\t//$systems = $manager->compareSystems($compare);\n   31  \n   32  \t\t\t\tfor ($i = 0; $i < sizeof($systems); $i++){\n   33  \n   34: \t\t\t\techo \"<table class='unitTest'><tr><th colSpan=2 style='width: 210px'>\".$systems[$i]->name.\"</th></tr>\";\n   35  \n   36  \n   37  \t\t\t\t\t$avg = round(($systems[$i]->minDmg + $systems[$i]->maxDmg)/2, 2);\n   38  dem\n   39: \t\t\t\t\techo \"<tr><th colSpan=2 style='text-align: center'>\".($systems[$i]->display).\"</th></tr>\";\n   40: \t\t\t\t\techo \"<tr><td colSpan=2>\".$systems[$i]->fc[0].\"% / \".$systems[$i]->fc[1].\"%</td></tr>\";\n   41: \t\t\t\t\techo \"<tr><td>AccDecay</td><td style='text-align: right'>\".($systems[$i]->accDecay).\"</td></tr>\";\n   42: \t\t\t\t\techo \"<tr><td>Shots</td><td style='text-align: right'>\".($systems[$i]->shots).\"</td></tr>\";\n   43: \t\t\t\t\techo \"<tr><td>MinDmg</td><td style='text-align: right'>\".($systems[$i]->minDmg).\"</td></tr>\";\n   44: \t\t\t\t\techo \"<tr><td>MaxDmg</td><td style='text-align: right'>\".($systems[$i]->maxDmg).\"</td></tr>\";\n   45: \t\t\t\t\techo \"<tr><td>Avg</td><td style='text-align: right'>\".($avg).\"</td></tr>\";\n   46: \t\t\t\t\techo \"<tr><td>Dmg per Salvo</td><td style='text-align: right'>\".($avg*$systems[$i]->shots).\"</td></tr>\";\n   47  \n   48: \t\t\t\t\techo \"</table>\";\n   49  \n   50  \t\t\t\t}\n   51  \n   52  \t\t\t\t$time += microtime(true); \n   53: \t\t\t\techo \"</br><span style='font-size: 20px'>Time: \".round($time, 3).\" seconds.\";\n   54  \n   55  \t\t\t?>\n   ..\n   65  \t<body> \n   66  \t\t<div>\n   67: \t\t\t<form method=\"post\">\n   68: \t\t\t\t<table style=\"width: 100%; margin: auto\" >\n   69  \t\t\t\t\t<tr>\n   70  \t\t\t\t\t\t<td>\n   71: \t\t\t\t\t\t\t<input type=\"form\" style=\"text-align: center\" placeholder=\"system name\" name=\"a\"></input>\t\t\n   72  \t\t\t\t\t\t</td>\n   73  \t\t\t\t\t</tr>\n   74  \t\t\t\t\t<tr>\n   75  \t\t\t\t\t\t<td>\n   76: \t\t\t\t\t\t\t<input type=\"form\" style=\"text-align: center\" placeholder=\"system name\" name=\"b\"></input>\t\t\n   77  \t\t\t\t\t\t</td>\n   78  \t\t\t\t\t</tr>\n   79  \t\t\t\t\t<tr>\n   80  \t\t\t\t\t\t<td>\n   81: \t\t\t\t\t\t\t<input type=\"form\" style=\"text-align: center\" placeholder=\"system name\" name=\"c\"></input>\t\t\n   82  \t\t\t\t\t\t</td>\n   83  \t\t\t\t\t</tr>\n   84  \t\t\t\t\t<tr>\n   85  \t\t\t\t\t\t<td>\n   86: \t\t\t\t\t\t\t<input type=\"form\" style=\"text-align: center\" placeholder=\"system name\" name=\"d\"></input>\t\t\n   87  \t\t\t\t\t\t</td>\n   88  \t\t\t\t\t</tr>\n   89  \t\t\t\t\t<tr>\n   90  \t\t\t\t\t\t<td>\n   91: \t\t\t\t\t\t\t<input type=\"form\" style=\"text-align: center\" placeholder=\"system name\" name=\"e\"></input>\t\t\n   92  \t\t\t\t\t\t</td>\n   93  \t\t\t\t\t</tr>\n   94  \t\t\t\t\t<tr>\n   95  \t\t\t\t\t\t<td>\n   96: \t\t\t\t\t\t\t<input type=\"submit\" value=\"Confirm and Forward\"></input>\t\n   97  \t\t\t\t\t\t</td>\n   98  \t\t\t\t\t</tr>\n\nC:\\xampp\\htdocs\\fire\\test.php:\n   10  </head>\n   11  \t<body> \n   12: \t\t<table class=\"fullBorderTable\">\n   13  \t\t\t<tr>\n   14  \t\t\t\t<th>\n   ..\n   39  \t\t\t\t$time = -microtime(true);\n   40  \n   41: \t\t\t\t$ships = $manager->logShips(\"All\");\n   42  \t\t\t\t\n   43  \n   ..\n   46  \t\t\t\t}\n   47  \n   48: \t\t\t\tusort($ships, \"sortMass\");\n   49  \n   50  \n   ..\n   57  \t\t\t\t\t$fires[$i]->target = $ships[$i];\n   58  \n   59: \t\t\t\t\techo \"<table class='unitTest'><tr><th colSpan=2 style='width: 210px'>\".$ships[$i]->classname.\"</th></tr>\";\n   60  \n   61  \t\t\t\t\t$main = 0;\n   ..\n   83  \t\t\t\t\t$armour = $ships[$i]->getArmour();\t\t\t\n   84  \t\t\t\t\t$struct = $ships[$i]->getStructure();\n   85: \t\t\t\t\t$negation = array_sum($armour[\"negation\"]) / sizeof($armour[\"negation\"]);\n   86  \n   87: \t\t\t\t\techo \"<tr><td>Mass</td><td style='text-align: right'>\".($ships[$i]->mass).\"</td></tr>\";\n   88: \t\t\t\t\techo \"<tr><td>Str per 1 Mass</td><td style='text-align: right'>\".(round($struct / $mass, 2)).\"</td></tr>\";\n   89: \t\t\t\t\techo \"<tr><td>Arm per 1 Mass</td><td style='text-align: right'>\".(round($armour[\"integrity\"] / $mass, 2)).\"</td></tr>\";\n   90: \t\t\t\t\techo \"<tr><td>Weapon Mass</td><td style='text-align: right'>\".(round($ships[$i]->getWeapons() / $mass, 3)).\"</td></tr>\";\n   91: \t\t\t\t\techo \"<tr><td>Avg Armour</td><td style='text-align: right'>\".(round($negation, 2)).\"</td></tr>\";\n   92: \t\t\t\t\techo \"<tr><td></td><td></td></tr>\";\n   93: \t\t\t\t\techo \"<tr><td>Main Structure</td><td style='text-align: right'>\".(round($main / $j, 2)*100).\"%</td></tr>\";\n   94: \t\t\t\t\techo \"<tr><td>Internals</td><td style='text-align: right'>\".(round($internal / $j, 2)*100).\"%</td></tr>\";\n   95: \t\t\t\t\techo \"<tr><td>Primary Total</td><td style='text-align: right'>\".(round(($main+$internal) / $j, 2)*100).\"%</td></tr>\";\n   96: \t\t\t\t\techo \"<tr><td>Weapons</td><td style='text-align: right'>\".(round($wpn / $j, 2)*100).\"%</td></tr>\";\n   97: \t\t\t\t\techo \"<tr><td>Hangar</td><td style='text-align: right'>\".(round($hangar / $j, 2)*100).\"%</td></tr>\";\n   98  \n   99: \t\t\t\t\techo \"</table>\";\n  100  \n  101  \t\t\t\t}\n  102  \n  103  \t\t\t\t$time += microtime(true); \n  104: \t\t\t\techo \"</br><span style='font-size: 20px'>Time: \".round($time, 3).\" seconds.\";\n  105  \n  106  \t\t\t?>\n\n6122 matches across 55 files\n\n\nSearching 74 files for \"\"rof\"\"\n\nC:\\xampp\\htdocs\\fire\\systems.js:\n 2581  \t\tvar th = document.createElement(\"th\"); th.innerHTML = \"Class\"; th.width = \"80px\"; tr.appendChild(th)\n 2582  \t\tvar th = document.createElement(\"th\"); th.innerHTML = \"Type\"; th.width = \"200px\"; tr.appendChild(th)\n 2583: \t\tvar th = document.createElement(\"th\"); th.innerHTML = \"RoF\"; th.width = \"40px\"; tr.appendChild(th)\n 2584  \t\tvar th = document.createElement(\"th\"); th.innerHTML = \"Cost\"; th.width = \"40px\"; tr.appendChild(th)\n 2585  \t\tvar th = document.createElement(\"th\"); th.innerHTML = \"\"; tr.appendChild(th)\n\n1 match in 1 file\n\n\nSearching 74 files for \"launchRate\"\n\nC:\\xampp\\htdocs\\fire\\game.php:\n  459  \t\t\t</div>\n  460  \t\t\t<div class=\"header\">\n  461: \t\t\t\tCan launch up to <span id=\"launchRate\"></span> units per cycle.\n  462  \t\t\t</div>\n  463  \t\t\t<div class=\"header\">\n\nC:\\xampp\\htdocs\\fire\\gameSetup.php:\n  169  \t\t\t</div>\n  170  \t\t\t<div class=\"header\">\n  171: \t\t\t\tCan launch up to <span id=\"launchRate\"></span> units per cycle.\n  172  \t\t\t</div>\n  173  \t\t\t<div class=\"header\">\n\nC:\\xampp\\htdocs\\fire\\server\\systems\\weapons\\launcher.php:\n   10  \tpublic $mass = 22;\n   11  \tpublic $capacity = array();\n   12: \tpublic $launchRate = array();\n   13  \tpublic $powerReq = 2;\n   14  \tpublic $effiency = 1;\n   ..\n   19  \t\t\t$this->loads[] = new $loads[$i][0]($this->id, -1);\n   20  \t\t\t$this->capacity[] = $loads[$i][1];\n   21: \t\t\t$this->launchRate[] = $loads[$i][2];\n   22  \t\t}\n   23  \n\nC:\\xampp\\htdocs\\fire\\style.css:\n  262  }\n  263  \n  264: #launchRate, #capacity, #reload {\n  265  \tcolor: red;\n  266  }\n\nC:\\xampp\\htdocs\\fire\\systems.js:\n 1516  \t\t\t$(table).append($(\"<tr>\").append($(\"<td>\").html(\"Tracking\")).append($(\"<td>\").html(this.getTraverseRating() + \" / \" + game.getUnitType(this.getTraverseRating()))));\n 1517  \t\t\t$(table).append($(\"<tr>\").append($(\"<td>\").html(\"Thrust\")).append($(\"<td>\").html(this.getImpulseString())));\n 1518: \t\t\t//$(table).append($(\"<tr>\").append($(\"<td>\").html(\"Launch Rate\")).append($(\"<td>\").html(\"<span class='red' id='detailShots'>\" + this.getOutput() + \"</span> / \" + this.launchRate[this.ammo])));\n 1519: \t\t\t$(table).append($(\"<tr>\").append($(\"<td>\").html(\"Launch Rate\")).append($(\"<td>\").html(\"Up to <span class='red'>\" + this.launchRate[this.ammo] + \"</span> per cycle\")));\n 1520  \t\t}\n 1521  \t}\n ....\n 2302  \n 2303  \tthis.capacity = system.capacity;\n 2304: \tthis.launchRate = system.launchRate;\n 2305  \tthis.type = \"Ballistic\";\n 2306  \tthis.animation = \"ballistic\";\n ....\n 2404  \n 2405  Launcher.prototype.getEffiency = function(){\n 2406: \treturn this.launchRate[this.ammo];\n 2407  }\n 2408  \n ....\n 2594  \t\t\ttr.insertCell(-1).innerHTML = this.loads[i].name;\n 2595  \t\t\ttr.insertCell(-1).innerHTML = this.loads[i].display;\n 2596: \t\t\ttr.insertCell(-1).innerHTML = this.launchRate[i];\n 2597  \t\t\ttr.insertCell(-1).innerHTML = this.loads[i].cost;\n 2598  \t\tvar td = document.createElement(\"td\");\n ....\n 2775  \n 2776  Hangar.prototype.getOutput = function(){\n 2777: \treturn this.getLaunchRate();\n 2778  }\n 2779  \n 2780: Hangar.prototype.getLaunchRate = function(){\n 2781  \tvar rate = this.effiency;\n 2782  \tvar mod = 1;\n ....\n 2794  Hangar.prototype.enableHangarDeployment = function(e){\n 2795  \tvar div = document.getElementById(\"hangarLoadoutDiv\");\n 2796: \t\t$(\"#launchRate\").html(this.getLaunchRate());\n 2797  \t\t$(\"#capacity\").html(this.output);\n 2798  \tthis.unsetFireOrder();\n ....\n 2930  \tvar name = $(ele).data(\"name\");\n 2931  \tvar add = $(ele).data(\"val\");\n 2932: \tvar launchRate = this.getLaunchRate();\n 2933  \tvar current = 0;\n 2934  \n ....\n 2938  \t\t}\n 2939  \t\tif (max){\n 2940: \t\t\tadd = launchRate - current;\n 2941  \t\t}\n 2942  \t}\n ....\n 2956  \t\t\tif (add > 0){\n 2957  \t\t\t\tadd = Math.min(add, this.loads[i].amount - this.loads[i].launch);\n 2958: \t\t\t\tif (current + add <= launchRate && this.loads[i].launch + add <= this.loads[i].amount && this.loads[i].launch + add >= 0){\n 2959  \t\t\t\t\tthis.loads[i].launch += add;\n 2960  \t\t\t\t}\n ....\n 3108  \tvar div = document.getElementById(\"hangarLoadoutDiv\");\n 3109  \tif ($(div).hasClass(\"disabled\")){\n 3110: \t\t$(div).find(\"#launchRate\").html(this.getOutput());\n 3111  \t\t$(div).find(\"#capacity\").html(this.output);\n 3112  \t\t//$(div).data(\"systemid\", this.id).css(\"top\", e.clientY + 30).css(\"left\", e.clientX - 150).removeClass(\"disabled\");\n\n20 matches across 5 files\n\n\nSearching 74 files for \"#reinforce\"\n\nC:\\xampp\\htdocs\\fire\\game.js:\n  601  \t\t\t//\tthis.setupDeploymentZone();\n  602  \t\t\t\tthis.drawDeploymentZone();\n  603: \t\t\t\t$(\"#deployWrapper\").find(\"#reinforceTable\").find(\".requestReinforcements\").each(function(){\n  604  \t\t\t\t\tif ($(this).data(\"id\") == id){\n  605  \t\t\t\t\t\t$(this).addClass(\"selected\");\n  ...\n  932  \t\t\t\t$(\"#phaseSwitchDiv\").click(function(){\n  933  \t\t\t\t\tgame.initDeployment();\n  934: \t\t\t\t\t//$(\"#deployWrapper\").find(\"#reinforceTable\").show();\n  935  \t\t\t\t\t$(this).hide();\n  936  \t\t\t\t});\n  ...\n 1023  \t\t\tif (playerstatus[i].userid == userid){\n 1024  \t\t\t\tisPlaying = true;\n 1025: \t\t\t\tthis.reinforcePoints = $(\"#reinforce\").html();\n 1026  \t\t\t\tif (playerstatus[i].status == \"waiting\"){\n 1027  \t\t\t\t\tcanSubmit = true;\n ....\n 2315  \t\t\t\te.preventDefault();\n 2316  \t\t\t\t$(this).hide();\n 2317: \t\t\t\t$(\"#reinforce\").data(\"on\", 0);\n 2318  \t\t\t\tif (game.phase == -1){\n 2319: \t\t\t\t\t$(this).find(\"#reinforceTable\").find(\".selected\").each(function(){\n 2320  \t\t\t\t\t\t$(this).removeClass(\"selected\");\n 2321  \t\t\t\t\t\tgame.disableDeployment();\n ....\n 2365  \n 2366  \tthis.initReinforcementWrapper = function(){\n 2367: \t\t$(\"#reinforce\")\n 2368  \t\t\t.data(\"on\", 1)\n 2369  \t\t\t.click(function(e){\n ....\n 2377  \t\t\t\t\t$(\"#deployWrapper\").hide();\n 2378  \t\t\t\t\tif (game.phase == -1){\n 2379: \t\t\t\t\t\t$(\"#deployWrapper\").find(\"#reinforceTable\").find(\".selected\").each(function(){\n 2380  \t\t\t\t\t\t\t$(this).removeClass(\"selected\");\n 2381  \t\t\t\t\t\t\tgame.disableDeployment();\n ....\n 2415  \t\t\t\t\tgame.undoDeployment($(this).data(\"id\"));\n 2416  \t\t\t\t\t$(this).removeClass(\"green\");\n 2417: \t\t\t\t\t$(\"#deployWrapper\").find(\"#reinforceTable\").find(\"#totalRequestCost\").html(game.getCurrentReinforceCost());\n 2418  \t\t\t\t\tgame.draw();\n 2419  \t\t\t\t}\n\nC:\\xampp\\htdocs\\fire\\shared.js:\n  478  \telse if (e.originalEvent.button == 2){\n  479  \t\tif (game.deploying){\n  480: \t\t\t$(\"#deployWrapper\").find(\"#reinforceTable\").find(\".selected\").each(function(){\n  481  \t\t\t\tif ($(this).data(\"id\") == game.deploying){\n  482  \t\t\t\t\t$(this).removeClass(\"selected\");\n\nC:\\xampp\\htdocs\\fire\\shipclasses.js:\n  213  \t\t$(\"#game\")\n  214  \t\t\t.find(\"#deployOverlay\").hide().end()\n  215: \t\t\t.find(\"#deployWrapper\").find(\"#reinforceTable\").find(\".requestReinforcements\").each(function(){\n  216  \t\t\tif ($(this).hasClass(\"selected\")){\n  217  \t\t\t\t//$(this).find(\".cost\").addClass(\"green\");\n\nC:\\xampp\\htdocs\\fire\\style.css:\n  195  }\n  196  \n  197: #reinforce:hover {\n  198  \tbackground-color: white;\n  199  \tcolor: black;\n  200  }\n  201  \n  202: #reinforceTable {\n  203  \tmargin: auto;\n  204  \tmargin-top: 20px;\n  ...\n  208  }\n  209  \n  210: #reinforceTable tr {\t\n  211  \tbackground-color: black;\n  212  }\n  213  \n  214: #reinforceTable th, #reinforceTable td {\n  215  \tborder: 1px solid white\n  216  }\n\n15 matches across 4 files\n\n\nSearching 74 files for \"#reinforce\"\"\n\nC:\\xampp\\htdocs\\fire\\game.js:\n 1023  \t\t\tif (playerstatus[i].userid == userid){\n 1024  \t\t\t\tisPlaying = true;\n 1025: \t\t\t\tthis.reinforcePoints = $(\"#reinforce\").html();\n 1026  \t\t\t\tif (playerstatus[i].status == \"waiting\"){\n 1027  \t\t\t\t\tcanSubmit = true;\n ....\n 2315  \t\t\t\te.preventDefault();\n 2316  \t\t\t\t$(this).hide();\n 2317: \t\t\t\t$(\"#reinforce\").data(\"on\", 0);\n 2318  \t\t\t\tif (game.phase == -1){\n 2319  \t\t\t\t\t$(this).find(\"#reinforceTable\").find(\".selected\").each(function(){\n ....\n 2365  \n 2366  \tthis.initReinforcementWrapper = function(){\n 2367: \t\t$(\"#reinforce\")\n 2368  \t\t\t.data(\"on\", 1)\n 2369  \t\t\t.click(function(e){\n\n3 matches in 1 file\n\n\nSearching 74 files for \"dragging\"\n\nC:\\xampp\\htdocs\\fire\\shared.js:\n  355      x_elem = 0, y_elem = 0; // Stores top, left values (edge) of the element\n  356  \n  357: // Will be called when user starts dragging an element\n  358  function _drag_init(elem) {\n  359      // Store the object of the element which needs to be moved\n  ...\n  363  }\n  364  \n  365: // Will be called when user dragging an element\n  366  function _move_elem(e) {\n  367      x_pos = document.all ? window.event.clientX : e.pageX;\n  ...\n  386          options = $.extend({\n  387              handle: null,\n  388:             draggingClass: 'dragging'\n  389          }, options);\n  390  \n\n4 matches in 1 file\n\n\nSearching 74 files for \"_drag_init\"\n\nC:\\xampp\\htdocs\\fire\\game.php:\n  514  \n  515  \t\tdocument.getElementById(\"combatlogWrapper\").onmousedown = function(){\n  516: \t\t    _drag_init(this);\n  517  \t\t    return false;\n  518  \t\t};\n\nC:\\xampp\\htdocs\\fire\\shared.js:\n  356  \n  357  // Will be called when user starts dragging an element\n  358: function _drag_init(elem) {\n  359      // Store the object of the element which needs to be moved\n  360      selected = elem;\n\n2 matches across 2 files\n\n\nSearching 74 files for \"_drag_init\"\n\nC:\\xampp\\htdocs\\fire\\game.php:\n  514  \n  515  \t\tdocument.getElementById(\"combatlogWrapper\").onmousedown = function(){\n  516: \t\t    _drag_init(this);\n  517  \t\t    return false;\n  518  \t\t};\n\nC:\\xampp\\htdocs\\fire\\shared.js:\n  356  \n  357  // Will be called when user starts dragging an element\n  358: function _drag_init(elem) {\n  359      // Store the object of the element which needs to be moved\n  360      selected = elem;\n\n2 matches across 2 files\n\n\nSearching 74 files for \"_drag_init\"\n\nC:\\xampp\\htdocs\\fire\\game.php:\n  514  \n  515  \t\tdocument.getElementById(\"combatlogWrapper\").onmousedown = function(){\n  516: \t\t    _drag_init(this);\n  517  \t\t    return false;\n  518  \t\t};\n\n1 match in 1 file\n\n\nSearching 74 files for \"setShipDi\"\n\nC:\\xampp\\htdocs\\fire\\game.js:\n  860  \t}\n  861  \n  862: \tthis.setShipDivds = function(){\n  863  \t\tvar x = 50;\n  864  \t\tvar y = 200;\n  ...\n  883  \t}\n  884  \n  885: \tthis.setShipDivs = function(){\n  886  \t\tvar x = 10;\n  887  \t\tvar y = 400;\n  ...\n  926  \t\n  927  \tthis.initPhase = function(n){\n  928: \t\tthis.setShipDivs();\n  929  \n  930  \t\tif (n == -1){\n\n3 matches in 1 file\n\n\nSearching 74 files for \"setShipD\"\n\nC:\\xampp\\htdocs\\fire\\game.js:\n  861  \t\n  862  \tthis.initPhase = function(n){\n  863: \t\tthis.setShipDivs();\n  864  \n  865  \t\tif (n == -1){\n  ...\n 2502  \n 2503  \n 2504: Game.prototype.setShipDivs = function (val){\n 2505  \tvar x = 10;\n 2506  \tvar y = 400;\n\n2 matches in 1 file\n\n\nSearching 74 files for \"$(this.ships[i].element)\"\n\nC:\\xampp\\htdocs\\fire\\game.js:\n 2507  \tvar y = 400;\n 2508  \tfor (var i = 0; i < this.ships.length; i++){\n 2509: \t\t$(this.ships[i].element)\n 2510  \t\t\t.css(\"left\", x)\n 2511  \t\t\t.css(\"top\", y);\n\n1 match in 1 file\n",
			"settings":
			{
				"buffer_size": 273974,
				"line_ending": "Windows",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "shared.js",
			"settings":
			{
				"buffer_size": 12142,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "server/systems/weapons/plasma.php",
			"settings":
			{
				"buffer_size": 3719,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "flights.js",
			"settings":
			{
				"buffer_size": 17530,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/systems/weapons/ammo.php",
			"settings":
			{
				"buffer_size": 4030,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/ships/avenger.php",
			"settings":
			{
				"buffer_size": 3473,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "autoload.php",
			"settings":
			{
				"buffer_size": 7294,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "log.txt",
			"settings":
			{
				"buffer_size": 5637,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "server/dbManager.php",
			"settings":
			{
				"buffer_size": 52901,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/ships/altarian.php",
			"settings":
			{
				"buffer_size": 2268,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/ships/darkner.php",
			"settings":
			{
				"buffer_size": 1617,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "gameSetup.php",
			"settings":
			{
				"buffer_size": 17232,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/ships/tinashi.php",
			"settings":
			{
				"buffer_size": 2321,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/ships/sharlin.php",
			"settings":
			{
				"buffer_size": 3653,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/ships/whitestar.php",
			"settings":
			{
				"buffer_size": 1773,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/ships/primus.php",
			"settings":
			{
				"buffer_size": 2652,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/ships/demos.php",
			"settings":
			{
				"buffer_size": 1898,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/ships/vorchan.php",
			"settings":
			{
				"buffer_size": 1654,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/ships/haven.php",
			"settings":
			{
				"buffer_size": 1539,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/systems/weapons/linked.php",
			"settings":
			{
				"buffer_size": 3139,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "getGameData.php",
			"settings":
			{
				"buffer_size": 761,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "shiptest.php",
			"settings":
			{
				"buffer_size": 6815,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "combattest.php",
			"settings":
			{
				"buffer_size": 2850,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "server/ships/gquan.php",
			"settings":
			{
				"buffer_size": 2690,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "index.php",
			"settings":
			{
				"buffer_size": 2382,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "balltest.php",
			"settings":
			{
				"buffer_size": 1297,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "systemtest.php",
			"settings":
			{
				"buffer_size": 3559,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/systems/weapons/matter.php",
			"settings":
			{
				"buffer_size": 2261,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: List Packages"
			],
			[
				"Package Control: list",
				"Package Control: List Packages"
			],
			[
				"package control install package",
				"Package Control: Install Package"
			],
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"Package Control: in",
				"Package Control: Install Package"
			],
			[
				"brack",
				"Preferences: Browse Packages"
			]
		],
		"width": 416.0
	},
	"console":
	{
		"height": 426.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/C/xampp/htdocs/fire/server/salvo.php",
		"/C/xampp/htdocs/fire/game.js",
		"/C/xampp/htdocs/fire/log.txt",
		"/C/xampp/htdocs/fire/server/ship.php",
		"/C/xampp/htdocs/fire/shared.js",
		"/C/xampp/htdocs/fire/graphics.js",
		"/C/xampp/htdocs/fire/script.js",
		"/C/xampp/htdocs/fire/server/systems/weapons/laser.php",
		"/C/xampp/htdocs/fire/systems.js",
		"/C/xampp/htdocs/fire/shipclasses.js",
		"/C/xampp/htdocs/fire/server/flight.php",
		"/C/xampp/htdocs/fire/server/dbManager.php",
		"/C/xampp/htdocs/fire/server/manager.php",
		"/C/xampp/htdocs/fire/test.php",
		"/C/xampp/htdocs/fire/server/ships/tinashi.php",
		"/C/xampp/htdocs/fire/debug.php",
		"/C/xampp/htdocs/fire/server/systems/weapons/paired.php",
		"/C/xampp/htdocs/fire/server/ships/sharlin.php",
		"/C/xampp/htdocs/fire/server/ships/Haven.php",
		"/C/xampp/htdocs/fire/server/systems/weapons/ammo.php",
		"/C/xampp/htdocs/fire/server/volley.php",
		"/C/xampp/htdocs/fire/server/systems/weapons/ballistic.php",
		"/C/xampp/htdocs/fire/server/systems/weapons/matter.php",
		"/C/xampp/htdocs/fire/server/ships/demos.php",
		"/C/xampp/htdocs/fire/dbManager.php",
		"/C/xampp/htdocs/fire/manager.php",
		"/C/xampp/htdocs/fire/gameManager.php",
		"/C/xampp/htdocs/fire/server/systems/systems.php",
		"/C/xampp/htdocs/fire/server/ships/tethys.php",
		"/C/xampp/htdocs/fire/server/ships/whitestar.php",
		"/C/xampp/htdocs/fire/lobby.css",
		"/C/xampp/htdocs/fire/createGame.php",
		"/C/xampp/htdocs/fire/imageloader.js",
		"/C/xampp/htdocs/fire/include.php",
		"/C/xampp/htdocs/fire/server/systems/laser.php",
		"/C/xampp/htdocs/fire/server/systems/particle.php",
		"/C/xampp/htdocs/fire/server/systems/systems",
		"/C/xampp/htdocs/fire/logout.php",
		"/C/xampp/htdocs/fire/jquery-2.1.1.min.js",
		"/C/xampp/htdocs/fire/jquery-ui.js",
		"/C/xampp/htdocs/fire/starships.php",
		"/D/SecureWAMP_Portable/htdocs/fire/getGameData.php",
		"/D/SecureWAMP_Portable/htdocs/fire/gameSetup.php",
		"/D/SecureWAMP_Portable/htdocs/fire/shipclasses.js",
		"/D/SecureWAMP_Portable/htdocs/fire/mathLib.js",
		"/D/SecureWAMP_Portable/htdocs/fire/log.txt",
		"/D/SecureWAMP_Portable/htdocs/fire/dbManager.php",
		"/D/SecureWAMP_Portable/htdocs/fire/gameManager.php",
		"/D/SecureWAMP_Portable/htdocs/fire/postGameData.php",
		"/D/SecureWAMP_Portable/htdocs/fire/script.js",
		"/D/SecureWAMP_Portable/htdocs/fire/graphics.js",
		"/D/SecureWAMP_Portable/htdocs/fire/ajax.js",
		"/D/SecureWAMP_Portable/htdocs/fire/style.css",
		"/D/SecureWAMP_Portable/htdocs/fire/shared.js",
		"/D/SecureWAMP_Portable/htdocs/fire/classes.js",
		"/D/SecureWAMP_Portable/htdocs/fire/systems.js",
		"/D/SecureWAMP_Portable/htdocs/fire/imageloader.js",
		"/D/SecureWAMP_Portable/htdocs/fire/index.php",
		"/D/SecureWAMP_Portable/htdocs/fire/lobby.php",
		"/D/SecureWAMP_Portable/htdocs/fire/game.php",
		"/D/SecureWAMP_Portable/htdocs/fire/game.js",
		"/D/SecureWAMP_Portable/htdocs/fire/index.html",
		"/D/SecureWAMP_Portable/htdocs/fire/starships.php",
		"/D/SecureWAMP_Portable/htdocs/fire/cam.js",
		"/D/SecureWAMP_Portable/htdocs/fire/graphics.txt",
		"/D/SecureWAMP_Portable/htdocs/fire/jquery-ui.js",
		"/D/SecureWAMP_Portable/htdocs/fire/createGame.php",
		"/D/SecureWAMP_Portable/htdocs/fire/debug.php",
		"/D/SecureWAMP_Portable/htdocs/fire/logout.php",
		"/D/SecureWAMP_Portable/htdocs/fire/jquery-2.1.1.min.js",
		"/D/SecureWAMP_Portable/htdocs/dbManager.php",
		"/D/SecureWAMP_Portable/htdocs/Grid.js",
		"/D/SecureWAMP_Portable/htdocs/baseEvents.js",
		"/D/SecureWAMP_Portable/htdocs/HexagonTools.js",
		"/D/SecureWAMP_Portable/htdocs/HexCalcs.js",
		"/D/SecureWAMP_Portable/htdocs/index.php",
		"/D/SecureWAMP_Portable/htdocs/index.html",
		"/D/SecureWAMP_Portable/htdocs/landing.html",
		"/D/SecureWAMP_Portable/htdocs/laneSubmit.php",
		"/D/SecureWAMP_Portable/htdocs/log.txt",
		"/D/SecureWAMP_Portable/htdocs/jquery-2.1.1.min.js",
		"/D/SecureWAMP_Portable/htdocs/movement.js",
		"/D/SecureWAMP_Portable/htdocs/manager.php",
		"/D/SecureWAMP_Portable/htdocs/style.css",
		"/D/SecureWAMP_Portable/htdocs/script.js",
		"/D/SecureWAMP_Portable/htdocs/test.php",
		"/D/SecureWAMP_Portable/htdocs/admin.js",
		"/D/SecureWAMP_Portable/htdocs/table.php",
		"/D/SecureWAMP_Portable/htdocs/baseClasses.js",
		"/D/SecureWAMP_Portable/htdocs/ajaxManager.js",
		"/C/Users/Chris/AppData/Local/Nox/record/727e8323665a4ce59d77aaa4c968d350",
		"/D/SecureWAMP_Portable/htdocs/fire/server/baseship.php",
		"/D/SecureWAMP_Portable/htdocs/fire/ships/primus.php",
		"/D/SecureWAMP_Portable/htdocs/fire/ships/omega.php",
		"/D/SecureWAMP_Portable/htdocs/fire/ships.php",
		"/D/SecureWAMP_Portable/htdocs/projectX/logout.php",
		"/D/SecureWAMP_Portable/htdocs/projectX/createGame.php",
		"/D/SecureWAMP_Portable/htdocs/projectX/gameSetup.php",
		"/D/SecureWAMP_Portable/htdocs/projectX/postGameData.php",
		"/D/SecureWAMP_Portable/htdocs/projectX/getGameData.php",
		"/D/SecureWAMP_Portable/htdocs/projectX/doProcess.php",
		"/D/SecureWAMP_Portable/htdocs/projectX/gameManager.php",
		"/D/SecureWAMP_Portable/htdocs/projectX/dbManager.php",
		"/D/SecureWAMP_Portable/htdocs/projectX/table.php",
		"/D/SecureWAMP_Portable/htdocs/projectX/gameProcess.php",
		"/D/SecureWAMP_Portable/htdocs/projectX/hexagon/HexagonTools.js",
		"/D/SecureWAMP_Portable/htdocs/projectX/log.txt",
		"/D/SecureWAMP_Portable/htdocs/projectX/style.css",
		"/D/SecureWAMP_Portable/htdocs/projectX/hexagon/script.js",
		"/D/SecureWAMP_Portable/htdocs/projectX/game.php",
		"/D/SecureWAMP_Portable/htdocs/projectX/hexagon/index.html",
		"/D/SecureWAMP_Portable/htdocs/projectX/hexagon/baseEvents.js",
		"/D/SecureWAMP_Portable/htdocs/projectX/ajax.js",
		"/D/SecureWAMP_Portable/htdocs/projectX/hexagon/Grid.js",
		"/D/SecureWAMP_Portable/htdocs/projectX/hexagon/movement.js",
		"/D/SecureWAMP_Portable/htdocs/projectX/hexagon/transfer.js",
		"/D/SecureWAMP_Portable/htdocs/projectX/hexagon/admin.js",
		"/D/SecureWAMP_Portable/htdocs/projectX/hexagon/baseClasses.js",
		"/D/SecureWAMP_Portable/htdocs/projectX/hexagon/cam.js",
		"/D/SecureWAMP_Portable/htdocs/projectX/hexagon/jquery-2.1.1.min.js",
		"/D/SecureWAMP_Portable/htdocs/projectX/projectx.sublime-workspace",
		"/D/SecureWAMP_Portable/htdocs/projectX/projectx.sublime-project",
		"/D/Downloads/Urho3D-1.5/Urho3D-1.5/bin/Data/Scripts/25_Urho2DParticle.as",
		"/D/Downloads/Urho3D-1.5-Windows-SHARED/Urho3D-1.5-Windows-SHARED/share/Urho3D/Resources/Data/Scripts/01_HelloWorld.as",
		"/D/Downloads/Urho3D-1.5-Windows-SHARED/Urho3D-1.5-Windows-SHARED/share/Urho3D/Resources/Data/Scripts/03_Sprites.as",
		"/D/Downloads/Urho3D-1.5-Windows-SHARED/Urho3D-1.5-Windows-SHARED/share/Urho3D/Resources/Data/Scripts/Utilities/Sample.as",
		"/D/Downloads/Urho3D-1.5-Windows-SHARED/Urho3D-1.5-Windows-SHARED/share/Urho3D/Resources/Data/Scripts/26_ConsoleInput.as",
		"/D/Downloads/Urho3D-1.5/Urho3D-1.5/bin/Data/Scripts/07_Billboards.as"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
			"",
			"*.php",
			"",
			"*.js",
			"",
			"*.php",
			"",
			"*.php",
			"",
			"*.js",
			"",
			"*.php",
			"",
			"*.php",
			"manager.php",
			"*.php",
			"",
			"*.js",
			"",
			"classes.js",
			"",
			"*.php",
			"",
			"*.php",
			"",
			"*.php",
			"",
			"*.php",
			"*,php",
			"",
			"*.php",
			"\t",
			"",
			"*.js",
			"",
			"classes.js",
			"",
			"*.js",
			".js",
			"",
			"systems.js",
			"",
			"*.php",
			"",
			"*.php",
			"",
			"*.php",
			"",
			"*.php",
			"",
			"*.js",
			"",
			"*.php",
			"",
			"lobby.php",
			"",
			"*.php",
			"",
			"addFighter",
			"",
			"*.php",
			"",
			"*.php",
			"",
			"*.php",
			"",
			"*.js",
			"",
			"*.js",
			"",
			"aUnit",
			"",
			"aShip",
			"",
			"*.js",
			"",
			"*.php",
			"",
			"*.js",
			"",
			"*.php",
			"",
			"*.php",
			"",
			"*.php",
			"",
			"*.php",
			"",
			"*.js",
			"",
			"*.js",
			"",
			"#",
			"*.php",
			"",
			"*.js",
			"",
			"*.php",
			"",
			"*.php",
			"*p.hp",
			"*php",
			"",
			"salvo.php",
			"*.php",
			"salvo.php",
			"*.php",
			"",
			"*.php",
			"",
			"*.php",
			"",
			"getActiveUnits",
			"",
			"*.js",
			"*.php",
			"",
			"*.js",
			"*",
			"",
			"*.js",
			".js",
			"",
			"*.js",
			"",
			"*.php",
			"*.*",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"baseturndelay",
			"$(this.ships[i].element)",
			"setShipD",
			"setShipDi",
			"PreMoveImage",
			"premoveimage",
			"_drag_init",
			"dragging",
			"disabled",
			".power ",
			"powerdiv ",
			"hover ",
			"hover",
			"settablerow",
			"powerdiv",
			".power",
			"primary",
			"unpower",
			"setpremoveimage",
			"animateFireOrders",
			"resolvefire",
			"#reinforce\"",
			"#reinforce",
			"reinforce",
			"#reinforce",
			"reinforce",
			"reinfor",
			"setshipdiv",
			"resolveDeployment",
			"initDeployment",
			"confirmmov",
			"confirmdepl",
			"baseimpulsec",
			"deployentries",
			"deploylog",
			"deployloge",
			"primarytable.system",
			"primarytable",
			"primaryDiv",
			"\t\tprimaryTable.childNodes[0].childNodes[0].colSpan = max;\n\t\tprimaryTable.childNodes[0].childNodes[0].colSpan = max;\nprimary",
			"\t\tprimaryTable.childNodes[0].childNodes[0].colSpan = max;\nprimary",
			"gethitsystem",
			"$this->primary->systems[] = new Lifesupport",
			"launchRate",
			"\"rof\"",
			"\"",
			"RoF",
			"launchRate",
			"launchrate",
			"RoF\"",
			"RoF",
			"\".not",
			".notes",
			"spike",
			"getUnitById(",
			"var need",
			" ",
			"var need",
			"getanimation",
			"particle.prototype.get",
			"explosionde",
			"drawunitexplo",
			"setescortimag",
			"setescorti",
			"id == 14",
			".facing = ",
			"facing = ",
			"setFacing",
			"this.setpre",
			"setescortim",
			"drawescort",
			"drawescortima",
			"escortimage",
			"adjustZoom",
			"was deployed",
			"deployment l",
			"selectionw",
			"width: 20",
			"canbeboosted",
			"canBeBoosted",
			"getActiveSyytem",
			"getActiveSystem",
			"canBeBoosted",
			"outputmask",
			"settablerow",
			"getActiveWeapon",
			".find(\".outputMask\").show().end()",
			"setInterval",
			"username",
			"getUsername",
			"insertChatmsg",
			"ajax",
			"userid",
			"joinGame",
			"insert into ",
			"insert into chat ",
			"query",
			"destroyed = :de",
			"destroyed = :",
			"endturn",
			"destroyUnitsDB",
			"destroyed = ",
			"endturn",
			"unit",
			"endturn",
			"handlefiringph",
			"doselect ",
			"doselect",
			"enableHangarDeployment",
			"drawAllSensorSettings",
			"doboost ",
			"drawSensorArc",
			"drawShipOverlays",
			"drawCtx",
			"enableDeployment",
			"deploying = ",
			"deploying",
			"getAnimation",
			"getAnimatio",
			"unitexplos",
			"animateunite",
			"game.isc",
			"getFireDest",
			"particle.prototype.ge",
			"drawimg",
			"explosize =",
			"combatlogentr",
			"shipexp"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"//$this->primary->systems[] = new Lifesupport",
			"getUnit(",
			"getActiveSystem",
			"getActiveSyytem",
			"insertChatMsg",
			"missionSwitch",
			"getUnitById",
			"insertClientActions($",
			"turn",
			"phase",
			"turn",
			"insertMission",
			"$unit",
			"doGenericHover",
			"data",
			"$unitType",
			"this.size",
			"size",
			"mission.type == 2 || this.mission.type == 3",
			"mission.type == 2 || mission.type == 3",
			"addMissionDB",
			"hangar.",
			"this.deploys[i]",
			"mouseCtx",
			"doOverkill",
			"applyOverkill",
			"new",
			"$this->boostEffect[] = new",
			"$manager->incoming[$i]",
			"$units",
			"insertServerActions",
			"$units[$i][\"actions\"][$j]",
			"insertClientActions",
			"drawMovePlan",
			"element",
			"",
			"getRemainingIntegrity",
			"getImpulseProfileMod",
			"getShots($this->turn)",
			"public function getShots($turn){",
			"getEWSettings",
			"ctx",
			"</span>",
			"<span class='red'",
			"<span",
			"ballistics",
			"if (this.destroyed || this.disabled || this.locked){",
			"$this",
			"doDamage($fire, $roll, $system)",
			"rollToHit",
			"getSection",
			"angle",
			"section",
			"$negation = $fire->target->getArmourValue($fire, $hitSystem);",
			"$negation = $fire->target->getArmourElement($fire) * $hitSystem->getArmourMod();",
			"salvo",
			"move",
			"moveAngles",
			"getPlannedFacing",
			"planCtx",
			"moveCtx",
			"Debug::",
			"drawEW",
			"mouse",
			"loc",
			"salvoCtx",
			"salvoPathCtx",
			".",
			"= data.",
			"getTraverseMod",
			"ding",
			"getCritMod",
			"= data.",
			", \"LightParticleBeam\"",
			"deployArea[i].",
			"deployArea[i]",
			"MediumPlasma",
			"Dual",
			"getActiveSystem",
			"setState = function($turn)",
			"setState($turn)",
			"setSystemBorder",
			"gui",
			"ele",
			"boostable",
			"MediumPulse",
			"LightPulse",
			"getImpulse",
			"system",
			"= data.",
			"",
			"getTotalImpulse",
			"getRemainingImpulse()",
			"structContainer",
			"ele",
			" = data.",
			"hit",
			"system",
			"fire.explo.t",
			"end",
			"fire.",
			", maxBoost, boostEffect);",
			", maxBoost, boostEffect){",
			"maxBoost, boostEffect, ",
			"__construct($id, $userid, $available, $status, $destroyed){",
			"construct($id, $userid, $available, $status, $destroyed);",
			"[k]",
			"ele.anim[0].",
			"ele.anim[k].",
			"animate",
			"window.animation.ballAnims[i]",
			"game.ballistics",
			"ballAnims",
			"window.animate.ballAnims",
			"",
			"getPosition",
			"",
			"finalStep",
			"finalPos",
			"setFinalStep",
			"setFinalDestination",
			"setFinalPosition",
			"",
			"hasUnresolvedFireOrder",
			"data",
			"$ballistic",
			"FusionCannon",
			"HeavyIon"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 8,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "ajax.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7178,
						"regions":
						{
						},
						"selection":
						[
							[
								5647,
								5647
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3113.0,
						"zoom_level": 1.0
					},
					"stack_index": 25,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "server/classes.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5274,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"auto_name": "<?php",
							"bh_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 351.0,
						"zoom_level": 1.0
					},
					"stack_index": 79,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "classes.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15680,
						"regions":
						{
						},
						"selection":
						[
							[
								2341,
								2341
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1633.0,
						"zoom_level": 1.0
					},
					"stack_index": 58,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "salvo.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9307,
						"regions":
						{
						},
						"selection":
						[
							[
								9117,
								9117
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 4160.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "style.css",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21567,
						"regions":
						{
						},
						"selection":
						[
							[
								14993,
								14993
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/CSS/CSS.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 15033.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "test.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2951,
						"regions":
						{
						},
						"selection":
						[
							[
								392,
								392
							]
						],
						"settings":
						{
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 103,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "shipclasses.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 84965,
						"regions":
						{
						},
						"selection":
						[
							[
								14201,
								14214
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 6949.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "debug.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/PHP/PHP.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 59,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "mixed.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14179,
						"regions":
						{
						},
						"selection":
						[
							[
								1411,
								1411
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 814.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "mathLib.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6275,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 78,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "server/mixed.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6622,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2067.0,
						"zoom_level": 1.0
					},
					"stack_index": 77,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "global.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 457,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 88,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "server/math.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3193,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 7.0,
						"zoom_level": 1.0
					},
					"stack_index": 90,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "server/systems/weapons/particle.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2968,
						"regions":
						{
						},
						"selection":
						[
							[
								1648,
								1648
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 378.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "game.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 22940,
						"regions":
						{
						},
						"selection":
						[
							[
								18797,
								18797
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 8705.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "server/manager.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 47304,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 13462.0,
						"zoom_level": 1.0
					},
					"stack_index": 56,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "server/flight.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1800,
						"regions":
						{
						},
						"selection":
						[
							[
								160,
								161
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"auto_name": "<?php",
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "server/ships/omega.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3642,
						"regions":
						{
						},
						"selection":
						[
							[
								1597,
								1597
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 38,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "server/ships/hyperion.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2777,
						"regions":
						{
						},
						"selection":
						[
							[
								2530,
								2573
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 168.0,
						"zoom_level": 1.0
					},
					"stack_index": 40,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "server/ships/saggitarius.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2571,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 54.0,
						"zoom_level": 1.0
					},
					"stack_index": 36,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "server/ships/artemis.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2256,
						"regions":
						{
						},
						"selection":
						[
							[
								184,
								184
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "server/ships/tethys.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1613,
						"regions":
						{
						},
						"selection":
						[
							[
								200,
								200
							]
						],
						"settings":
						{
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 34,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "systems.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 88832,
						"regions":
						{
						},
						"selection":
						[
							[
								10458,
								10458
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 4807.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "imageloader.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3929,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 845.0,
						"zoom_level": 1.0
					},
					"stack_index": 75,
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "server/ships/battlecrab.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1686,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 56.0,
						"zoom_level": 1.0
					},
					"stack_index": 104,
					"type": "text"
				},
				{
					"buffer": 25,
					"file": "server/systems/structure.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5299,
						"regions":
						{
						},
						"selection":
						[
							[
								1881,
								1881
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 778.0,
						"zoom_level": 1.0
					},
					"stack_index": 30,
					"type": "text"
				},
				{
					"buffer": 26,
					"file": "postGameData.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3022,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 42.0,
						"zoom_level": 1.0
					},
					"stack_index": 66,
					"type": "text"
				},
				{
					"buffer": 27,
					"file": "server/systems/weapons/dual.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2688,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 204.0,
						"zoom_level": 1.0
					},
					"stack_index": 99,
					"type": "text"
				},
				{
					"buffer": 28,
					"file": "cam.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2799,
						"regions":
						{
						},
						"selection":
						[
							[
								1320,
								1320
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 447.0,
						"zoom_level": 1.0
					},
					"stack_index": 23,
					"type": "text"
				},
				{
					"buffer": 29,
					"file": "server/systems/system.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5697,
						"regions":
						{
						},
						"selection":
						[
							[
								382,
								382
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 29,
					"type": "text"
				},
				{
					"buffer": 30,
					"file": "server/systems/weapon.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4497,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 196.0,
						"zoom_level": 1.0
					},
					"stack_index": 80,
					"type": "text"
				},
				{
					"buffer": 31,
					"file": "server/systems/weapons/em.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2481,
						"regions":
						{
						},
						"selection":
						[
							[
								392,
								392
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 81,
					"type": "text"
				},
				{
					"buffer": 32,
					"file": "server/systems/weapons/area.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1057,
						"regions":
						{
						},
						"selection":
						[
							[
								479,
								479
							]
						],
						"settings":
						{
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 85,
					"type": "text"
				},
				{
					"buffer": 33,
					"file": "server/systems/nonweapon.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6234,
						"regions":
						{
						},
						"selection":
						[
							[
								1827,
								1827
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 350.0,
						"zoom_level": 1.0
					},
					"stack_index": 28,
					"type": "text"
				},
				{
					"buffer": 34,
					"file": "server/systems/weapons/laser.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6750,
						"regions":
						{
						},
						"selection":
						[
							[
								2826,
								2826
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"history_list_is_closing": true,
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 921.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 35,
					"file": "server/systems/weapons/launcher.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1982,
						"regions":
						{
						},
						"selection":
						[
							[
								731,
								732
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 47,
					"type": "text"
				},
				{
					"buffer": 36,
					"file": "server/fighter.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4488,
						"regions":
						{
						},
						"selection":
						[
							[
								2936,
								2936
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"auto_name": "<php",
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1351.0,
						"zoom_level": 1.0
					},
					"stack_index": 70,
					"type": "text"
				},
				{
					"buffer": 37,
					"file": "server/ship.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 31189,
						"regions":
						{
						},
						"selection":
						[
							[
								3976,
								3976
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1649.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 38,
					"file": "server/salvo.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1654,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 227.0,
						"zoom_level": 1.0
					},
					"stack_index": 71,
					"type": "text"
				},
				{
					"buffer": 25,
					"file": "server/systems/structure.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5299,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 337.0,
						"zoom_level": 1.0
					},
					"stack_index": 69,
					"type": "text"
				},
				{
					"buffer": 39,
					"file": "server/systems/weapons/pulse.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4270,
						"regions":
						{
						},
						"selection":
						[
							[
								2273,
								2273
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1187.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"type": "text"
				},
				{
					"buffer": 40,
					"file": "graphics.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8626,
						"regions":
						{
						},
						"selection":
						[
							[
								7386,
								7386
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"spell_check": true,
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3161.0,
						"zoom_level": 1.0
					},
					"stack_index": 74,
					"type": "text"
				},
				{
					"buffer": 41,
					"file": "server/ships/olympus.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1910,
						"regions":
						{
						},
						"selection":
						[
							[
								1320,
								1320
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 39,
					"type": "text"
				},
				{
					"buffer": 42,
					"file": "server/debug.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 188,
						"regions":
						{
						},
						"selection":
						[
							[
								188,
								188
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 67,
					"type": "text"
				},
				{
					"buffer": 43,
					"file": "createGame.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1418,
						"regions":
						{
						},
						"selection":
						[
							[
								860,
								860
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 108,
					"type": "text"
				},
				{
					"buffer": 44,
					"file": "script.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14129,
						"regions":
						{
						},
						"selection":
						[
							[
								6244,
								6244
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2974.0,
						"zoom_level": 1.0
					},
					"stack_index": 57,
					"type": "text"
				},
				{
					"buffer": 45,
					"file": "lobby.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8127,
						"regions":
						{
						},
						"selection":
						[
							[
								816,
								816
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 157.0,
						"zoom_level": 1.0
					},
					"stack_index": 62,
					"type": "text"
				},
				{
					"buffer": 46,
					"file": "game.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 68668,
						"regions":
						{
						},
						"selection":
						[
							[
								68370,
								68370
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 34683.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 47,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 273974,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										159,
										171
									],
									[
										481,
										493
									],
									[
										685,
										695
									],
									[
										949,
										959
									],
									[
										1231,
										1240
									],
									[
										1414,
										1423
									],
									[
										1689,
										1698
									],
									[
										1886,
										1895
									],
									[
										2254,
										2263
									],
									[
										2490,
										2499
									],
									[
										2676,
										2685
									],
									[
										2923,
										2932
									],
									[
										3129,
										3138
									],
									[
										3261,
										3270
									],
									[
										3460,
										3469
									],
									[
										3672,
										3681
									],
									[
										3871,
										3880
									],
									[
										4042,
										4051
									],
									[
										4182,
										4191
									],
									[
										4316,
										4325
									],
									[
										4457,
										4466
									],
									[
										4652,
										4661
									],
									[
										5001,
										5010
									],
									[
										5237,
										5246
									],
									[
										5521,
										5530
									],
									[
										5685,
										5694
									],
									[
										5938,
										5947
									],
									[
										6102,
										6111
									],
									[
										6209,
										6218
									],
									[
										6340,
										6349
									],
									[
										6514,
										6523
									],
									[
										6550,
										6559
									],
									[
										6757,
										6766
									],
									[
										6800,
										6809
									],
									[
										6918,
										6927
									],
									[
										7027,
										7036
									],
									[
										7205,
										7214
									],
									[
										7287,
										7296
									],
									[
										7325,
										7334
									],
									[
										7503,
										7512
									],
									[
										7607,
										7616
									],
									[
										7742,
										7751
									],
									[
										7961,
										7970
									],
									[
										8195,
										8205
									],
									[
										8444,
										8454
									],
									[
										8656,
										8666
									],
									[
										8855,
										8865
									],
									[
										9095,
										9105
									],
									[
										9313,
										9323
									],
									[
										9516,
										9526
									],
									[
										9757,
										9767
									],
									[
										9946,
										9956
									],
									[
										10163,
										10173
									],
									[
										10412,
										10422
									],
									[
										10624,
										10634
									],
									[
										10823,
										10833
									],
									[
										11063,
										11073
									],
									[
										11281,
										11291
									],
									[
										11484,
										11494
									],
									[
										11725,
										11735
									],
									[
										11914,
										11924
									],
									[
										12144,
										12152
									],
									[
										12313,
										12321
									],
									[
										12557,
										12565
									],
									[
										12808,
										12816
									],
									[
										13021,
										13029
									],
									[
										13219,
										13227
									],
									[
										13505,
										13513
									],
									[
										13756,
										13764
									],
									[
										13969,
										13977
									],
									[
										14167,
										14175
									],
									[
										14469,
										14472
									],
									[
										14674,
										14677
									],
									[
										14893,
										14896
									],
									[
										15096,
										15099
									],
									[
										15137,
										15140
									],
									[
										15294,
										15297
									],
									[
										15579,
										15582
									],
									[
										15772,
										15775
									],
									[
										15965,
										15968
									],
									[
										16164,
										16167
									],
									[
										16358,
										16361
									],
									[
										16549,
										16552
									],
									[
										16740,
										16743
									],
									[
										16931,
										16934
									],
									[
										17122,
										17125
									],
									[
										17315,
										17318
									],
									[
										17508,
										17511
									],
									[
										17703,
										17706
									],
									[
										17901,
										17904
									],
									[
										18095,
										18098
									],
									[
										18287,
										18290
									],
									[
										18480,
										18483
									],
									[
										18671,
										18674
									],
									[
										18866,
										18869
									],
									[
										19063,
										19066
									],
									[
										19240,
										19243
									],
									[
										19255,
										19258
									],
									[
										19380,
										19383
									],
									[
										19668,
										19671
									],
									[
										19717,
										19720
									],
									[
										19842,
										19845
									],
									[
										19878,
										19881
									],
									[
										20286,
										20289
									],
									[
										20903,
										20907
									],
									[
										21317,
										21327
									],
									[
										21525,
										21535
									],
									[
										21748,
										21758
									],
									[
										21959,
										21969
									],
									[
										22174,
										22177
									],
									[
										22379,
										22382
									],
									[
										22598,
										22601
									],
									[
										22801,
										22804
									],
									[
										22842,
										22845
									],
									[
										22999,
										23002
									],
									[
										23284,
										23287
									],
									[
										23477,
										23480
									],
									[
										23670,
										23673
									],
									[
										23869,
										23872
									],
									[
										24063,
										24066
									],
									[
										24254,
										24257
									],
									[
										24445,
										24448
									],
									[
										24636,
										24639
									],
									[
										24827,
										24830
									],
									[
										25020,
										25023
									],
									[
										25213,
										25216
									],
									[
										25408,
										25411
									],
									[
										25606,
										25609
									],
									[
										25800,
										25803
									],
									[
										25992,
										25995
									],
									[
										26185,
										26188
									],
									[
										26376,
										26379
									],
									[
										26571,
										26574
									],
									[
										26814,
										26815
									],
									[
										26820,
										26821
									],
									[
										26823,
										26824
									],
									[
										26832,
										26833
									],
									[
										26963,
										26964
									],
									[
										26969,
										26970
									],
									[
										26996,
										26997
									],
									[
										27008,
										27009
									],
									[
										27036,
										27037
									],
									[
										27039,
										27040
									],
									[
										27074,
										27075
									],
									[
										27080,
										27081
									],
									[
										27142,
										27143
									],
									[
										27148,
										27149
									],
									[
										27165,
										27166
									],
									[
										27171,
										27172
									],
									[
										27188,
										27189
									],
									[
										27194,
										27195
									],
									[
										27254,
										27255
									],
									[
										27260,
										27261
									],
									[
										27289,
										27290
									],
									[
										27301,
										27302
									],
									[
										27329,
										27330
									],
									[
										27332,
										27333
									],
									[
										27377,
										27378
									],
									[
										27381,
										27382
									],
									[
										27415,
										27416
									],
									[
										27421,
										27422
									],
									[
										27448,
										27449
									],
									[
										27454,
										27455
									],
									[
										27471,
										27472
									],
									[
										27477,
										27478
									],
									[
										27534,
										27535
									],
									[
										27576,
										27577
									],
									[
										27594,
										27595
									],
									[
										27604,
										27605
									],
									[
										27715,
										27716
									],
									[
										27811,
										27812
									],
									[
										27837,
										27838
									],
									[
										27880,
										27881
									],
									[
										27888,
										27889
									],
									[
										27891,
										27892
									],
									[
										27918,
										27919
									],
									[
										27923,
										27924
									],
									[
										27950,
										27951
									],
									[
										27961,
										27962
									],
									[
										27987,
										27988
									],
									[
										28016,
										28017
									],
									[
										28034,
										28035
									],
									[
										28048,
										28049
									],
									[
										28066,
										28067
									],
									[
										28085,
										28086
									],
									[
										28103,
										28104
									],
									[
										28121,
										28122
									],
									[
										28139,
										28140
									],
									[
										28158,
										28159
									],
									[
										28176,
										28177
									],
									[
										28195,
										28196
									],
									[
										28213,
										28214
									],
									[
										28234,
										28235
									],
									[
										28252,
										28253
									],
									[
										28258,
										28259
									],
									[
										28327,
										28328
									],
									[
										28332,
										28333
									],
									[
										28359,
										28360
									],
									[
										28365,
										28366
									],
									[
										28404,
										28405
									],
									[
										28410,
										28411
									],
									[
										28437,
										28438
									],
									[
										28442,
										28443
									],
									[
										28525,
										28526
									],
									[
										28531,
										28532
									],
									[
										28659,
										28660
									],
									[
										28664,
										28665
									],
									[
										28722,
										28723
									],
									[
										28728,
										28729
									],
									[
										28757,
										28758
									],
									[
										28762,
										28763
									],
									[
										28810,
										28811
									],
									[
										28816,
										28817
									],
									[
										28845,
										28846
									],
									[
										28850,
										28851
									],
									[
										28924,
										28925
									],
									[
										28930,
										28931
									],
									[
										28959,
										28960
									],
									[
										28964,
										28965
									],
									[
										29049,
										29050
									],
									[
										29055,
										29056
									],
									[
										29154,
										29155
									],
									[
										29160,
										29161
									],
									[
										29282,
										29283
									],
									[
										29292,
										29293
									],
									[
										29311,
										29312
									],
									[
										29321,
										29322
									],
									[
										29340,
										29341
									],
									[
										29350,
										29351
									],
									[
										29369,
										29370
									],
									[
										29379,
										29380
									],
									[
										29398,
										29399
									],
									[
										29408,
										29409
									],
									[
										29427,
										29428
									],
									[
										29437,
										29438
									],
									[
										29456,
										29457
									],
									[
										29461,
										29462
									],
									[
										29479,
										29480
									],
									[
										29485,
										29486
									],
									[
										29490,
										29491
									],
									[
										29496,
										29497
									],
									[
										29514,
										29515
									],
									[
										29519,
										29520
									],
									[
										29563,
										29564
									],
									[
										29569,
										29570
									],
									[
										29587,
										29588
									],
									[
										29592,
										29593
									],
									[
										29644,
										29645
									],
									[
										29650,
										29651
									],
									[
										29668,
										29669
									],
									[
										29673,
										29674
									],
									[
										29688,
										29689
									],
									[
										29694,
										29695
									],
									[
										29712,
										29713
									],
									[
										29717,
										29718
									],
									[
										29732,
										29733
									],
									[
										29738,
										29739
									],
									[
										29756,
										29757
									],
									[
										29761,
										29762
									],
									[
										29808,
										29809
									],
									[
										29814,
										29815
									],
									[
										29832,
										29833
									],
									[
										29838,
										29839
									],
									[
										29923,
										29924
									],
									[
										29932,
										29933
									],
									[
										29935,
										29936
									],
									[
										29944,
										29945
									],
									[
										29965,
										29966
									],
									[
										29974,
										29975
									],
									[
										29977,
										29978
									],
									[
										29985,
										29986
									],
									[
										30054,
										30055
									],
									[
										30091,
										30092
									],
									[
										30109,
										30110
									],
									[
										30119,
										30120
									],
									[
										30251,
										30252
									],
									[
										30258,
										30259
									],
									[
										30289,
										30290
									],
									[
										30298,
										30299
									],
									[
										30318,
										30319
									],
									[
										30329,
										30330
									],
									[
										30356,
										30357
									],
									[
										30365,
										30366
									],
									[
										30371,
										30372
									],
									[
										30372,
										30373
									],
									[
										30384,
										30385
									],
									[
										30395,
										30396
									],
									[
										30401,
										30402
									],
									[
										30402,
										30403
									],
									[
										30439,
										30440
									],
									[
										30450,
										30451
									],
									[
										30557,
										30558
									],
									[
										30564,
										30565
									],
									[
										30575,
										30576
									],
									[
										30584,
										30585
									],
									[
										30595,
										30596
									],
									[
										30606,
										30607
									],
									[
										30651,
										30652
									],
									[
										30683,
										30684
									],
									[
										30749,
										30750
									],
									[
										30805,
										30806
									],
									[
										30863,
										30864
									],
									[
										30920,
										30921
									],
									[
										30980,
										30981
									],
									[
										31021,
										31022
									],
									[
										31133,
										31134
									],
									[
										31153,
										31154
									],
									[
										31255,
										31256
									],
									[
										31280,
										31281
									],
									[
										31381,
										31382
									],
									[
										31386,
										31387
									],
									[
										31469,
										31470
									],
									[
										31474,
										31475
									],
									[
										31503,
										31504
									],
									[
										31513,
										31514
									],
									[
										31520,
										31521
									],
									[
										31529,
										31530
									],
									[
										31640,
										31641
									],
									[
										31645,
										31646
									],
									[
										31659,
										31660
									],
									[
										31671,
										31672
									],
									[
										31678,
										31679
									],
									[
										31689,
										31690
									],
									[
										31800,
										31801
									],
									[
										31807,
										31808
									],
									[
										31815,
										31816
									],
									[
										31831,
										31832
									],
									[
										31951,
										31952
									],
									[
										31958,
										31959
									],
									[
										32028,
										32029
									],
									[
										32035,
										32036
									],
									[
										32070,
										32071
									],
									[
										32077,
										32078
									],
									[
										32196,
										32197
									],
									[
										32203,
										32204
									],
									[
										32271,
										32272
									],
									[
										32291,
										32292
									],
									[
										32332,
										32333
									],
									[
										32358,
										32359
									],
									[
										32368,
										32369
									],
									[
										32387,
										32388
									],
									[
										32397,
										32398
									],
									[
										32408,
										32409
									],
									[
										32495,
										32496
									],
									[
										32516,
										32517
									],
									[
										32569,
										32570
									],
									[
										32586,
										32587
									],
									[
										32639,
										32640
									],
									[
										32655,
										32656
									],
									[
										32708,
										32709
									],
									[
										32722,
										32723
									],
									[
										32775,
										32776
									],
									[
										32790,
										32791
									],
									[
										32912,
										32913
									],
									[
										32919,
										32920
									],
									[
										32962,
										32963
									],
									[
										32969,
										32970
									],
									[
										33107,
										33108
									],
									[
										33116,
										33117
									],
									[
										33131,
										33132
									],
									[
										33146,
										33147
									],
									[
										33154,
										33155
									],
									[
										33156,
										33157
									],
									[
										33171,
										33172
									],
									[
										33194,
										33195
									],
									[
										33252,
										33253
									],
									[
										33254,
										33255
									],
									[
										33269,
										33270
									],
									[
										33279,
										33280
									],
									[
										33390,
										33391
									],
									[
										33410,
										33411
									],
									[
										33561,
										33562
									],
									[
										33574,
										33575
									],
									[
										33595,
										33596
									],
									[
										33605,
										33606
									],
									[
										33658,
										33659
									],
									[
										33674,
										33675
									],
									[
										33695,
										33696
									],
									[
										33708,
										33709
									],
									[
										33761,
										33762
									],
									[
										33766,
										33767
									],
									[
										33787,
										33788
									],
									[
										33802,
										33803
									],
									[
										33824,
										33825
									],
									[
										33844,
										33845
									],
									[
										33852,
										33853
									],
									[
										33861,
										33862
									],
									[
										33920,
										33921
									],
									[
										33926,
										33927
									],
									[
										34043,
										34044
									],
									[
										34051,
										34052
									],
									[
										34130,
										34131
									],
									[
										34204,
										34205
									],
									[
										34232,
										34233
									],
									[
										34302,
										34303
									],
									[
										34330,
										34331
									],
									[
										34405,
										34406
									],
									[
										34433,
										34434
									],
									[
										34509,
										34510
									],
									[
										34537,
										34538
									],
									[
										34650,
										34651
									],
									[
										34678,
										34679
									],
									[
										34899,
										34900
									],
									[
										34927,
										34928
									],
									[
										35055,
										35056
									],
									[
										35083,
										35084
									],
									[
										35249,
										35250
									],
									[
										35277,
										35278
									],
									[
										35421,
										35422
									],
									[
										35449,
										35450
									],
									[
										35596,
										35597
									],
									[
										35624,
										35625
									],
									[
										35750,
										35751
									],
									[
										35778,
										35779
									],
									[
										35935,
										35936
									],
									[
										35963,
										35964
									],
									[
										36118,
										36119
									],
									[
										36146,
										36147
									],
									[
										36494,
										36495
									],
									[
										36522,
										36523
									],
									[
										36746,
										36747
									],
									[
										36774,
										36775
									],
									[
										36948,
										36949
									],
									[
										36976,
										36977
									],
									[
										37086,
										37087
									],
									[
										37114,
										37115
									],
									[
										37375,
										37376
									],
									[
										37403,
										37404
									],
									[
										37620,
										37621
									],
									[
										37648,
										37649
									],
									[
										37808,
										37809
									],
									[
										37836,
										37837
									],
									[
										38474,
										38475
									],
									[
										38502,
										38503
									],
									[
										39080,
										39081
									],
									[
										39108,
										39109
									],
									[
										39454,
										39455
									],
									[
										39482,
										39483
									],
									[
										39838,
										39839
									],
									[
										40004,
										40005
									],
									[
										40016,
										40017
									],
									[
										40024,
										40025
									],
									[
										40027,
										40028
									],
									[
										40050,
										40051
									],
									[
										40068,
										40069
									],
									[
										40076,
										40077
									],
									[
										40102,
										40103
									],
									[
										40140,
										40141
									],
									[
										40153,
										40154
									],
									[
										40161,
										40162
									],
									[
										40164,
										40165
									],
									[
										40187,
										40188
									],
									[
										40206,
										40207
									],
									[
										40214,
										40215
									],
									[
										40240,
										40241
									],
									[
										40278,
										40279
									],
									[
										40293,
										40294
									],
									[
										40301,
										40302
									],
									[
										40304,
										40305
									],
									[
										40327,
										40328
									],
									[
										40350,
										40351
									],
									[
										40358,
										40359
									],
									[
										40384,
										40385
									],
									[
										40422,
										40423
									],
									[
										40433,
										40434
									],
									[
										40441,
										40442
									],
									[
										40461,
										40462
									],
									[
										40488,
										40489
									],
									[
										40495,
										40496
									],
									[
										40503,
										40504
									],
									[
										40529,
										40530
									],
									[
										40572,
										40573
									],
									[
										40589,
										40590
									],
									[
										40654,
										40655
									],
									[
										40663,
										40664
									],
									[
										40671,
										40672
									],
									[
										40690,
										40691
									],
									[
										40789,
										40790
									],
									[
										40806,
										40807
									],
									[
										40869,
										40870
									],
									[
										40880,
										40881
									],
									[
										40888,
										40889
									],
									[
										40907,
										40908
									],
									[
										40987,
										40988
									],
									[
										41004,
										41005
									],
									[
										41069,
										41070
									],
									[
										41078,
										41079
									],
									[
										41086,
										41087
									],
									[
										41118,
										41119
									],
									[
										41198,
										41199
									],
									[
										41215,
										41216
									],
									[
										41281,
										41282
									],
									[
										41291,
										41292
									],
									[
										41299,
										41300
									],
									[
										41331,
										41332
									],
									[
										41411,
										41412
									],
									[
										41428,
										41429
									],
									[
										41491,
										41492
									],
									[
										41499,
										41500
									],
									[
										41507,
										41508
									],
									[
										41539,
										41540
									],
									[
										41598,
										41599
									],
									[
										41610,
										41611
									],
									[
										41618,
										41619
									],
									[
										41627,
										41628
									],
									[
										41673,
										41674
									],
									[
										41687,
										41688
									],
									[
										41716,
										41717
									],
									[
										41723,
										41724
									],
									[
										41729,
										41730
									],
									[
										41752,
										41753
									],
									[
										41838,
										41839
									],
									[
										41856,
										41857
									],
									[
										41885,
										41886
									],
									[
										41892,
										41893
									],
									[
										41898,
										41899
									],
									[
										41922,
										41923
									],
									[
										42026,
										42027
									],
									[
										42035,
										42036
									],
									[
										42043,
										42044
									],
									[
										42063,
										42064
									],
									[
										42090,
										42091
									],
									[
										42116,
										42117
									],
									[
										42159,
										42160
									],
									[
										42188,
										42189
									],
									[
										42258,
										42259
									],
									[
										42264,
										42265
									],
									[
										42272,
										42273
									],
									[
										42291,
										42292
									],
									[
										42368,
										42369
									],
									[
										42380,
										42381
									],
									[
										42388,
										42389
									],
									[
										42405,
										42406
									],
									[
										42477,
										42478
									],
									[
										42489,
										42490
									],
									[
										42497,
										42498
									],
									[
										42516,
										42517
									],
									[
										42611,
										42612
									],
									[
										42624,
										42625
									],
									[
										42632,
										42633
									],
									[
										42644,
										42645
									],
									[
										42705,
										42706
									],
									[
										42719,
										42720
									],
									[
										42727,
										42728
									],
									[
										42739,
										42740
									],
									[
										42800,
										42801
									],
									[
										42810,
										42811
									],
									[
										42818,
										42819
									],
									[
										42830,
										42831
									],
									[
										42891,
										42892
									],
									[
										42900,
										42901
									],
									[
										42924,
										42925
									],
									[
										42933,
										42934
									],
									[
										42976,
										42977
									],
									[
										42980,
										42981
									],
									[
										43044,
										43045
									],
									[
										43048,
										43049
									],
									[
										43113,
										43114
									],
									[
										43117,
										43118
									],
									[
										43244,
										43245
									],
									[
										43254,
										43255
									],
									[
										43410,
										43411
									],
									[
										43419,
										43420
									],
									[
										43427,
										43428
									],
									[
										43453,
										43454
									],
									[
										43526,
										43527
									],
									[
										43532,
										43533
									],
									[
										43577,
										43578
									],
									[
										43586,
										43587
									],
									[
										43594,
										43595
									],
									[
										43624,
										43625
									],
									[
										43715,
										43716
									],
									[
										43724,
										43725
									],
									[
										43732,
										43733
									],
									[
										43748,
										43749
									],
									[
										43758,
										43759
									],
									[
										43793,
										43794
									],
									[
										43907,
										43908
									],
									[
										43915,
										43916
									],
									[
										43953,
										43954
									],
									[
										43963,
										43964
									],
									[
										43988,
										43989
									],
									[
										43995,
										43996
									],
									[
										44029,
										44030
									],
									[
										44038,
										44039
									],
									[
										44072,
										44073
									],
									[
										44083,
										44084
									],
									[
										44117,
										44118
									],
									[
										44128,
										44129
									],
									[
										44162,
										44163
									],
									[
										44174,
										44175
									],
									[
										44208,
										44209
									],
									[
										44220,
										44221
									],
									[
										44254,
										44255
									],
									[
										44265,
										44266
									],
									[
										44312,
										44313
									],
									[
										44322,
										44323
									],
									[
										44330,
										44331
									],
									[
										44339,
										44340
									],
									[
										44381,
										44382
									],
									[
										44403,
										44404
									],
									[
										44411,
										44412
									],
									[
										44420,
										44421
									],
									[
										44444,
										44445
									],
									[
										44455,
										44456
									],
									[
										44594,
										44595
									],
									[
										44606,
										44607
									],
									[
										44727,
										44728
									],
									[
										44739,
										44740
									],
									[
										44853,
										44854
									],
									[
										44864,
										44865
									],
									[
										44984,
										44985
									],
									[
										45001,
										45002
									],
									[
										45009,
										45010
									],
									[
										45018,
										45019
									],
									[
										45043,
										45044
									],
									[
										45059,
										45060
									],
									[
										45124,
										45125
									],
									[
										45134,
										45135
									],
									[
										45253,
										45254
									],
									[
										45270,
										45271
									],
									[
										45278,
										45279
									],
									[
										45287,
										45288
									],
									[
										45311,
										45312
									],
									[
										45320,
										45321
									],
									[
										45438,
										45439
									],
									[
										45452,
										45453
									],
									[
										45460,
										45461
									],
									[
										45469,
										45470
									],
									[
										45493,
										45494
									],
									[
										45505,
										45506
									],
									[
										45548,
										45549
									],
									[
										45553,
										45554
									],
									[
										45673,
										45674
									],
									[
										45677,
										45678
									],
									[
										45687,
										45688
									],
									[
										45689,
										45690
									],
									[
										45764,
										45765
									],
									[
										45768,
										45769
									],
									[
										46014,
										46015
									],
									[
										46036,
										46037
									],
									[
										46048,
										46049
									],
									[
										46055,
										46056
									],
									[
										46078,
										46079
									],
									[
										46116,
										46117
									],
									[
										46142,
										46143
									],
									[
										46153,
										46154
									],
									[
										46176,
										46177
									],
									[
										46202,
										46203
									],
									[
										46216,
										46217
									],
									[
										46222,
										46223
									],
									[
										46245,
										46246
									],
									[
										46281,
										46282
									],
									[
										46304,
										46305
									],
									[
										46310,
										46311
									],
									[
										46535,
										46536
									],
									[
										46557,
										46558
									],
									[
										46569,
										46570
									],
									[
										46576,
										46577
									],
									[
										46600,
										46601
									],
									[
										46653,
										46654
									],
									[
										46677,
										46678
									],
									[
										46713,
										46714
									],
									[
										46737,
										46738
									],
									[
										46771,
										46772
									],
									[
										46795,
										46796
									],
									[
										46801,
										46802
									],
									[
										46889,
										46890
									],
									[
										46911,
										46912
									],
									[
										46923,
										46924
									],
									[
										46930,
										46931
									],
									[
										46954,
										46955
									],
									[
										46992,
										46993
									],
									[
										47018,
										47019
									],
									[
										47029,
										47030
									],
									[
										47053,
										47054
									],
									[
										47077,
										47078
									],
									[
										47091,
										47092
									],
									[
										47097,
										47098
									],
									[
										47121,
										47122
									],
									[
										47155,
										47156
									],
									[
										47179,
										47180
									],
									[
										47185,
										47186
									],
									[
										47343,
										47344
									],
									[
										47350,
										47351
									],
									[
										47397,
										47398
									],
									[
										47410,
										47411
									],
									[
										47435,
										47436
									],
									[
										47438,
										47439
									],
									[
										47462,
										47463
									],
									[
										47474,
										47475
									],
									[
										47481,
										47482
									],
									[
										47488,
										47489
									],
									[
										47511,
										47512
									],
									[
										47549,
										47550
									],
									[
										47585,
										47586
									],
									[
										47590,
										47591
									],
									[
										47594,
										47595
									],
									[
										47605,
										47606
									],
									[
										47628,
										47629
									],
									[
										47654,
										47655
									],
									[
										47679,
										47680
									],
									[
										47684,
										47685
									],
									[
										47687,
										47688
									],
									[
										47693,
										47694
									],
									[
										47741,
										47742
									],
									[
										47751,
										47752
									],
									[
										47824,
										47825
									],
									[
										47860,
										47861
									],
									[
										47890,
										47891
									],
									[
										47910,
										47911
									],
									[
										47917,
										47918
									],
									[
										47934,
										47935
									],
									[
										47999,
										48000
									],
									[
										48006,
										48007
									],
									[
										48055,
										48056
									],
									[
										48065,
										48066
									],
									[
										48112,
										48113
									],
									[
										48125,
										48126
									],
									[
										48150,
										48151
									],
									[
										48153,
										48154
									],
									[
										48177,
										48178
									],
									[
										48189,
										48190
									],
									[
										48196,
										48197
									],
									[
										48203,
										48204
									],
									[
										48226,
										48227
									],
									[
										48279,
										48280
									],
									[
										48302,
										48303
									],
									[
										48338,
										48339
									],
									[
										48361,
										48362
									],
									[
										48397,
										48398
									],
									[
										48487,
										48488
									],
									[
										48502,
										48503
									],
									[
										48545,
										48546
									],
									[
										48550,
										48551
									],
									[
										48670,
										48671
									],
									[
										48674,
										48675
									],
									[
										48684,
										48685
									],
									[
										48686,
										48687
									],
									[
										48752,
										48753
									],
									[
										48756,
										48757
									],
									[
										48821,
										48822
									],
									[
										48825,
										48826
									],
									[
										48967,
										48968
									],
									[
										49019,
										49020
									],
									[
										49171,
										49172
									],
									[
										49206,
										49207
									],
									[
										49230,
										49231
									],
									[
										49268,
										49269
									],
									[
										49294,
										49295
									],
									[
										49305,
										49306
									],
									[
										49329,
										49330
									],
									[
										49334,
										49335
									],
									[
										49348,
										49349
									],
									[
										49354,
										49355
									],
									[
										49378,
										49379
									],
									[
										49383,
										49384
									],
									[
										49421,
										49422
									],
									[
										49434,
										49435
									],
									[
										49458,
										49459
									],
									[
										49476,
										49477
									],
									[
										49490,
										49491
									],
									[
										49496,
										49497
									],
									[
										49520,
										49521
									],
									[
										49526,
										49527
									],
									[
										49573,
										49574
									],
									[
										49578,
										49579
									],
									[
										49600,
										49601
									],
									[
										49657,
										49658
									],
									[
										49679,
										49680
									],
									[
										49736,
										49737
									],
									[
										49758,
										49759
									],
									[
										49817,
										49818
									],
									[
										49839,
										49840
									],
									[
										49910,
										49911
									],
									[
										49932,
										49933
									],
									[
										49938,
										49939
									],
									[
										50026,
										50027
									],
									[
										50040,
										50041
									],
									[
										50048,
										50049
									],
									[
										50057,
										50058
									],
									[
										50080,
										50081
									],
									[
										50091,
										50092
									],
									[
										50122,
										50123
									],
									[
										50135,
										50136
									],
									[
										50167,
										50168
									],
									[
										50171,
										50172
									],
									[
										50218,
										50219
									],
									[
										50228,
										50229
									],
									[
										50236,
										50237
									],
									[
										50245,
										50246
									],
									[
										50272,
										50273
									],
									[
										50289,
										50290
									],
									[
										50297,
										50298
									],
									[
										50306,
										50307
									],
									[
										50330,
										50331
									],
									[
										50337,
										50338
									],
									[
										50418,
										50419
									],
									[
										50425,
										50426
									],
									[
										50465,
										50466
									],
									[
										50476,
										50477
									],
									[
										50541,
										50542
									],
									[
										50548,
										50549
									],
									[
										50589,
										50590
									],
									[
										50598,
										50599
									],
									[
										50650,
										50651
									],
									[
										50662,
										50663
									],
									[
										50703,
										50704
									],
									[
										50715,
										50716
									],
									[
										50742,
										50743
									],
									[
										50766,
										50767
									],
									[
										50967,
										50968
									],
									[
										50974,
										50975
									],
									[
										50999,
										51000
									],
									[
										51017,
										51018
									],
									[
										51027,
										51028
									],
									[
										51057,
										51058
									],
									[
										51188,
										51189
									],
									[
										51210,
										51211
									],
									[
										51228,
										51229
									],
									[
										51238,
										51239
									],
									[
										51326,
										51327
									],
									[
										51331,
										51332
									],
									[
										51349,
										51350
									],
									[
										51366,
										51367
									],
									[
										51389,
										51390
									],
									[
										51394,
										51395
									],
									[
										51420,
										51421
									],
									[
										51426,
										51427
									],
									[
										51580,
										51581
									],
									[
										51593,
										51594
									],
									[
										51599,
										51600
									],
									[
										51610,
										51611
									],
									[
										51637,
										51638
									],
									[
										51660,
										51661
									],
									[
										51694,
										51695
									],
									[
										51705,
										51706
									],
									[
										51787,
										51788
									],
									[
										51805,
										51806
									],
									[
										51907,
										51908
									],
									[
										51918,
										51919
									],
									[
										51933,
										51934
									],
									[
										51942,
										51943
									],
									[
										52043,
										52044
									],
									[
										52060,
										52061
									],
									[
										52178,
										52179
									],
									[
										52191,
										52192
									],
									[
										52305,
										52306
									],
									[
										52319,
										52320
									],
									[
										52433,
										52434
									],
									[
										52449,
										52450
									],
									[
										52559,
										52560
									],
									[
										52567,
										52568
									],
									[
										52622,
										52623
									],
									[
										52632,
										52633
									],
									[
										52673,
										52674
									],
									[
										52680,
										52681
									],
									[
										52707,
										52708
									],
									[
										52709,
										52710
									],
									[
										52751,
										52752
									],
									[
										52758,
										52759
									],
									[
										52811,
										52812
									],
									[
										52823,
										52824
									],
									[
										52933,
										52934
									],
									[
										52948,
										52949
									],
									[
										53048,
										53049
									],
									[
										53067,
										53068
									],
									[
										53169,
										53170
									],
									[
										53180,
										53181
									],
									[
										53235,
										53236
									],
									[
										53245,
										53246
									],
									[
										53284,
										53285
									],
									[
										53291,
										53292
									],
									[
										53345,
										53346
									],
									[
										53360,
										53361
									],
									[
										53415,
										53416
									],
									[
										53429,
										53430
									],
									[
										53468,
										53469
									],
									[
										53475,
										53476
									],
									[
										53533,
										53534
									],
									[
										53547,
										53548
									],
									[
										53602,
										53603
									],
									[
										53616,
										53617
									],
									[
										53655,
										53656
									],
									[
										53662,
										53663
									],
									[
										53731,
										53732
									],
									[
										53745,
										53746
									],
									[
										53800,
										53801
									],
									[
										53810,
										53811
									],
									[
										53849,
										53850
									],
									[
										53856,
										53857
									],
									[
										53886,
										53887
									],
									[
										53891,
										53892
									],
									[
										53920,
										53921
									],
									[
										53935,
										53936
									],
									[
										53990,
										53991
									],
									[
										54000,
										54001
									],
									[
										54039,
										54040
									],
									[
										54046,
										54047
									],
									[
										54076,
										54077
									],
									[
										54081,
										54082
									],
									[
										54110,
										54111
									],
									[
										54121,
										54122
									],
									[
										54176,
										54177
									],
									[
										54186,
										54187
									],
									[
										54225,
										54226
									],
									[
										54232,
										54233
									],
									[
										54262,
										54263
									],
									[
										54267,
										54268
									],
									[
										54380,
										54381
									],
									[
										54391,
										54392
									],
									[
										54403,
										54404
									],
									[
										54412,
										54413
									],
									[
										54550,
										54551
									],
									[
										54561,
										54562
									],
									[
										54576,
										54577
									],
									[
										54585,
										54586
									],
									[
										54761,
										54762
									],
									[
										54772,
										54773
									],
									[
										54780,
										54781
									],
									[
										54783,
										54784
									],
									[
										54964,
										54965
									],
									[
										54971,
										54972
									],
									[
										55001,
										55002
									],
									[
										55008,
										55009
									],
									[
										55042,
										55043
									],
									[
										55049,
										55050
									],
									[
										55079,
										55080
									],
									[
										55086,
										55087
									],
									[
										55097,
										55098
									],
									[
										55104,
										55105
									],
									[
										55121,
										55122
									],
									[
										55143,
										55144
									],
									[
										55153,
										55154
									],
									[
										55171,
										55172
									],
									[
										55183,
										55184
									],
									[
										55194,
										55195
									],
									[
										55333,
										55334
									],
									[
										55353,
										55354
									],
									[
										55393,
										55394
									],
									[
										55400,
										55401
									],
									[
										55406,
										55407
									],
									[
										55413,
										55414
									],
									[
										55433,
										55434
									],
									[
										55460,
										55461
									],
									[
										55468,
										55469
									],
									[
										55471,
										55472
									],
									[
										55600,
										55601
									],
									[
										55609,
										55610
									],
									[
										55625,
										55626
									],
									[
										55643,
										55644
									],
									[
										55667,
										55668
									],
									[
										55669,
										55670
									],
									[
										55685,
										55686
									],
									[
										55704,
										55705
									],
									[
										55743,
										55744
									],
									[
										55745,
										55746
									],
									[
										55761,
										55762
									],
									[
										55781,
										55782
									],
									[
										55789,
										55790
									],
									[
										55792,
										55793
									],
									[
										55795,
										55796
									],
									[
										55797,
										55798
									],
									[
										55813,
										55814
									],
									[
										55830,
										55831
									],
									[
										55842,
										55843
									],
									[
										55844,
										55845
									],
									[
										55860,
										55861
									],
									[
										55870,
										55871
									],
									[
										55949,
										55950
									],
									[
										55980,
										55981
									],
									[
										56003,
										56004
									],
									[
										56008,
										56009
									],
									[
										56031,
										56032
									],
									[
										56095,
										56096
									],
									[
										56103,
										56104
									],
									[
										56108,
										56109
									],
									[
										56111,
										56112
									],
									[
										56115,
										56116
									],
									[
										56123,
										56124
									],
									[
										56126,
										56127
									],
									[
										56129,
										56130
									],
									[
										56142,
										56143
									],
									[
										56173,
										56174
									],
									[
										56178,
										56179
									],
									[
										56201,
										56202
									],
									[
										56222,
										56223
									],
									[
										56245,
										56246
									],
									[
										56261,
										56262
									],
									[
										56284,
										56285
									],
									[
										56290,
										56291
									],
									[
										56346,
										56347
									],
									[
										56351,
										56352
									],
									[
										56375,
										56376
									],
									[
										56417,
										56418
									],
									[
										56441,
										56442
									],
									[
										56447,
										56448
									],
									[
										56537,
										56538
									],
									[
										56544,
										56545
									],
									[
										56586,
										56587
									],
									[
										56593,
										56594
									],
									[
										56599,
										56600
									],
									[
										56605,
										56606
									],
									[
										56678,
										56679
									],
									[
										56685,
										56686
									],
									[
										56691,
										56692
									],
									[
										56698,
										56699
									],
									[
										56778,
										56779
									],
									[
										56783,
										56784
									],
									[
										56808,
										56809
									],
									[
										56872,
										56873
									],
									[
										56882,
										56883
									],
									[
										56891,
										56892
									],
									[
										56894,
										56895
									],
									[
										56900,
										56901
									],
									[
										56939,
										56940
									],
									[
										56946,
										56947
									],
									[
										56975,
										56976
									],
									[
										56981,
										56982
									],
									[
										57008,
										57009
									],
									[
										57116,
										57117
									],
									[
										57126,
										57127
									],
									[
										57132,
										57133
									],
									[
										57185,
										57186
									],
									[
										57192,
										57193
									],
									[
										57219,
										57220
									],
									[
										57323,
										57324
									],
									[
										57333,
										57334
									],
									[
										57339,
										57340
									],
									[
										57384,
										57385
									],
									[
										57390,
										57391
									],
									[
										57478,
										57479
									],
									[
										57559,
										57560
									],
									[
										57609,
										57610
									],
									[
										57687,
										57688
									],
									[
										57722,
										57723
									],
									[
										57813,
										57814
									],
									[
										57845,
										57846
									],
									[
										57854,
										57855
									],
									[
										57900,
										57901
									],
									[
										57939,
										57940
									],
									[
										57993,
										57994
									],
									[
										58033,
										58034
									],
									[
										58096,
										58097
									],
									[
										58122,
										58123
									],
									[
										58234,
										58235
									],
									[
										58254,
										58255
									],
									[
										58433,
										58434
									],
									[
										58447,
										58448
									],
									[
										58468,
										58469
									],
									[
										58481,
										58482
									],
									[
										58502,
										58503
									],
									[
										58512,
										58513
									],
									[
										58570,
										58571
									],
									[
										58599,
										58600
									],
									[
										58638,
										58639
									],
									[
										58659,
										58660
									],
									[
										58685,
										58686
									],
									[
										58698,
										58699
									],
									[
										58795,
										58796
									],
									[
										58816,
										58817
									],
									[
										58842,
										58843
									],
									[
										58875,
										58876
									],
									[
										58902,
										58903
									],
									[
										58919,
										58920
									],
									[
										58976,
										58977
									],
									[
										59006,
										59007
									],
									[
										59134,
										59135
									],
									[
										59151,
										59152
									],
									[
										59231,
										59232
									],
									[
										59246,
										59247
									],
									[
										59254,
										59255
									],
									[
										59282,
										59283
									],
									[
										59388,
										59389
									],
									[
										59406,
										59407
									],
									[
										59416,
										59417
									],
									[
										59439,
										59440
									],
									[
										59572,
										59573
									],
									[
										59593,
										59594
									],
									[
										59616,
										59617
									],
									[
										59627,
										59628
									],
									[
										59720,
										59721
									],
									[
										59725,
										59726
									],
									[
										59733,
										59734
									],
									[
										59742,
										59743
									],
									[
										59750,
										59751
									],
									[
										59803,
										59804
									],
									[
										59827,
										59828
									],
									[
										59834,
										59835
									],
									[
										59886,
										59887
									],
									[
										59897,
										59898
									],
									[
										59974,
										59975
									],
									[
										59983,
										59984
									],
									[
										60047,
										60048
									],
									[
										60064,
										60065
									],
									[
										60072,
										60073
									],
									[
										60081,
										60082
									],
									[
										60105,
										60106
									],
									[
										60112,
										60113
									],
									[
										60205,
										60206
									],
									[
										60212,
										60213
									],
									[
										60252,
										60253
									],
									[
										60263,
										60264
									],
									[
										60328,
										60329
									],
									[
										60335,
										60336
									],
									[
										60376,
										60377
									],
									[
										60385,
										60386
									],
									[
										60437,
										60438
									],
									[
										60449,
										60450
									],
									[
										60494,
										60495
									],
									[
										60538,
										60539
									],
									[
										60566,
										60567
									],
									[
										60584,
										60585
									],
									[
										60697,
										60698
									],
									[
										60714,
										60715
									],
									[
										60722,
										60723
									],
									[
										60731,
										60732
									],
									[
										60755,
										60756
									],
									[
										60762,
										60763
									],
									[
										60854,
										60855
									],
									[
										60861,
										60862
									],
									[
										60897,
										60898
									],
									[
										60904,
										60905
									],
									[
										60959,
										60960
									],
									[
										60971,
										60972
									],
									[
										61016,
										61017
									],
									[
										61060,
										61061
									],
									[
										61088,
										61089
									],
									[
										61106,
										61107
									],
									[
										61265,
										61266
									],
									[
										61279,
										61280
									],
									[
										61330,
										61331
									],
									[
										61349,
										61350
									],
									[
										61414,
										61415
									],
									[
										61432,
										61433
									],
									[
										61455,
										61456
									],
									[
										61461,
										61462
									],
									[
										61616,
										61617
									],
									[
										61628,
										61629
									],
									[
										61659,
										61660
									],
									[
										61671,
										61672
									],
									[
										61702,
										61703
									],
									[
										61708,
										61709
									],
									[
										61739,
										61740
									],
									[
										61746,
										61747
									],
									[
										61778,
										61779
									],
									[
										61784,
										61785
									],
									[
										61816,
										61817
									],
									[
										61827,
										61828
									],
									[
										61859,
										61860
									],
									[
										61866,
										61867
									],
									[
										61898,
										61899
									],
									[
										61904,
										61905
									],
									[
										62011,
										62012
									],
									[
										62025,
										62026
									],
									[
										62060,
										62061
									],
									[
										62061,
										62062
									],
									[
										62157,
										62158
									],
									[
										62172,
										62173
									],
									[
										62345,
										62346
									],
									[
										62356,
										62357
									],
									[
										62559,
										62560
									],
									[
										62582,
										62583
									],
									[
										62617,
										62618
									],
									[
										62626,
										62627
									],
									[
										62771,
										62772
									],
									[
										62777,
										62778
									],
									[
										62810,
										62811
									],
									[
										62828,
										62829
									],
									[
										62872,
										62873
									],
									[
										62875,
										62876
									],
									[
										62921,
										62922
									],
									[
										62924,
										62925
									],
									[
										62958,
										62959
									],
									[
										62963,
										62964
									],
									[
										63017,
										63018
									],
									[
										63037,
										63038
									],
									[
										63185,
										63186
									],
									[
										63188,
										63189
									],
									[
										63214,
										63215
									],
									[
										63218,
										63219
									],
									[
										63247,
										63248
									],
									[
										63255,
										63256
									],
									[
										63294,
										63295
									],
									[
										63300,
										63301
									],
									[
										63380,
										63381
									],
									[
										63390,
										63391
									],
									[
										63463,
										63464
									],
									[
										63473,
										63474
									],
									[
										63575,
										63576
									],
									[
										63583,
										63584
									],
									[
										63673,
										63674
									],
									[
										63676,
										63677
									],
									[
										63712,
										63713
									],
									[
										63719,
										63720
									],
									[
										63821,
										63822
									],
									[
										63824,
										63825
									],
									[
										63860,
										63861
									],
									[
										63867,
										63868
									],
									[
										63901,
										63902
									],
									[
										63906,
										63907
									],
									[
										63976,
										63977
									],
									[
										63980,
										63981
									],
									[
										64045,
										64046
									],
									[
										64048,
										64049
									],
									[
										64084,
										64085
									],
									[
										64091,
										64092
									],
									[
										64130,
										64131
									],
									[
										64151,
										64152
									],
									[
										64283,
										64284
									],
									[
										64286,
										64287
									],
									[
										64320,
										64321
									],
									[
										64325,
										64326
									],
									[
										64370,
										64371
									],
									[
										64373,
										64374
									],
									[
										64452,
										64453
									],
									[
										64458,
										64459
									],
									[
										64494,
										64495
									],
									[
										64516,
										64517
									],
									[
										64572,
										64573
									],
									[
										64575,
										64576
									],
									[
										64622,
										64623
									],
									[
										64625,
										64626
									],
									[
										64661,
										64662
									],
									[
										64667,
										64668
									],
									[
										64705,
										64706
									],
									[
										64710,
										64711
									],
									[
										64743,
										64744
									],
									[
										64749,
										64750
									],
									[
										64832,
										64833
									],
									[
										64835,
										64836
									],
									[
										64871,
										64872
									],
									[
										64876,
										64877
									],
									[
										64914,
										64915
									],
									[
										64919,
										64920
									],
									[
										64952,
										64953
									],
									[
										64957,
										64958
									],
									[
										65040,
										65041
									],
									[
										65043,
										65044
									],
									[
										65082,
										65083
									],
									[
										65087,
										65088
									],
									[
										65173,
										65174
									],
									[
										65185,
										65186
									],
									[
										65242,
										65243
									],
									[
										65248,
										65249
									],
									[
										65395,
										65396
									],
									[
										65413,
										65414
									],
									[
										65421,
										65422
									],
									[
										65431,
										65432
									],
									[
										65446,
										65447
									],
									[
										65455,
										65456
									],
									[
										65498,
										65499
									],
									[
										65516,
										65517
									],
									[
										65524,
										65525
									],
									[
										65534,
										65535
									],
									[
										65546,
										65547
									],
									[
										65555,
										65556
									],
									[
										65636,
										65637
									],
									[
										65650,
										65651
									],
									[
										65665,
										65666
									],
									[
										65674,
										65675
									],
									[
										65717,
										65718
									],
									[
										65731,
										65732
									],
									[
										65743,
										65744
									],
									[
										65752,
										65753
									],
									[
										65858,
										65859
									],
									[
										65874,
										65875
									],
									[
										65912,
										65913
									],
									[
										65916,
										65917
									],
									[
										65934,
										65935
									],
									[
										65950,
										65951
									],
									[
										65973,
										65974
									],
									[
										65978,
										65979
									],
									[
										66017,
										66018
									],
									[
										66026,
										66027
									],
									[
										66138,
										66139
									],
									[
										66147,
										66148
									],
									[
										66171,
										66172
									],
									[
										66189,
										66190
									],
									[
										66201,
										66202
									],
									[
										66210,
										66211
									],
									[
										66225,
										66226
									],
									[
										66243,
										66244
									],
									[
										66255,
										66256
									],
									[
										66264,
										66265
									],
									[
										66279,
										66280
									],
									[
										66292,
										66293
									],
									[
										66300,
										66301
									],
									[
										66301,
										66302
									],
									[
										66499,
										66500
									],
									[
										66506,
										66507
									],
									[
										66637,
										66638
									],
									[
										66643,
										66644
									],
									[
										66658,
										66659
									],
									[
										66667,
										66668
									],
									[
										66743,
										66744
									],
									[
										66752,
										66753
									],
									[
										66770,
										66771
									],
									[
										66775,
										66776
									],
									[
										66778,
										66779
									],
									[
										66784,
										66785
									],
									[
										66791,
										66792
									],
									[
										66795,
										66796
									],
									[
										66798,
										66799
									],
									[
										66804,
										66805
									],
									[
										66819,
										66820
									],
									[
										66828,
										66829
									],
									[
										66847,
										66848
									],
									[
										66864,
										66865
									],
									[
										66953,
										66954
									],
									[
										66957,
										66958
									],
									[
										66990,
										66991
									],
									[
										67006,
										67007
									],
									[
										67053,
										67054
									],
									[
										67059,
										67060
									],
									[
										67086,
										67087
									],
									[
										67100,
										67101
									],
									[
										67193,
										67194
									],
									[
										67201,
										67202
									],
									[
										67353,
										67354
									],
									[
										67369,
										67370
									],
									[
										67545,
										67546
									],
									[
										67550,
										67551
									],
									[
										67741,
										67742
									],
									[
										67744,
										67745
									],
									[
										67769,
										67770
									],
									[
										67780,
										67781
									],
									[
										67970,
										67971
									],
									[
										67984,
										67985
									],
									[
										68101,
										68102
									],
									[
										68116,
										68117
									],
									[
										68253,
										68254
									],
									[
										68262,
										68263
									],
									[
										68288,
										68289
									],
									[
										68294,
										68295
									],
									[
										68306,
										68307
									],
									[
										68315,
										68316
									],
									[
										68332,
										68333
									],
									[
										68350,
										68351
									],
									[
										68362,
										68363
									],
									[
										68371,
										68372
									],
									[
										68388,
										68389
									],
									[
										68401,
										68402
									],
									[
										68409,
										68410
									],
									[
										68410,
										68411
									],
									[
										68481,
										68482
									],
									[
										68520,
										68521
									],
									[
										68742,
										68743
									],
									[
										68753,
										68754
									],
									[
										68875,
										68876
									],
									[
										68891,
										68892
									],
									[
										69051,
										69052
									],
									[
										69058,
										69059
									],
									[
										69221,
										69222
									],
									[
										69230,
										69231
									],
									[
										69278,
										69279
									],
									[
										69281,
										69282
									],
									[
										69346,
										69347
									],
									[
										69357,
										69358
									],
									[
										69409,
										69410
									],
									[
										69412,
										69413
									],
									[
										69539,
										69540
									],
									[
										69545,
										69546
									],
									[
										69586,
										69587
									],
									[
										69590,
										69591
									],
									[
										69609,
										69610
									],
									[
										69625,
										69626
									],
									[
										69649,
										69650
									],
									[
										69654,
										69655
									],
									[
										69695,
										69696
									],
									[
										69704,
										69705
									],
									[
										69837,
										69838
									],
									[
										69841,
										69842
									],
									[
										69887,
										69888
									],
									[
										69906,
										69907
									],
									[
										69942,
										69943
									],
									[
										69961,
										69962
									],
									[
										69986,
										69987
									],
									[
										69992,
										69993
									],
									[
										69999,
										70000
									],
									[
										70003,
										70004
									],
									[
										70109,
										70110
									],
									[
										70113,
										70114
									],
									[
										70151,
										70152
									],
									[
										70157,
										70158
									],
									[
										70261,
										70262
									],
									[
										70264,
										70265
									],
									[
										70339,
										70340
									],
									[
										70349,
										70350
									],
									[
										70465,
										70466
									],
									[
										70470,
										70471
									],
									[
										70571,
										70572
									],
									[
										70577,
										70578
									],
									[
										70667,
										70668
									],
									[
										70680,
										70681
									],
									[
										70710,
										70711
									],
									[
										70715,
										70716
									],
									[
										70730,
										70731
									],
									[
										70735,
										70736
									],
									[
										70744,
										70745
									],
									[
										70750,
										70751
									],
									[
										70765,
										70766
									],
									[
										70771,
										70772
									],
									[
										70843,
										70844
									],
									[
										70862,
										70863
									],
									[
										71108,
										71109
									],
									[
										71114,
										71115
									],
									[
										71245,
										71246
									],
									[
										71264,
										71265
									],
									[
										71299,
										71300
									],
									[
										71318,
										71319
									],
									[
										71342,
										71343
									],
									[
										71348,
										71349
									],
									[
										71355,
										71356
									],
									[
										71359,
										71360
									],
									[
										71457,
										71458
									],
									[
										71466,
										71467
									],
									[
										71590,
										71591
									],
									[
										71600,
										71601
									],
									[
										71800,
										71801
									],
									[
										71807,
										71808
									],
									[
										71821,
										71822
									],
									[
										71828,
										71829
									],
									[
										71864,
										71865
									],
									[
										71871,
										71872
									],
									[
										71915,
										71916
									],
									[
										71920,
										71921
									],
									[
										71944,
										71945
									],
									[
										71949,
										71950
									],
									[
										71955,
										71956
									],
									[
										71960,
										71961
									],
									[
										72019,
										72020
									],
									[
										72024,
										72025
									],
									[
										72063,
										72064
									],
									[
										72068,
										72069
									],
									[
										72074,
										72075
									],
									[
										72081,
										72082
									],
									[
										72155,
										72156
									],
									[
										72162,
										72163
									],
									[
										72190,
										72191
									],
									[
										72197,
										72198
									],
									[
										72225,
										72226
									],
									[
										72237,
										72238
									],
									[
										72329,
										72330
									],
									[
										72334,
										72335
									],
									[
										72340,
										72341
									],
									[
										72349,
										72350
									],
									[
										72406,
										72407
									],
									[
										72414,
										72415
									],
									[
										72487,
										72488
									],
									[
										72492,
										72493
									],
									[
										72498,
										72499
									],
									[
										72507,
										72508
									],
									[
										72559,
										72560
									],
									[
										72564,
										72565
									],
									[
										72725,
										72726
									],
									[
										72739,
										72740
									],
									[
										72781,
										72782
									],
									[
										72801,
										72802
									],
									[
										72843,
										72844
									],
									[
										72860,
										72861
									],
									[
										72902,
										72903
									],
									[
										72920,
										72921
									],
									[
										72962,
										72963
									],
									[
										72982,
										72983
									],
									[
										73057,
										73058
									],
									[
										73076,
										73077
									],
									[
										73103,
										73104
									],
									[
										73119,
										73120
									],
									[
										73239,
										73240
									],
									[
										73253,
										73254
									],
									[
										73318,
										73319
									],
									[
										73325,
										73326
									],
									[
										73342,
										73343
									],
									[
										73349,
										73350
									],
									[
										73378,
										73379
									],
									[
										73398,
										73399
									],
									[
										73459,
										73460
									],
									[
										73468,
										73469
									],
									[
										73488,
										73489
									],
									[
										73497,
										73498
									],
									[
										73523,
										73524
									],
									[
										73532,
										73533
									],
									[
										73538,
										73539
									],
									[
										73539,
										73540
									],
									[
										73551,
										73552
									],
									[
										73560,
										73561
									],
									[
										73566,
										73567
									],
									[
										73567,
										73568
									],
									[
										73662,
										73663
									],
									[
										73671,
										73672
									],
									[
										73682,
										73683
									],
									[
										73691,
										73692
									],
									[
										73737,
										73738
									],
									[
										73744,
										73745
									],
									[
										73755,
										73756
									],
									[
										73758,
										73759
									],
									[
										73782,
										73783
									],
									[
										73789,
										73790
									],
									[
										73800,
										73801
									],
									[
										73807,
										73808
									],
									[
										73828,
										73829
									],
									[
										73848,
										73849
									],
									[
										73895,
										73896
									],
									[
										73950,
										73951
									],
									[
										74003,
										74004
									],
									[
										74058,
										74059
									],
									[
										74109,
										74110
									],
									[
										74121,
										74122
									],
									[
										74141,
										74142
									],
									[
										74153,
										74154
									],
									[
										74179,
										74180
									],
									[
										74191,
										74192
									],
									[
										74197,
										74198
									],
									[
										74198,
										74199
									],
									[
										74210,
										74211
									],
									[
										74222,
										74223
									],
									[
										74228,
										74229
									],
									[
										74229,
										74230
									],
									[
										74317,
										74318
									],
									[
										74329,
										74330
									],
									[
										74340,
										74341
									],
									[
										74352,
										74353
									],
									[
										74396,
										74397
									],
									[
										74433,
										74434
									],
									[
										74546,
										74547
									],
									[
										74566,
										74567
									],
									[
										74629,
										74630
									],
									[
										74656,
										74657
									],
									[
										74677,
										74678
									],
									[
										74686,
										74687
									],
									[
										74713,
										74714
									],
									[
										74718,
										74719
									],
									[
										74745,
										74746
									],
									[
										74750,
										74751
									],
									[
										74758,
										74759
									],
									[
										74794,
										74795
									],
									[
										74808,
										74809
									],
									[
										74828,
										74829
									],
									[
										74835,
										74836
									],
									[
										74844,
										74845
									],
									[
										74852,
										74853
									],
									[
										74853,
										74854
									],
									[
										74888,
										74889
									],
									[
										74893,
										74894
									],
									[
										74901,
										74902
									],
									[
										74921,
										74922
									],
									[
										74934,
										74935
									],
									[
										74954,
										74955
									],
									[
										74961,
										74962
									],
									[
										74970,
										74971
									],
									[
										74978,
										74979
									],
									[
										74979,
										74980
									],
									[
										75014,
										75015
									],
									[
										75021,
										75022
									],
									[
										75029,
										75030
									],
									[
										75058,
										75059
									],
									[
										75066,
										75067
									],
									[
										75072,
										75073
									],
									[
										75145,
										75146
									],
									[
										75152,
										75153
									],
									[
										75160,
										75161
									],
									[
										75199,
										75200
									],
									[
										75207,
										75208
									],
									[
										75219,
										75220
									],
									[
										75229,
										75230
									],
									[
										75240,
										75241
									],
									[
										75297,
										75298
									],
									[
										75309,
										75310
									],
									[
										75336,
										75337
									],
									[
										75341,
										75342
									],
									[
										75368,
										75369
									],
									[
										75373,
										75374
									],
									[
										75387,
										75388
									],
									[
										75411,
										75412
									],
									[
										75418,
										75419
									],
									[
										75430,
										75431
									],
									[
										75466,
										75467
									],
									[
										75471,
										75472
									],
									[
										75485,
										75486
									],
									[
										75509,
										75510
									],
									[
										75516,
										75517
									],
									[
										75528,
										75529
									],
									[
										75563,
										75564
									],
									[
										75570,
										75571
									],
									[
										75578,
										75579
									],
									[
										75593,
										75594
									],
									[
										75662,
										75663
									],
									[
										75757,
										75758
									],
									[
										75798,
										75799
									],
									[
										75809,
										75810
									],
									[
										75899,
										75900
									],
									[
										75909,
										75910
									],
									[
										75930,
										75931
									],
									[
										75943,
										75944
									],
									[
										76073,
										76074
									],
									[
										76080,
										76081
									],
									[
										76127,
										76128
									],
									[
										76134,
										76135
									],
									[
										76244,
										76245
									],
									[
										76253,
										76254
									],
									[
										76269,
										76270
									],
									[
										76286,
										76287
									],
									[
										76298,
										76299
									],
									[
										76305,
										76306
									],
									[
										76308,
										76309
									],
									[
										76310,
										76311
									],
									[
										76326,
										76327
									],
									[
										76346,
										76347
									],
									[
										76358,
										76359
									],
									[
										76361,
										76362
									],
									[
										76377,
										76378
									],
									[
										76387,
										76388
									],
									[
										76415,
										76416
									],
									[
										76424,
										76425
									],
									[
										76444,
										76445
									],
									[
										76455,
										76456
									],
									[
										76475,
										76476
									],
									[
										76490,
										76491
									],
									[
										76517,
										76518
									],
									[
										76526,
										76527
									],
									[
										76532,
										76533
									],
									[
										76533,
										76534
									],
									[
										76545,
										76546
									],
									[
										76556,
										76557
									],
									[
										76562,
										76563
									],
									[
										76563,
										76564
									],
									[
										76575,
										76576
									],
									[
										76590,
										76591
									],
									[
										76596,
										76597
									],
									[
										76597,
										76598
									],
									[
										76634,
										76635
									],
									[
										76645,
										76646
									],
									[
										76671,
										76672
									],
									[
										76686,
										76687
									],
									[
										76752,
										76753
									],
									[
										76759,
										76760
									],
									[
										76770,
										76771
									],
									[
										76779,
										76780
									],
									[
										76790,
										76791
									],
									[
										76801,
										76802
									],
									[
										76812,
										76813
									],
									[
										76827,
										76828
									],
									[
										76872,
										76873
									],
									[
										76904,
										76905
									],
									[
										76970,
										76971
									],
									[
										77026,
										77027
									],
									[
										77083,
										77084
									],
									[
										77140,
										77141
									],
									[
										77229,
										77230
									],
									[
										77236,
										77237
									],
									[
										77319,
										77320
									],
									[
										77344,
										77345
									],
									[
										77364,
										77365
									],
									[
										77367,
										77368
									],
									[
										77424,
										77425
									],
									[
										77427,
										77428
									],
									[
										77456,
										77457
									],
									[
										77476,
										77477
									],
									[
										77533,
										77534
									],
									[
										77536,
										77537
									],
									[
										77617,
										77618
									],
									[
										77624,
										77625
									],
									[
										77689,
										77690
									],
									[
										77697,
										77698
									],
									[
										77763,
										77764
									],
									[
										77768,
										77769
									],
									[
										77804,
										77805
									],
									[
										77842,
										77843
									],
									[
										77878,
										77879
									],
									[
										77884,
										77885
									],
									[
										77928,
										77929
									],
									[
										77933,
										77934
									],
									[
										77969,
										77970
									],
									[
										78007,
										78008
									],
									[
										78043,
										78044
									],
									[
										78076,
										78077
									],
									[
										78112,
										78113
									],
									[
										78146,
										78147
									],
									[
										78182,
										78183
									],
									[
										78217,
										78218
									],
									[
										78253,
										78254
									],
									[
										78259,
										78260
									],
									[
										78334,
										78335
									],
									[
										78335,
										78336
									],
									[
										78370,
										78371
									],
									[
										78376,
										78377
									],
									[
										78422,
										78423
									],
									[
										78443,
										78444
									],
									[
										78493,
										78494
									],
									[
										78510,
										78511
									],
									[
										78560,
										78561
									],
									[
										78576,
										78577
									],
									[
										78626,
										78627
									],
									[
										78633,
										78634
									],
									[
										78683,
										78684
									],
									[
										78698,
										78699
									],
									[
										78804,
										78805
									],
									[
										78809,
										78810
									],
									[
										78846,
										78847
									],
									[
										78851,
										78852
									],
									[
										78888,
										78889
									],
									[
										78913,
										78914
									],
									[
										78927,
										78928
									],
									[
										78929,
										78930
									],
									[
										78966,
										78967
									],
									[
										78990,
										78991
									],
									[
										78998,
										78999
									],
									[
										79003,
										79004
									],
									[
										79006,
										79007
									],
									[
										79014,
										79015
									],
									[
										79051,
										79052
									],
									[
										79056,
										79057
									],
									[
										79093,
										79094
									],
									[
										79099,
										79100
									],
									[
										79147,
										79148
									],
									[
										79152,
										79153
									],
									[
										79160,
										79161
									],
									[
										79165,
										79166
									],
									[
										79168,
										79169
									],
									[
										79174,
										79175
									],
									[
										79211,
										79212
									],
									[
										79216,
										79217
									],
									[
										79225,
										79226
									],
									[
										79231,
										79232
									],
									[
										79268,
										79269
									],
									[
										79281,
										79282
									],
									[
										79325,
										79326
									],
									[
										79333,
										79334
									],
									[
										79354,
										79355
									],
									[
										79427,
										79428
									],
									[
										79476,
										79477
									],
									[
										79552,
										79553
									],
									[
										79640,
										79641
									],
									[
										79646,
										79647
									],
									[
										79703,
										79704
									],
									[
										79712,
										79713
									],
									[
										79773,
										79774
									],
									[
										79821,
										79822
									],
									[
										79939,
										79940
									],
									[
										79942,
										79943
									],
									[
										80005,
										80006
									],
									[
										80008,
										80009
									],
									[
										80066,
										80067
									],
									[
										80069,
										80070
									],
									[
										80092,
										80093
									],
									[
										80100,
										80101
									],
									[
										80183,
										80184
									],
									[
										80191,
										80192
									],
									[
										80250,
										80251
									],
									[
										80255,
										80256
									],
									[
										80288,
										80289
									],
									[
										80344,
										80345
									],
									[
										80377,
										80378
									],
									[
										80383,
										80384
									],
									[
										80424,
										80425
									],
									[
										80429,
										80430
									],
									[
										80462,
										80463
									],
									[
										80506,
										80507
									],
									[
										80539,
										80540
									],
									[
										80585,
										80586
									],
									[
										80618,
										80619
									],
									[
										80669,
										80670
									],
									[
										80702,
										80703
									],
									[
										80744,
										80745
									],
									[
										80777,
										80778
									],
									[
										80796,
										80797
									],
									[
										80829,
										80830
									],
									[
										80835,
										80836
									],
									[
										80952,
										80953
									],
									[
										80955,
										80956
									],
									[
										81050,
										81051
									],
									[
										81053,
										81054
									],
									[
										81097,
										81098
									],
									[
										81102,
										81103
									],
									[
										81136,
										81137
									],
									[
										81153,
										81154
									],
									[
										81187,
										81188
									],
									[
										81217,
										81218
									],
									[
										81231,
										81232
									],
									[
										81233,
										81234
									],
									[
										81267,
										81268
									],
									[
										81291,
										81292
									],
									[
										81299,
										81300
									],
									[
										81304,
										81305
									],
									[
										81307,
										81308
									],
									[
										81315,
										81316
									],
									[
										81349,
										81350
									],
									[
										81354,
										81355
									],
									[
										81388,
										81389
									],
									[
										81394,
										81395
									],
									[
										81428,
										81429
									],
									[
										81433,
										81434
									],
									[
										81441,
										81442
									],
									[
										81444,
										81445
									],
									[
										81447,
										81448
									],
									[
										81453,
										81454
									],
									[
										81487,
										81488
									],
									[
										81492,
										81493
									],
									[
										81500,
										81501
									],
									[
										81510,
										81511
									],
									[
										81513,
										81514
									],
									[
										81519,
										81520
									],
									[
										81553,
										81554
									],
									[
										81558,
										81559
									],
									[
										81577,
										81578
									],
									[
										81583,
										81584
									],
									[
										81694,
										81695
									],
									[
										81708,
										81709
									],
									[
										81727,
										81728
									],
									[
										81735,
										81736
									],
									[
										81750,
										81751
									],
									[
										81753,
										81754
									],
									[
										81786,
										81787
									],
									[
										81793,
										81794
									],
									[
										81877,
										81878
									],
									[
										81884,
										81885
									],
									[
										81909,
										81910
									],
									[
										81910,
										81911
									],
									[
										81940,
										81941
									],
									[
										81946,
										81947
									],
									[
										81958,
										81959
									],
									[
										81983,
										81984
									],
									[
										82014,
										82015
									],
									[
										82054,
										82055
									],
									[
										82098,
										82099
									],
									[
										82110,
										82111
									],
									[
										82119,
										82120
									],
									[
										82121,
										82122
									],
									[
										82131,
										82132
									],
									[
										82137,
										82138
									],
									[
										82218,
										82219
									],
									[
										82228,
										82229
									],
									[
										82302,
										82303
									],
									[
										82311,
										82312
									],
									[
										82369,
										82370
									],
									[
										82415,
										82416
									],
									[
										82468,
										82469
									],
									[
										82488,
										82489
									],
									[
										82599,
										82600
									],
									[
										82619,
										82620
									],
									[
										82743,
										82744
									],
									[
										82752,
										82753
									],
									[
										82824,
										82825
									],
									[
										82831,
										82832
									],
									[
										82856,
										82857
									],
									[
										82884,
										82885
									],
									[
										82896,
										82897
									],
									[
										82915,
										82916
									],
									[
										82937,
										82938
									],
									[
										82945,
										82946
									],
									[
										82973,
										82974
									],
									[
										82991,
										82992
									],
									[
										83066,
										83067
									],
									[
										83075,
										83076
									],
									[
										83164,
										83165
									],
									[
										83176,
										83177
									],
									[
										83202,
										83203
									],
									[
										83210,
										83211
									],
									[
										83398,
										83399
									],
									[
										83405,
										83406
									],
									[
										83412,
										83413
									],
									[
										83418,
										83419
									],
									[
										83431,
										83432
									],
									[
										83436,
										83437
									],
									[
										83440,
										83441
									],
									[
										83444,
										83445
									],
									[
										83456,
										83457
									],
									[
										83465,
										83466
									],
									[
										83468,
										83469
									],
									[
										83471,
										83472
									],
									[
										83483,
										83484
									],
									[
										83487,
										83488
									],
									[
										83490,
										83491
									],
									[
										83503,
										83504
									],
									[
										83567,
										83568
									],
									[
										83572,
										83573
									],
									[
										83635,
										83636
									],
									[
										83658,
										83659
									],
									[
										83666,
										83667
									],
									[
										83677,
										83678
									],
									[
										83778,
										83779
									],
									[
										83790,
										83791
									],
									[
										83815,
										83816
									],
									[
										83819,
										83820
									],
									[
										83834,
										83835
									],
									[
										83844,
										83845
									],
									[
										83851,
										83852
									],
									[
										83856,
										83857
									],
									[
										83864,
										83865
									],
									[
										83874,
										83875
									],
									[
										83905,
										83906
									],
									[
										83912,
										83913
									],
									[
										83920,
										83921
									],
									[
										83925,
										83926
									],
									[
										83935,
										83936
									],
									[
										83949,
										83950
									],
									[
										84011,
										84012
									],
									[
										84020,
										84021
									],
									[
										84105,
										84106
									],
									[
										84110,
										84111
									],
									[
										84177,
										84178
									],
									[
										84188,
										84189
									],
									[
										84196,
										84197
									],
									[
										84205,
										84206
									],
									[
										84232,
										84233
									],
									[
										84237,
										84238
									],
									[
										84265,
										84266
									],
									[
										84291,
										84292
									],
									[
										84359,
										84360
									],
									[
										84364,
										84365
									],
									[
										84372,
										84373
									],
									[
										84391,
										84392
									],
									[
										84420,
										84421
									],
									[
										84430,
										84431
									],
									[
										84437,
										84438
									],
									[
										84446,
										84447
									],
									[
										84562,
										84563
									],
									[
										84567,
										84568
									],
									[
										84575,
										84576
									],
									[
										84594,
										84595
									],
									[
										84608,
										84609
									],
									[
										84620,
										84621
									],
									[
										84627,
										84628
									],
									[
										84638,
										84639
									],
									[
										84754,
										84755
									],
									[
										84759,
										84760
									],
									[
										84767,
										84768
									],
									[
										84786,
										84787
									],
									[
										84800,
										84801
									],
									[
										84817,
										84818
									],
									[
										84824,
										84825
									],
									[
										84839,
										84840
									],
									[
										84955,
										84956
									],
									[
										84962,
										84963
									],
									[
										84970,
										84971
									],
									[
										84982,
										84983
									],
									[
										84990,
										84991
									],
									[
										85010,
										85011
									],
									[
										85120,
										85121
									],
									[
										85125,
										85126
									],
									[
										85210,
										85211
									],
									[
										85216,
										85217
									],
									[
										85306,
										85307
									],
									[
										85318,
										85319
									],
									[
										85333,
										85334
									],
									[
										85342,
										85343
									],
									[
										85427,
										85428
									],
									[
										85438,
										85439
									],
									[
										85499,
										85500
									],
									[
										85512,
										85513
									],
									[
										85520,
										85521
									],
									[
										85529,
										85530
									],
									[
										85748,
										85749
									],
									[
										85753,
										85754
									],
									[
										85779,
										85780
									],
									[
										85784,
										85785
									],
									[
										85790,
										85791
									],
									[
										85795,
										85796
									],
									[
										85927,
										85928
									],
									[
										85934,
										85935
									],
									[
										85945,
										85946
									],
									[
										85952,
										85953
									],
									[
										86000,
										86001
									],
									[
										86007,
										86008
									],
									[
										86039,
										86040
									],
									[
										86044,
										86045
									],
									[
										86050,
										86051
									],
									[
										86059,
										86060
									],
									[
										86115,
										86116
									],
									[
										86122,
										86123
									],
									[
										86133,
										86134
									],
									[
										86140,
										86141
									],
									[
										86151,
										86152
									],
									[
										86158,
										86159
									],
									[
										86179,
										86180
									],
									[
										86196,
										86197
									],
									[
										86241,
										86242
									],
									[
										86255,
										86256
									],
									[
										86303,
										86304
									],
									[
										86308,
										86309
									],
									[
										86314,
										86315
									],
									[
										86324,
										86325
									],
									[
										86372,
										86373
									],
									[
										86379,
										86380
									],
									[
										86390,
										86391
									],
									[
										86397,
										86398
									],
									[
										86436,
										86437
									],
									[
										86441,
										86442
									],
									[
										86447,
										86448
									],
									[
										86463,
										86464
									],
									[
										86519,
										86520
									],
									[
										86525,
										86526
									],
									[
										86606,
										86607
									],
									[
										86613,
										86614
									],
									[
										86624,
										86625
									],
									[
										86631,
										86632
									],
									[
										86642,
										86643
									],
									[
										86648,
										86649
									],
									[
										86665,
										86666
									],
									[
										86671,
										86672
									],
									[
										86677,
										86678
									],
									[
										86685,
										86686
									],
									[
										86738,
										86739
									],
									[
										86745,
										86746
									],
									[
										86797,
										86798
									],
									[
										86804,
										86805
									],
									[
										86831,
										86832
									],
									[
										86858,
										86859
									],
									[
										86867,
										86868
									],
									[
										86874,
										86875
									],
									[
										86943,
										86944
									],
									[
										86963,
										86964
									],
									[
										87022,
										87023
									],
									[
										87036,
										87037
									],
									[
										87073,
										87074
									],
									[
										87078,
										87079
									],
									[
										87084,
										87085
									],
									[
										87095,
										87096
									],
									[
										87125,
										87126
									],
									[
										87133,
										87134
									],
									[
										87182,
										87183
									],
									[
										87189,
										87190
									],
									[
										87200,
										87201
									],
									[
										87208,
										87209
									],
									[
										87250,
										87251
									],
									[
										87260,
										87261
									],
									[
										87310,
										87311
									],
									[
										87317,
										87318
									],
									[
										87328,
										87329
									],
									[
										87335,
										87336
									],
									[
										87362,
										87363
									],
									[
										87372,
										87373
									],
									[
										87414,
										87415
									],
									[
										87430,
										87431
									],
									[
										87481,
										87482
									],
									[
										87488,
										87489
									],
									[
										87499,
										87500
									],
									[
										87506,
										87507
									],
									[
										87517,
										87518
									],
									[
										87533,
										87534
									],
									[
										87575,
										87576
									],
									[
										87584,
										87585
									],
									[
										87634,
										87635
									],
									[
										87643,
										87644
									],
									[
										87685,
										87686
									],
									[
										87692,
										87693
									],
									[
										87740,
										87741
									],
									[
										87747,
										87748
									],
									[
										87758,
										87759
									],
									[
										87763,
										87764
									],
									[
										87774,
										87775
									],
									[
										87781,
										87782
									],
									[
										87823,
										87824
									],
									[
										87834,
										87835
									],
									[
										87892,
										87893
									],
									[
										87899,
										87900
									],
									[
										87910,
										87911
									],
									[
										87915,
										87916
									],
									[
										87926,
										87927
									],
									[
										87937,
										87938
									],
									[
										87979,
										87980
									],
									[
										87982,
										87983
									],
									[
										88026,
										88027
									],
									[
										88029,
										88030
									],
									[
										88108,
										88109
									],
									[
										88115,
										88116
									],
									[
										88126,
										88127
									],
									[
										88133,
										88134
									],
									[
										88144,
										88145
									],
									[
										88149,
										88150
									],
									[
										88160,
										88161
									],
									[
										88166,
										88167
									],
									[
										88170,
										88171
									],
									[
										88176,
										88177
									],
									[
										88214,
										88215
									],
									[
										88219,
										88220
									],
									[
										88225,
										88226
									],
									[
										88234,
										88235
									],
									[
										88291,
										88292
									],
									[
										88297,
										88298
									],
									[
										88352,
										88353
									],
									[
										88359,
										88360
									],
									[
										88370,
										88371
									],
									[
										88377,
										88378
									],
									[
										88388,
										88389
									],
									[
										88393,
										88394
									],
									[
										88404,
										88405
									],
									[
										88410,
										88411
									],
									[
										88414,
										88415
									],
									[
										88420,
										88421
									],
									[
										88441,
										88442
									],
									[
										88458,
										88459
									],
									[
										88494,
										88495
									],
									[
										88508,
										88509
									],
									[
										88545,
										88546
									],
									[
										88550,
										88551
									],
									[
										88556,
										88557
									],
									[
										88563,
										88564
									],
									[
										88622,
										88623
									],
									[
										88629,
										88630
									],
									[
										88640,
										88641
									],
									[
										88645,
										88646
									],
									[
										88656,
										88657
									],
									[
										88667,
										88668
									],
									[
										88722,
										88723
									],
									[
										88729,
										88730
									],
									[
										88740,
										88741
									],
									[
										88747,
										88748
									],
									[
										88758,
										88759
									],
									[
										88763,
										88764
									],
									[
										88774,
										88775
									],
									[
										88780,
										88781
									],
									[
										88784,
										88785
									],
									[
										88790,
										88791
									],
									[
										88811,
										88812
									],
									[
										88826,
										88827
									],
									[
										88883,
										88884
									],
									[
										88895,
										88896
									],
									[
										88943,
										88944
									],
									[
										88948,
										88949
									],
									[
										88954,
										88955
									],
									[
										88968,
										88969
									],
									[
										89020,
										89021
									],
									[
										89027,
										89028
									],
									[
										89038,
										89039
									],
									[
										89045,
										89046
									],
									[
										89056,
										89057
									],
									[
										89061,
										89062
									],
									[
										89072,
										89073
									],
									[
										89078,
										89079
									],
									[
										89082,
										89083
									],
									[
										89088,
										89089
									],
									[
										89108,
										89109
									],
									[
										89130,
										89131
									],
									[
										89178,
										89179
									],
									[
										89183,
										89184
									],
									[
										89189,
										89190
									],
									[
										89195,
										89196
									],
									[
										89285,
										89286
									],
									[
										89305,
										89306
									],
									[
										89461,
										89462
									],
									[
										89464,
										89465
									],
									[
										89499,
										89500
									],
									[
										89506,
										89507
									],
									[
										89539,
										89540
									],
									[
										89544,
										89545
									],
									[
										89577,
										89578
									],
									[
										89582,
										89583
									],
									[
										89619,
										89620
									],
									[
										89628,
										89629
									],
									[
										89658,
										89659
									],
									[
										89660,
										89661
									],
									[
										89690,
										89691
									],
									[
										89692,
										89693
									],
									[
										89728,
										89729
									],
									[
										89736,
										89737
									],
									[
										89870,
										89871
									],
									[
										89871,
										89872
									],
									[
										90071,
										90072
									],
									[
										90076,
										90077
									],
									[
										90087,
										90088
									],
									[
										90094,
										90095
									],
									[
										90116,
										90117
									],
									[
										90121,
										90122
									],
									[
										90132,
										90133
									],
									[
										90139,
										90140
									],
									[
										90181,
										90182
									],
									[
										90221,
										90222
									],
									[
										90528,
										90529
									],
									[
										90538,
										90539
									],
									[
										90693,
										90694
									],
									[
										90703,
										90704
									],
									[
										90710,
										90711
									],
									[
										90713,
										90714
									],
									[
										90875,
										90876
									],
									[
										90905,
										90906
									],
									[
										90913,
										90914
									],
									[
										90922,
										90923
									],
									[
										90925,
										90926
									],
									[
										90929,
										90930
									],
									[
										90937,
										90938
									],
									[
										90944,
										90945
									],
									[
										90947,
										90948
									],
									[
										90951,
										90952
									],
									[
										90959,
										90960
									],
									[
										90963,
										90964
									],
									[
										90966,
										90967
									],
									[
										90970,
										90971
									],
									[
										90978,
										90979
									],
									[
										90983,
										90984
									],
									[
										90986,
										90987
									],
									[
										90988,
										90989
									],
									[
										91159,
										91160
									],
									[
										91201,
										91202
									],
									[
										91344,
										91345
									],
									[
										91405,
										91406
									],
									[
										91444,
										91445
									],
									[
										91450,
										91451
									],
									[
										91576,
										91577
									],
									[
										91580,
										91581
									],
									[
										91704,
										91705
									],
									[
										91709,
										91710
									],
									[
										91790,
										91791
									],
									[
										91796,
										91797
									],
									[
										91927,
										91928
									],
									[
										91947,
										91948
									],
									[
										92094,
										92095
									],
									[
										92103,
										92104
									],
									[
										92252,
										92253
									],
									[
										92401,
										92402
									],
									[
										92477,
										92478
									],
									[
										92487,
										92488
									],
									[
										92526,
										92527
									],
									[
										92536,
										92537
									],
									[
										92575,
										92576
									],
									[
										92583,
										92584
									],
									[
										92695,
										92696
									],
									[
										92752,
										92753
									],
									[
										92814,
										92815
									],
									[
										92839,
										92840
									],
									[
										92954,
										92955
									],
									[
										92971,
										92972
									],
									[
										93020,
										93021
									],
									[
										93146,
										93147
									],
									[
										93188,
										93189
									],
									[
										93198,
										93199
									],
									[
										93236,
										93237
									],
									[
										93246,
										93247
									],
									[
										93452,
										93453
									],
									[
										93459,
										93460
									],
									[
										93628,
										93629
									],
									[
										93647,
										93648
									],
									[
										93704,
										93705
									],
									[
										93909,
										93910
									],
									[
										93942,
										93943
									],
									[
										93943,
										93944
									],
									[
										94004,
										94005
									],
									[
										94012,
										94013
									],
									[
										94052,
										94053
									],
									[
										94060,
										94061
									],
									[
										94100,
										94101
									],
									[
										94106,
										94107
									],
									[
										94144,
										94145
									],
									[
										94151,
										94152
									],
									[
										94190,
										94191
									],
									[
										94199,
										94200
									],
									[
										94240,
										94241
									],
									[
										94247,
										94248
									],
									[
										94287,
										94288
									],
									[
										94295,
										94296
									],
									[
										94416,
										94417
									],
									[
										94441,
										94442
									],
									[
										94451,
										94452
									],
									[
										94461,
										94462
									],
									[
										94471,
										94472
									],
									[
										94480,
										94481
									],
									[
										94489,
										94490
									],
									[
										94502,
										94503
									],
									[
										94671,
										94672
									],
									[
										94698,
										94699
									],
									[
										94747,
										94748
									],
									[
										94834,
										94835
									],
									[
										94873,
										94874
									],
									[
										94881,
										94882
									],
									[
										94923,
										94924
									],
									[
										94931,
										94932
									],
									[
										95088,
										95089
									],
									[
										95111,
										95112
									],
									[
										95175,
										95176
									],
									[
										95340,
										95341
									],
									[
										95431,
										95432
									],
									[
										95439,
										95440
									],
									[
										95480,
										95481
									],
									[
										95488,
										95489
									],
									[
										95529,
										95530
									],
									[
										95535,
										95536
									],
									[
										95549,
										95550
									],
									[
										95554,
										95555
									],
									[
										95587,
										95588
									],
									[
										95592,
										95593
									],
									[
										95606,
										95607
									],
									[
										95610,
										95611
									],
									[
										95643,
										95644
									],
									[
										95649,
										95650
									],
									[
										95663,
										95664
									],
									[
										95669,
										95670
									],
									[
										95833,
										95834
									],
									[
										96008,
										96009
									],
									[
										96043,
										96044
									],
									[
										96048,
										96049
									],
									[
										96134,
										96135
									],
									[
										96140,
										96141
									],
									[
										96178,
										96179
									],
									[
										96186,
										96187
									],
									[
										96226,
										96227
									],
									[
										96232,
										96233
									],
									[
										96270,
										96271
									],
									[
										96277,
										96278
									],
									[
										96316,
										96317
									],
									[
										96320,
										96321
									],
									[
										96356,
										96357
									],
									[
										96367,
										96368
									],
									[
										96466,
										96467
									],
									[
										96499,
										96500
									],
									[
										96634,
										96635
									],
									[
										96748,
										96749
									],
									[
										96792,
										96793
									],
									[
										96800,
										96801
									],
									[
										96840,
										96841
									],
									[
										96848,
										96849
									],
									[
										96958,
										96959
									],
									[
										97002,
										97003
									],
									[
										97012,
										97013
									],
									[
										97014,
										97015
									],
									[
										97115,
										97116
									],
									[
										97129,
										97130
									],
									[
										97152,
										97153
									],
									[
										97182,
										97183
									],
									[
										97446,
										97447
									],
									[
										97452,
										97453
									],
									[
										97584,
										97585
									],
									[
										97601,
										97602
									],
									[
										97673,
										97674
									],
									[
										97895,
										97896
									],
									[
										98006,
										98007
									],
									[
										98007,
										98008
									],
									[
										98121,
										98122
									],
									[
										98126,
										98127
									],
									[
										98132,
										98133
									],
									[
										98139,
										98140
									],
									[
										98165,
										98166
									],
									[
										98174,
										98175
									],
									[
										98221,
										98222
									],
									[
										98226,
										98227
									],
									[
										98232,
										98233
									],
									[
										98238,
										98239
									],
									[
										98287,
										98288
									],
									[
										98296,
										98297
									],
									[
										98375,
										98376
									],
									[
										98382,
										98383
									],
									[
										98438,
										98439
									],
									[
										98445,
										98446
									],
									[
										98484,
										98485
									],
									[
										98491,
										98492
									],
									[
										98544,
										98545
									],
									[
										98552,
										98553
									],
									[
										98593,
										98594
									],
									[
										98601,
										98602
									],
									[
										98642,
										98643
									],
									[
										98648,
										98649
									],
									[
										98687,
										98688
									],
									[
										98693,
										98694
									],
									[
										98732,
										98733
									],
									[
										98738,
										98739
									],
									[
										98752,
										98753
									],
									[
										98757,
										98758
									],
									[
										98790,
										98791
									],
									[
										98798,
										98799
									],
									[
										98839,
										98840
									],
									[
										98850,
										98851
									],
									[
										98871,
										98872
									],
									[
										98876,
										98877
									],
									[
										98899,
										98900
									],
									[
										98903,
										98904
									],
									[
										98938,
										98939
									],
									[
										98949,
										98950
									],
									[
										99070,
										99071
									],
									[
										99073,
										99074
									],
									[
										99127,
										99128
									],
									[
										99135,
										99136
									],
									[
										99138,
										99139
									],
									[
										99145,
										99146
									],
									[
										99161,
										99162
									],
									[
										99164,
										99165
									],
									[
										99205,
										99206
									],
									[
										99213,
										99214
									],
									[
										99242,
										99243
									],
									[
										99260,
										99261
									],
									[
										99273,
										99274
									],
									[
										99276,
										99277
									],
									[
										99401,
										99402
									],
									[
										99407,
										99408
									],
									[
										99534,
										99535
									],
									[
										99549,
										99550
									],
									[
										99598,
										99599
									],
									[
										99734,
										99735
									],
									[
										99830,
										99831
									],
									[
										99841,
										99842
									],
									[
										99893,
										99894
									],
									[
										99901,
										99902
									],
									[
										99915,
										99916
									],
									[
										99918,
										99919
									],
									[
										99970,
										99971
									],
									[
										99981,
										99982
									],
									[
										99984,
										99985
									],
									[
										99990,
										99991
									],
									[
										100031,
										100032
									],
									[
										100039,
										100040
									],
									[
										100053,
										100054
									],
									[
										100064,
										100065
									],
									[
										100067,
										100068
									],
									[
										100073,
										100074
									],
									[
										100080,
										100081
									],
									[
										100087,
										100088
									],
									[
										100121,
										100122
									],
									[
										100127,
										100128
									],
									[
										100141,
										100142
									],
									[
										100152,
										100153
									],
									[
										100155,
										100156
									],
									[
										100161,
										100162
									],
									[
										100168,
										100169
									],
									[
										100173,
										100174
									],
									[
										100284,
										100285
									],
									[
										100307,
										100308
									],
									[
										100343,
										100344
									],
									[
										100364,
										100365
									],
									[
										100480,
										100481
									],
									[
										100499,
										100500
									],
									[
										100566,
										100567
									],
									[
										100752,
										100753
									],
									[
										100847,
										100848
									],
									[
										100851,
										100852
									],
									[
										100907,
										100908
									],
									[
										100915,
										100916
									],
									[
										100932,
										100933
									],
									[
										100939,
										100940
									],
									[
										100972,
										100973
									],
									[
										100978,
										100979
									],
									[
										100995,
										100996
									],
									[
										101000,
										101001
									],
									[
										101033,
										101034
									],
									[
										101039,
										101040
									],
									[
										101056,
										101057
									],
									[
										101061,
										101062
									],
									[
										101094,
										101095
									],
									[
										101104,
										101105
									],
									[
										101121,
										101122
									],
									[
										101130,
										101131
									],
									[
										101163,
										101164
									],
									[
										101166,
										101167
									],
									[
										101183,
										101184
									],
									[
										101185,
										101186
									],
									[
										101218,
										101219
									],
									[
										101221,
										101222
									],
									[
										101238,
										101239
									],
									[
										101240,
										101241
									],
									[
										101273,
										101274
									],
									[
										101282,
										101283
									],
									[
										101299,
										101300
									],
									[
										101307,
										101308
									],
									[
										101419,
										101420
									],
									[
										101442,
										101443
									],
									[
										101477,
										101478
									],
									[
										101498,
										101499
									],
									[
										101622,
										101623
									],
									[
										101641,
										101642
									],
									[
										101704,
										101705
									],
									[
										101851,
										101852
									],
									[
										101945,
										101946
									],
									[
										101956,
										101957
									],
									[
										102008,
										102009
									],
									[
										102016,
										102017
									],
									[
										102029,
										102030
									],
									[
										102040,
										102041
									],
									[
										102043,
										102044
									],
									[
										102050,
										102051
									],
									[
										102083,
										102084
									],
									[
										102093,
										102094
									],
									[
										102106,
										102107
									],
									[
										102117,
										102118
									],
									[
										102120,
										102121
									],
									[
										102129,
										102130
									],
									[
										102188,
										102189
									],
									[
										102199,
										102200
									],
									[
										102202,
										102203
									],
									[
										102208,
										102209
									],
									[
										102249,
										102250
									],
									[
										102255,
										102256
									],
									[
										102268,
										102269
									],
									[
										102279,
										102280
									],
									[
										102282,
										102283
									],
									[
										102288,
										102289
									],
									[
										102295,
										102296
									],
									[
										102300,
										102301
									],
									[
										102334,
										102335
									],
									[
										102342,
										102343
									],
									[
										102355,
										102356
									],
									[
										102366,
										102367
									],
									[
										102369,
										102370
									],
									[
										102375,
										102376
									],
									[
										102382,
										102383
									],
									[
										102389,
										102390
									],
									[
										102498,
										102499
									],
									[
										102521,
										102522
									],
									[
										102551,
										102552
									],
									[
										102576,
										102577
									],
									[
										102612,
										102613
									],
									[
										102635,
										102636
									],
									[
										102788,
										102789
									],
									[
										102942,
										102943
									],
									[
										103037,
										103038
									],
									[
										103046,
										103047
									],
									[
										103100,
										103101
									],
									[
										103109,
										103110
									],
									[
										103170,
										103171
									],
									[
										103179,
										103180
									],
									[
										103186,
										103187
									],
									[
										103192,
										103193
									],
									[
										103235,
										103236
									],
									[
										103243,
										103244
									],
									[
										103257,
										103258
									],
									[
										103260,
										103261
									],
									[
										103296,
										103297
									],
									[
										103306,
										103307
									],
									[
										103320,
										103321
									],
									[
										103329,
										103330
									],
									[
										103336,
										103337
									],
									[
										103345,
										103346
									],
									[
										103381,
										103382
									],
									[
										103387,
										103388
									],
									[
										103401,
										103402
									],
									[
										103410,
										103411
									],
									[
										103417,
										103418
									],
									[
										103423,
										103424
									],
									[
										103430,
										103431
									],
									[
										103435,
										103436
									],
									[
										103471,
										103472
									],
									[
										103479,
										103480
									],
									[
										103493,
										103494
									],
									[
										103502,
										103503
									],
									[
										103509,
										103510
									],
									[
										103515,
										103516
									],
									[
										103522,
										103523
									],
									[
										103529,
										103530
									],
									[
										103665,
										103666
									],
									[
										103692,
										103693
									],
									[
										103756,
										103757
									],
									[
										103989,
										103990
									],
									[
										104200,
										104201
									],
									[
										104225,
										104226
									],
									[
										104340,
										104341
									],
									[
										104348,
										104349
									],
									[
										104398,
										104399
									],
									[
										104404,
										104405
									],
									[
										104469,
										104470
									],
									[
										104475,
										104476
									],
									[
										104540,
										104541
									],
									[
										104546,
										104547
									],
									[
										104611,
										104612
									],
									[
										104614,
										104615
									],
									[
										104676,
										104677
									],
									[
										104679,
										104680
									],
									[
										104741,
										104742
									],
									[
										104744,
										104745
									],
									[
										104806,
										104807
									],
									[
										104812,
										104813
									],
									[
										104877,
										104878
									],
									[
										104884,
										104885
									],
									[
										104950,
										104951
									],
									[
										104959,
										104960
									],
									[
										105027,
										105028
									],
									[
										105037,
										105038
									],
									[
										105257,
										105258
									],
									[
										105330,
										105331
									],
									[
										105372,
										105373
									],
									[
										105380,
										105381
									],
									[
										105555,
										105556
									],
									[
										105562,
										105563
									],
									[
										105568,
										105569
									],
									[
										105574,
										105575
									],
									[
										105602,
										105603
									],
									[
										105609,
										105610
									],
									[
										105619,
										105620
									],
									[
										105635,
										105636
									],
									[
										105715,
										105716
									],
									[
										105722,
										105723
									],
									[
										105732,
										105733
									],
									[
										105744,
										105745
									],
									[
										105805,
										105806
									],
									[
										105812,
										105813
									],
									[
										105822,
										105823
									],
									[
										105838,
										105839
									],
									[
										105951,
										105952
									],
									[
										105967,
										105968
									],
									[
										106159,
										106160
									],
									[
										106166,
										106167
									],
									[
										106186,
										106187
									],
									[
										106194,
										106195
									],
									[
										106231,
										106232
									],
									[
										106267,
										106268
									],
									[
										106277,
										106278
									],
									[
										106292,
										106293
									],
									[
										106307,
										106308
									],
									[
										106314,
										106315
									],
									[
										106406,
										106407
									],
									[
										106411,
										106412
									],
									[
										106423,
										106424
									],
									[
										106424,
										106425
									],
									[
										106576,
										106577
									],
									[
										106578,
										106579
									],
									[
										106595,
										106596
									],
									[
										106597,
										106598
									],
									[
										106644,
										106645
									],
									[
										106646,
										106647
									],
									[
										106680,
										106681
									],
									[
										106685,
										106686
									],
									[
										106690,
										106691
									],
									[
										106699,
										106700
									],
									[
										106853,
										106854
									],
									[
										106860,
										106861
									],
									[
										106874,
										106875
									],
									[
										106881,
										106882
									],
									[
										106899,
										106900
									],
									[
										106906,
										106907
									],
									[
										106910,
										106911
									],
									[
										106915,
										106916
									],
									[
										106923,
										106924
									],
									[
										106929,
										106930
									],
									[
										106938,
										106939
									],
									[
										106940,
										106941
									],
									[
										106949,
										106950
									],
									[
										106951,
										106952
									],
									[
										106960,
										106961
									],
									[
										106962,
										106963
									],
									[
										107003,
										107004
									],
									[
										107012,
										107013
									],
									[
										107147,
										107148
									],
									[
										107248,
										107249
									],
									[
										107280,
										107281
									],
									[
										107287,
										107288
									],
									[
										107346,
										107347
									],
									[
										107354,
										107355
									],
									[
										107394,
										107395
									],
									[
										107400,
										107401
									],
									[
										107438,
										107439
									],
									[
										107442,
										107443
									],
									[
										107600,
										107601
									],
									[
										107769,
										107770
									],
									[
										107859,
										107860
									],
									[
										107867,
										107868
									],
									[
										107880,
										107881
									],
									[
										107887,
										107888
									],
									[
										107920,
										107921
									],
									[
										107928,
										107929
									],
									[
										107941,
										107942
									],
									[
										107948,
										107949
									],
									[
										107981,
										107982
									],
									[
										107987,
										107988
									],
									[
										108000,
										108001
									],
									[
										108005,
										108006
									],
									[
										108038,
										108039
									],
									[
										108045,
										108046
									],
									[
										108058,
										108059
									],
									[
										108064,
										108065
									],
									[
										108097,
										108098
									],
									[
										108100,
										108101
									],
									[
										108113,
										108114
									],
									[
										108115,
										108116
									],
									[
										108148,
										108149
									],
									[
										108151,
										108152
									],
									[
										108164,
										108165
									],
									[
										108166,
										108167
									],
									[
										108199,
										108200
									],
									[
										108202,
										108203
									],
									[
										108215,
										108216
									],
									[
										108217,
										108218
									],
									[
										108333,
										108334
									],
									[
										108338,
										108339
									],
									[
										108470,
										108471
									],
									[
										108482,
										108483
									],
									[
										108492,
										108493
									],
									[
										108494,
										108495
									],
									[
										108549,
										108550
									],
									[
										108645,
										108646
									],
									[
										108695,
										108696
									],
									[
										108703,
										108704
									],
									[
										108743,
										108744
									],
									[
										108749,
										108750
									],
									[
										108907,
										108908
									],
									[
										108927,
										108928
									],
									[
										109064,
										109065
									],
									[
										109068,
										109069
									],
									[
										109270,
										109271
									],
									[
										109274,
										109275
									],
									[
										109287,
										109288
									],
									[
										109290,
										109291
									],
									[
										109293,
										109294
									],
									[
										109298,
										109299
									],
									[
										109311,
										109312
									],
									[
										109314,
										109315
									],
									[
										109350,
										109351
									],
									[
										109353,
										109354
									],
									[
										109371,
										109372
									],
									[
										109374,
										109375
									],
									[
										109403,
										109404
									],
									[
										109411,
										109412
									],
									[
										109417,
										109418
									],
									[
										109422,
										109423
									],
									[
										109439,
										109440
									],
									[
										109443,
										109444
									],
									[
										109471,
										109472
									],
									[
										109479,
										109480
									],
									[
										109495,
										109496
									],
									[
										109503,
										109504
									],
									[
										109531,
										109532
									],
									[
										109536,
										109537
									],
									[
										109581,
										109582
									],
									[
										109586,
										109587
									],
									[
										109793,
										109794
									],
									[
										109832,
										109833
									],
									[
										109845,
										109846
									],
									[
										109848,
										109849
									],
									[
										109990,
										109991
									],
									[
										110010,
										110011
									],
									[
										110221,
										110222
									],
									[
										110236,
										110237
									],
									[
										110429,
										110430
									],
									[
										110446,
										110447
									],
									[
										110451,
										110452
									],
									[
										110462,
										110463
									],
									[
										110496,
										110497
									],
									[
										110507,
										110508
									],
									[
										110510,
										110511
									],
									[
										110517,
										110518
									],
									[
										110533,
										110534
									],
									[
										110544,
										110545
									],
									[
										110547,
										110548
									],
									[
										110554,
										110555
									],
									[
										110586,
										110587
									],
									[
										110598,
										110599
									],
									[
										110630,
										110631
									],
									[
										110638,
										110639
									],
									[
										110641,
										110642
									],
									[
										110650,
										110651
									],
									[
										110666,
										110667
									],
									[
										110674,
										110675
									],
									[
										110677,
										110678
									],
									[
										110686,
										110687
									],
									[
										110719,
										110720
									],
									[
										110731,
										110732
									],
									[
										110785,
										110786
									],
									[
										110796,
										110797
									],
									[
										110799,
										110800
									],
									[
										110805,
										110806
									],
									[
										110847,
										110848
									],
									[
										110858,
										110859
									],
									[
										110861,
										110862
									],
									[
										110867,
										110868
									],
									[
										110874,
										110875
									],
									[
										110881,
										110882
									],
									[
										110943,
										110944
									],
									[
										110954,
										110955
									],
									[
										110957,
										110958
									],
									[
										110963,
										110964
									],
									[
										111007,
										111008
									],
									[
										111018,
										111019
									],
									[
										111021,
										111022
									],
									[
										111027,
										111028
									],
									[
										111034,
										111035
									],
									[
										111039,
										111040
									],
									[
										111055,
										111056
									],
									[
										111066,
										111067
									],
									[
										111069,
										111070
									],
									[
										111075,
										111076
									],
									[
										111082,
										111083
									],
									[
										111087,
										111088
									],
									[
										111124,
										111125
									],
									[
										111131,
										111132
									],
									[
										111164,
										111165
									],
									[
										111175,
										111176
									],
									[
										111178,
										111179
									],
									[
										111184,
										111185
									],
									[
										111191,
										111192
									],
									[
										111198,
										111199
									],
									[
										111214,
										111215
									],
									[
										111225,
										111226
									],
									[
										111228,
										111229
									],
									[
										111234,
										111235
									],
									[
										111241,
										111242
									],
									[
										111248,
										111249
									],
									[
										111281,
										111282
									],
									[
										111292,
										111293
									],
									[
										111295,
										111296
									],
									[
										111301,
										111302
									],
									[
										111308,
										111309
									],
									[
										111315,
										111316
									],
									[
										111494,
										111495
									],
									[
										111505,
										111506
									],
									[
										111508,
										111509
									],
									[
										111514,
										111515
									],
									[
										111553,
										111554
									],
									[
										111564,
										111565
									],
									[
										111567,
										111568
									],
									[
										111573,
										111574
									],
									[
										111580,
										111581
									],
									[
										111587,
										111588
									],
									[
										111705,
										111706
									],
									[
										111714,
										111715
									],
									[
										111883,
										111884
									],
									[
										111901,
										111902
									],
									[
										111964,
										111965
									],
									[
										112103,
										112104
									],
									[
										112193,
										112194
									],
									[
										112199,
										112200
									],
									[
										112212,
										112213
									],
									[
										112217,
										112218
									],
									[
										112250,
										112251
									],
									[
										112256,
										112257
									],
									[
										112269,
										112270
									],
									[
										112274,
										112275
									],
									[
										112307,
										112308
									],
									[
										112317,
										112318
									],
									[
										112330,
										112331
									],
									[
										112339,
										112340
									],
									[
										112372,
										112373
									],
									[
										112375,
										112376
									],
									[
										112388,
										112389
									],
									[
										112390,
										112391
									],
									[
										112423,
										112424
									],
									[
										112426,
										112427
									],
									[
										112439,
										112440
									],
									[
										112441,
										112442
									],
									[
										112474,
										112475
									],
									[
										112483,
										112484
									],
									[
										112496,
										112497
									],
									[
										112504,
										112505
									],
									[
										112537,
										112538
									],
									[
										112545,
										112546
									],
									[
										112558,
										112559
									],
									[
										112565,
										112566
									],
									[
										112699,
										112700
									],
									[
										112705,
										112706
									],
									[
										112827,
										112828
									],
									[
										112846,
										112847
									],
									[
										112895,
										112896
									],
									[
										113026,
										113027
									],
									[
										113116,
										113117
									],
									[
										113122,
										113123
									],
									[
										113171,
										113172
									],
									[
										113177,
										113178
									],
									[
										113226,
										113227
									],
									[
										113236,
										113237
									],
									[
										113289,
										113290
									],
									[
										113292,
										113293
									],
									[
										113338,
										113339
									],
									[
										113341,
										113342
									],
									[
										113387,
										113388
									],
									[
										113396,
										113397
									],
									[
										113448,
										113449
									],
									[
										113452,
										113453
									],
									[
										113600,
										113601
									],
									[
										113606,
										113607
									],
									[
										113751,
										113752
									],
									[
										113842,
										113843
									],
									[
										113932,
										113933
									],
									[
										113940,
										113941
									],
									[
										113999,
										114000
									],
									[
										114003,
										114004
									],
									[
										114165,
										114166
									],
									[
										114187,
										114188
									],
									[
										114205,
										114206
									],
									[
										114207,
										114208
									],
									[
										114215,
										114216
									],
									[
										114217,
										114218
									],
									[
										114273,
										114274
									],
									[
										114391,
										114392
									],
									[
										114524,
										114525
									],
									[
										114528,
										114529
									],
									[
										114576,
										114577
									],
									[
										114579,
										114580
									],
									[
										114594,
										114595
									],
									[
										114596,
										114597
									],
									[
										114629,
										114630
									],
									[
										114632,
										114633
									],
									[
										114647,
										114648
									],
									[
										114649,
										114650
									],
									[
										114682,
										114683
									],
									[
										114689,
										114690
									],
									[
										114704,
										114705
									],
									[
										114710,
										114711
									],
									[
										114743,
										114744
									],
									[
										114750,
										114751
									],
									[
										114765,
										114766
									],
									[
										114771,
										114772
									],
									[
										114804,
										114805
									],
									[
										114812,
										114813
									],
									[
										114827,
										114828
									],
									[
										114834,
										114835
									],
									[
										114867,
										114868
									],
									[
										114873,
										114874
									],
									[
										114912,
										114913
									],
									[
										114919,
										114920
									],
									[
										114959,
										114960
									],
									[
										114963,
										114964
									],
									[
										114979,
										114980
									],
									[
										114982,
										114983
									],
									[
										115108,
										115109
									],
									[
										115123,
										115124
									],
									[
										115172,
										115173
									],
									[
										115269,
										115270
									],
									[
										115403,
										115404
									],
									[
										115407,
										115408
									],
									[
										115456,
										115457
									],
									[
										115467,
										115468
									],
									[
										115638,
										115639
									],
									[
										115654,
										115655
									],
									[
										115703,
										115704
									],
									[
										115837,
										115838
									],
									[
										115932,
										115933
									],
									[
										115940,
										115941
									],
									[
										115981,
										115982
									],
									[
										115987,
										115988
									],
									[
										116026,
										116027
									],
									[
										116029,
										116030
									],
									[
										116080,
										116081
									],
									[
										116083,
										116084
									],
									[
										116249,
										116250
									],
									[
										116341,
										116342
									],
									[
										116469,
										116470
									],
									[
										116472,
										116473
									],
									[
										116521,
										116522
									],
									[
										116524,
										116525
									],
									[
										116742,
										116743
									],
									[
										116744,
										116745
									],
									[
										116820,
										116821
									],
									[
										116822,
										116823
									],
									[
										116916,
										116917
									],
									[
										116918,
										116919
									],
									[
										117049,
										117050
									],
									[
										117070,
										117071
									],
									[
										117133,
										117134
									],
									[
										117236,
										117237
									],
									[
										117326,
										117327
									],
									[
										117334,
										117335
									],
									[
										117375,
										117376
									],
									[
										117378,
										117379
									],
									[
										117421,
										117422
									],
									[
										117424,
										117425
									],
									[
										117577,
										117578
									],
									[
										117599,
										117600
									],
									[
										117662,
										117663
									],
									[
										117766,
										117767
									],
									[
										117856,
										117857
									],
									[
										117864,
										117865
									],
									[
										117905,
										117906
									],
									[
										117908,
										117909
									],
									[
										117921,
										117922
									],
									[
										117923,
										117924
									],
									[
										117956,
										117957
									],
									[
										117959,
										117960
									],
									[
										117972,
										117973
									],
									[
										117974,
										117975
									],
									[
										118109,
										118110
									],
									[
										118133,
										118134
									],
									[
										118197,
										118198
									],
									[
										118430,
										118431
									],
									[
										118581,
										118582
									],
									[
										118589,
										118590
									],
									[
										118603,
										118604
									],
									[
										118606,
										118607
									],
									[
										118666,
										118667
									],
									[
										118674,
										118675
									],
									[
										118743,
										118744
									],
									[
										118751,
										118752
									],
									[
										118758,
										118759
									],
									[
										118767,
										118768
									],
									[
										118835,
										118836
									],
									[
										118842,
										118843
									],
									[
										118875,
										118876
									],
									[
										118881,
										118882
									],
									[
										118895,
										118896
									],
									[
										118903,
										118904
									],
									[
										118910,
										118911
									],
									[
										118915,
										118916
									],
									[
										118949,
										118950
									],
									[
										118955,
										118956
									],
									[
										118969,
										118970
									],
									[
										118977,
										118978
									],
									[
										118984,
										118985
									],
									[
										118989,
										118990
									],
									[
										119023,
										119024
									],
									[
										119029,
										119030
									],
									[
										119043,
										119044
									],
									[
										119051,
										119052
									],
									[
										119058,
										119059
									],
									[
										119063,
										119064
									],
									[
										119097,
										119098
									],
									[
										119100,
										119101
									],
									[
										119114,
										119115
									],
									[
										119122,
										119123
									],
									[
										119129,
										119130
									],
									[
										119131,
										119132
									],
									[
										119165,
										119166
									],
									[
										119168,
										119169
									],
									[
										119182,
										119183
									],
									[
										119190,
										119191
									],
									[
										119197,
										119198
									],
									[
										119199,
										119200
									],
									[
										119233,
										119234
									],
									[
										119236,
										119237
									],
									[
										119250,
										119251
									],
									[
										119258,
										119259
									],
									[
										119265,
										119266
									],
									[
										119267,
										119268
									],
									[
										119301,
										119302
									],
									[
										119307,
										119308
									],
									[
										119321,
										119322
									],
									[
										119329,
										119330
									],
									[
										119336,
										119337
									],
									[
										119341,
										119342
									],
									[
										119375,
										119376
									],
									[
										119382,
										119383
									],
									[
										119396,
										119397
									],
									[
										119404,
										119405
									],
									[
										119411,
										119412
									],
									[
										119417,
										119418
									],
									[
										119451,
										119452
									],
									[
										119460,
										119461
									],
									[
										119474,
										119475
									],
									[
										119482,
										119483
									],
									[
										119489,
										119490
									],
									[
										119497,
										119498
									],
									[
										119531,
										119532
									],
									[
										119541,
										119542
									],
									[
										119662,
										119663
									],
									[
										119669,
										119670
									],
									[
										119834,
										119835
									],
									[
										120002,
										120003
									],
									[
										120094,
										120095
									],
									[
										120102,
										120103
									],
									[
										120117,
										120118
									],
									[
										120124,
										120125
									],
									[
										120157,
										120158
									],
									[
										120167,
										120168
									],
									[
										120182,
										120183
									],
									[
										120191,
										120192
									],
									[
										120224,
										120225
									],
									[
										120230,
										120231
									],
									[
										120245,
										120246
									],
									[
										120250,
										120251
									],
									[
										120283,
										120284
									],
									[
										120289,
										120290
									],
									[
										120304,
										120305
									],
									[
										120309,
										120310
									],
									[
										120342,
										120343
									],
									[
										120348,
										120349
									],
									[
										120363,
										120364
									],
									[
										120368,
										120369
									],
									[
										120520,
										120521
									],
									[
										120545,
										120546
									],
									[
										120609,
										120610
									],
									[
										120816,
										120817
									],
									[
										120939,
										120940
									],
									[
										120947,
										120948
									],
									[
										120988,
										120989
									],
									[
										120994,
										120995
									],
									[
										121033,
										121034
									],
									[
										121044,
										121045
									],
									[
										121058,
										121059
									],
									[
										121068,
										121069
									],
									[
										121101,
										121102
									],
									[
										121111,
										121112
									],
									[
										121125,
										121126
									],
									[
										121134,
										121135
									],
									[
										121167,
										121168
									],
									[
										121177,
										121178
									],
									[
										121191,
										121192
									],
									[
										121200,
										121201
									],
									[
										121233,
										121234
									],
									[
										121243,
										121244
									],
									[
										121257,
										121258
									],
									[
										121266,
										121267
									],
									[
										121477,
										121478
									],
									[
										121478,
										121479
									],
									[
										121573,
										121574
									],
									[
										121597,
										121598
									],
									[
										121661,
										121662
									],
									[
										121862,
										121863
									],
									[
										121985,
										121986
									],
									[
										121993,
										121994
									],
									[
										122045,
										122046
									],
									[
										122051,
										122052
									],
									[
										122101,
										122102
									],
									[
										122112,
										122113
									],
									[
										122167,
										122168
									],
									[
										122177,
										122178
									],
									[
										122231,
										122232
									],
									[
										122241,
										122242
									],
									[
										122294,
										122295
									],
									[
										122301,
										122302
									],
									[
										122439,
										122440
									],
									[
										122460,
										122461
									],
									[
										122523,
										122524
									],
									[
										122703,
										122704
									],
									[
										122789,
										122790
									],
									[
										122794,
										122795
									],
									[
										122829,
										122830
									],
									[
										122837,
										122838
									],
									[
										122850,
										122851
									],
									[
										122857,
										122858
									],
									[
										122890,
										122891
									],
									[
										122900,
										122901
									],
									[
										122913,
										122914
									],
									[
										122922,
										122923
									],
									[
										122955,
										122956
									],
									[
										122961,
										122962
									],
									[
										122974,
										122975
									],
									[
										122979,
										122980
									],
									[
										123012,
										123013
									],
									[
										123019,
										123020
									],
									[
										123032,
										123033
									],
									[
										123038,
										123039
									],
									[
										123071,
										123072
									],
									[
										123077,
										123078
									],
									[
										123090,
										123091
									],
									[
										123095,
										123096
									],
									[
										123128,
										123129
									],
									[
										123134,
										123135
									],
									[
										123147,
										123148
									],
									[
										123152,
										123153
									],
									[
										123353,
										123354
									],
									[
										123469,
										123470
									],
									[
										123542,
										123543
									],
									[
										123550,
										123551
									],
									[
										123590,
										123591
									],
									[
										123600,
										123601
									],
									[
										123737,
										123738
									],
									[
										123759,
										123760
									],
									[
										123863,
										123864
									],
									[
										123963,
										123964
									],
									[
										124050,
										124051
									],
									[
										124060,
										124061
									],
									[
										124077,
										124078
									],
									[
										124090,
										124091
									],
									[
										124143,
										124144
									],
									[
										124150,
										124151
									],
									[
										124201,
										124202
									],
									[
										124206,
										124207
									],
									[
										124255,
										124256
									],
									[
										124262,
										124263
									],
									[
										124313,
										124314
									],
									[
										124319,
										124320
									],
									[
										124369,
										124370
									],
									[
										124379,
										124380
									],
									[
										124432,
										124433
									],
									[
										124436,
										124437
									],
									[
										124587,
										124588
									],
									[
										124620,
										124621
									],
									[
										124684,
										124685
									],
									[
										124784,
										124785
									],
									[
										124908,
										124909
									],
									[
										124912,
										124913
									],
									[
										124960,
										124961
									],
									[
										124967,
										124968
									],
									[
										125018,
										125019
									],
									[
										125028,
										125029
									],
									[
										125184,
										125185
									],
									[
										125263,
										125264
									],
									[
										125354,
										125355
									],
									[
										125362,
										125363
									],
									[
										125587,
										125588
									],
									[
										125590,
										125591
									],
									[
										125620,
										125621
									],
									[
										125627,
										125628
									],
									[
										125657,
										125658
									],
									[
										125664,
										125665
									],
									[
										125694,
										125695
									],
									[
										125701,
										125702
									],
									[
										125731,
										125732
									],
									[
										125743,
										125744
									],
									[
										125773,
										125774
									],
									[
										125782,
										125783
									],
									[
										125812,
										125813
									],
									[
										125817,
										125818
									],
									[
										125847,
										125848
									],
									[
										125852,
										125853
									],
									[
										125882,
										125883
									],
									[
										125887,
										125888
									],
									[
										125917,
										125918
									],
									[
										125926,
										125927
									],
									[
										125956,
										125957
									],
									[
										125966,
										125967
									],
									[
										125996,
										125997
									],
									[
										126006,
										126007
									],
									[
										126036,
										126037
									],
									[
										126046,
										126047
									],
									[
										126076,
										126077
									],
									[
										126085,
										126086
									],
									[
										126115,
										126116
									],
									[
										126124,
										126125
									],
									[
										126154,
										126155
									],
									[
										126164,
										126165
									],
									[
										126194,
										126195
									],
									[
										126200,
										126201
									],
									[
										126230,
										126231
									],
									[
										126234,
										126235
									],
									[
										126364,
										126365
									],
									[
										126442,
										126443
									],
									[
										126533,
										126534
									],
									[
										126541,
										126542
									],
									[
										126767,
										126768
									],
									[
										126770,
										126771
									],
									[
										126800,
										126801
									],
									[
										126807,
										126808
									],
									[
										126837,
										126838
									],
									[
										126846,
										126847
									],
									[
										126876,
										126877
									],
									[
										126881,
										126882
									],
									[
										126911,
										126912
									],
									[
										126916,
										126917
									],
									[
										126946,
										126947
									],
									[
										126951,
										126952
									],
									[
										127080,
										127081
									],
									[
										127163,
										127164
									],
									[
										127254,
										127255
									],
									[
										127262,
										127263
									],
									[
										127470,
										127471
									],
									[
										127473,
										127474
									],
									[
										127503,
										127504
									],
									[
										127510,
										127511
									],
									[
										127540,
										127541
									],
									[
										127549,
										127550
									],
									[
										127579,
										127580
									],
									[
										127584,
										127585
									],
									[
										127614,
										127615
									],
									[
										127619,
										127620
									],
									[
										127649,
										127650
									],
									[
										127658,
										127659
									],
									[
										127688,
										127689
									],
									[
										127694,
										127695
									],
									[
										127832,
										127833
									],
									[
										127920,
										127921
									],
									[
										128011,
										128012
									],
									[
										128022,
										128023
									],
									[
										128251,
										128252
									],
									[
										128254,
										128255
									],
									[
										128284,
										128285
									],
									[
										128291,
										128292
									],
									[
										128321,
										128322
									],
									[
										128326,
										128327
									],
									[
										128356,
										128357
									],
									[
										128366,
										128367
									],
									[
										128396,
										128397
									],
									[
										128405,
										128406
									],
									[
										128435,
										128436
									],
									[
										128444,
										128445
									],
									[
										128474,
										128475
									],
									[
										128480,
										128481
									],
									[
										128510,
										128511
									],
									[
										128514,
										128515
									],
									[
										128544,
										128545
									],
									[
										128550,
										128551
									],
									[
										128580,
										128581
									],
									[
										128585,
										128586
									],
									[
										128615,
										128616
									],
									[
										128624,
										128625
									],
									[
										128762,
										128763
									],
									[
										128869,
										128870
									],
									[
										128960,
										128961
									],
									[
										128968,
										128969
									],
									[
										129016,
										129017
									],
									[
										129022,
										129023
									],
									[
										129253,
										129254
									],
									[
										129256,
										129257
									],
									[
										129286,
										129287
									],
									[
										129291,
										129292
									],
									[
										129321,
										129322
									],
									[
										129326,
										129327
									],
									[
										129356,
										129357
									],
									[
										129361,
										129362
									],
									[
										129391,
										129392
									],
									[
										129393,
										129394
									],
									[
										129423,
										129424
									],
									[
										129425,
										129426
									],
									[
										129455,
										129456
									],
									[
										129457,
										129458
									],
									[
										129487,
										129488
									],
									[
										129492,
										129493
									],
									[
										129522,
										129523
									],
									[
										129528,
										129529
									],
									[
										129558,
										129559
									],
									[
										129566,
										129567
									],
									[
										129596,
										129597
									],
									[
										129605,
										129606
									],
									[
										129744,
										129745
									],
									[
										129851,
										129852
									],
									[
										129987,
										129988
									],
									[
										129995,
										129996
									],
									[
										130043,
										130044
									],
									[
										130049,
										130050
									],
									[
										130281,
										130282
									],
									[
										130290,
										130291
									],
									[
										130336,
										130337
									],
									[
										130339,
										130340
									],
									[
										130369,
										130370
									],
									[
										130376,
										130377
									],
									[
										130406,
										130407
									],
									[
										130415,
										130416
									],
									[
										130445,
										130446
									],
									[
										130450,
										130451
									],
									[
										130480,
										130481
									],
									[
										130486,
										130487
									],
									[
										130516,
										130517
									],
									[
										130521,
										130522
									],
									[
										130551,
										130552
									],
									[
										130556,
										130557
									],
									[
										130636,
										130637
									],
									[
										130646,
										130647
									],
									[
										130785,
										130786
									],
									[
										130814,
										130815
									],
									[
										130888,
										130889
									],
									[
										131297,
										131298
									],
									[
										131459,
										131460
									],
									[
										131467,
										131468
									],
									[
										131521,
										131522
									],
									[
										131529,
										131530
									],
									[
										131583,
										131584
									],
									[
										131591,
										131592
									],
									[
										131645,
										131646
									],
									[
										131658,
										131659
									],
									[
										131717,
										131718
									],
									[
										131727,
										131728
									],
									[
										131783,
										131784
									],
									[
										131789,
										131790
									],
									[
										131841,
										131842
									],
									[
										131847,
										131848
									],
									[
										131899,
										131900
									],
									[
										131905,
										131906
									],
									[
										131957,
										131958
									],
									[
										131967,
										131968
									],
									[
										132023,
										132024
									],
									[
										132034,
										132035
									],
									[
										132091,
										132092
									],
									[
										132102,
										132103
									],
									[
										132159,
										132160
									],
									[
										132170,
										132171
									],
									[
										132227,
										132228
									],
									[
										132237,
										132238
									],
									[
										132293,
										132294
									],
									[
										132303,
										132304
									],
									[
										132359,
										132360
									],
									[
										132370,
										132371
									],
									[
										132427,
										132428
									],
									[
										132434,
										132435
									],
									[
										132487,
										132488
									],
									[
										132492,
										132493
									],
									[
										132635,
										132636
									],
									[
										132662,
										132663
									],
									[
										132737,
										132738
									],
									[
										132931,
										132932
									],
									[
										133056,
										133057
									],
									[
										133064,
										133065
									],
									[
										133117,
										133118
									],
									[
										133127,
										133128
									],
									[
										133182,
										133183
									],
									[
										133188,
										133189
									],
									[
										133239,
										133240
									],
									[
										133245,
										133246
									],
									[
										133296,
										133297
									],
									[
										133306,
										133307
									],
									[
										133361,
										133362
									],
									[
										133368,
										133369
									],
									[
										133539,
										133540
									],
									[
										133635,
										133636
									],
									[
										133674,
										133675
									],
									[
										133682,
										133683
									],
									[
										133852,
										133853
									],
									[
										133880,
										133881
									],
									[
										133891,
										133892
									],
									[
										133917,
										133918
									],
									[
										133925,
										133926
									],
									[
										133927,
										133928
									],
									[
										133991,
										133992
									],
									[
										134101,
										134102
									],
									[
										134140,
										134141
									],
									[
										134148,
										134149
									],
									[
										134188,
										134189
									],
									[
										134196,
										134197
									],
									[
										134236,
										134237
									],
									[
										134242,
										134243
									],
									[
										134280,
										134281
									],
									[
										134287,
										134288
									],
									[
										134326,
										134327
									],
									[
										134334,
										134335
									],
									[
										134455,
										134456
									],
									[
										134461,
										134462
									],
									[
										134471,
										134472
									],
									[
										134478,
										134479
									],
									[
										134488,
										134489
									],
									[
										134521,
										134522
									],
									[
										134529,
										134530
									],
									[
										134531,
										134532
									],
									[
										134540,
										134541
									],
									[
										134542,
										134543
									],
									[
										134742,
										134743
									],
									[
										134870,
										134871
									],
									[
										134909,
										134910
									],
									[
										134918,
										134919
									],
									[
										134959,
										134960
									],
									[
										134967,
										134968
									],
									[
										135007,
										135008
									],
									[
										135015,
										135016
									],
									[
										135169,
										135170
									],
									[
										135189,
										135190
									],
									[
										135243,
										135244
									],
									[
										135373,
										135374
									],
									[
										135412,
										135413
									],
									[
										135417,
										135418
									],
									[
										135454,
										135455
									],
									[
										135462,
										135463
									],
									[
										135502,
										135503
									],
									[
										135510,
										135511
									],
									[
										135710,
										135711
									],
									[
										135874,
										135875
									],
									[
										135921,
										135922
									],
									[
										135929,
										135930
									],
									[
										136055,
										136056
									],
									[
										136095,
										136096
									],
									[
										136101,
										136102
									],
									[
										136103,
										136104
									],
									[
										136176,
										136177
									],
									[
										136185,
										136186
									],
									[
										136291,
										136292
									],
									[
										136327,
										136328
									],
									[
										136337,
										136338
									],
									[
										136339,
										136340
									],
									[
										136410,
										136411
									],
									[
										136415,
										136416
									],
									[
										136565,
										136566
									],
									[
										136714,
										136715
									],
									[
										136756,
										136757
									],
									[
										136764,
										136765
									],
									[
										136804,
										136805
									],
									[
										136812,
										136813
									],
									[
										136852,
										136853
									],
									[
										136858,
										136859
									],
									[
										137019,
										137020
									],
									[
										137077,
										137078
									],
									[
										137116,
										137117
									],
									[
										137120,
										137121
									],
									[
										137337,
										137338
									],
									[
										137484,
										137485
									],
									[
										137545,
										137546
									],
									[
										137774,
										137775
									],
									[
										137816,
										137817
									],
									[
										137824,
										137825
									],
									[
										137864,
										137865
									],
									[
										137870,
										137871
									],
									[
										138038,
										138039
									],
									[
										138186,
										138187
									],
									[
										138228,
										138229
									],
									[
										138236,
										138237
									],
									[
										138276,
										138277
									],
									[
										138282,
										138283
									],
									[
										138442,
										138443
									],
									[
										138447,
										138448
									],
									[
										138453,
										138454
									],
									[
										138460,
										138461
									],
									[
										138476,
										138477
									],
									[
										138481,
										138482
									],
									[
										138510,
										138511
									],
									[
										138519,
										138520
									],
									[
										138580,
										138581
									],
									[
										138588,
										138589
									],
									[
										138686,
										138687
									],
									[
										138696,
										138697
									],
									[
										138713,
										138714
									],
									[
										138720,
										138721
									],
									[
										138858,
										138859
									],
									[
										138943,
										138944
									],
									[
										138985,
										138986
									],
									[
										138989,
										138990
									],
									[
										138998,
										138999
									],
									[
										139001,
										139002
									],
									[
										139150,
										139151
									],
									[
										139264,
										139265
									],
									[
										139306,
										139307
									],
									[
										139310,
										139311
									],
									[
										139319,
										139320
									],
									[
										139322,
										139323
									],
									[
										139476,
										139477
									],
									[
										139587,
										139588
									],
									[
										139678,
										139679
									],
									[
										139686,
										139687
									],
									[
										139895,
										139896
									],
									[
										139965,
										139966
									],
									[
										140094,
										140095
									],
									[
										140122,
										140123
									],
									[
										140179,
										140180
									],
									[
										140261,
										140262
									],
									[
										140300,
										140301
									],
									[
										140308,
										140309
									],
									[
										140529,
										140530
									],
									[
										140647,
										140648
									],
									[
										140703,
										140704
									],
									[
										140711,
										140712
									],
									[
										140751,
										140752
									],
									[
										140761,
										140762
									],
									[
										140949,
										140950
									],
									[
										140974,
										140975
									],
									[
										141046,
										141047
									],
									[
										141154,
										141155
									],
									[
										141278,
										141279
									],
									[
										141286,
										141287
									],
									[
										141330,
										141331
									],
									[
										141340,
										141341
									],
									[
										141408,
										141409
									],
									[
										141412,
										141413
									],
									[
										141556,
										141557
									],
									[
										141578,
										141579
									],
									[
										141635,
										141636
									],
									[
										141747,
										141748
									],
									[
										141838,
										141839
									],
									[
										141846,
										141847
									],
									[
										142017,
										142018
									],
									[
										142180,
										142181
									],
									[
										142219,
										142220
									],
									[
										142227,
										142228
									],
									[
										142434,
										142435
									],
									[
										142594,
										142595
									],
									[
										142663,
										142664
									],
									[
										142927,
										142928
									],
									[
										142951,
										142952
									],
									[
										142958,
										142959
									],
									[
										142988,
										142989
									],
									[
										142996,
										142997
									],
									[
										143036,
										143037
									],
									[
										143044,
										143045
									],
									[
										143179,
										143180
									],
									[
										143262,
										143263
									],
									[
										143295,
										143296
									],
									[
										143300,
										143301
									],
									[
										143331,
										143332
									],
									[
										143339,
										143340
									],
									[
										143472,
										143473
									],
									[
										143598,
										143599
									],
									[
										143640,
										143641
									],
									[
										143648,
										143649
									],
									[
										143774,
										143775
									],
									[
										143788,
										143789
									],
									[
										143888,
										143889
									],
									[
										143902,
										143903
									],
									[
										144052,
										144053
									],
									[
										144134,
										144135
									],
									[
										144160,
										144161
									],
									[
										144169,
										144170
									],
									[
										144199,
										144200
									],
									[
										144209,
										144210
									],
									[
										144353,
										144354
									],
									[
										144364,
										144365
									],
									[
										144432,
										144433
									],
									[
										144669,
										144670
									],
									[
										144709,
										144710
									],
									[
										144717,
										144718
									],
									[
										144732,
										144733
									],
									[
										144735,
										144736
									],
									[
										144844,
										144845
									],
									[
										144855,
										144856
									],
									[
										145009,
										145010
									],
									[
										145038,
										145039
									],
									[
										145095,
										145096
									],
									[
										145223,
										145224
									],
									[
										145301,
										145302
									],
									[
										145307,
										145308
									],
									[
										145348,
										145349
									],
									[
										145356,
										145357
									],
									[
										145396,
										145397
									],
									[
										145404,
										145405
									],
									[
										145525,
										145526
									],
									[
										145530,
										145531
									],
									[
										145674,
										145675
									],
									[
										145693,
										145694
									],
									[
										145701,
										145702
									],
									[
										145703,
										145704
									],
									[
										145759,
										145760
									],
									[
										145867,
										145868
									],
									[
										145906,
										145907
									],
									[
										145912,
										145913
									],
									[
										145950,
										145951
									],
									[
										145957,
										145958
									],
									[
										145996,
										145997
									],
									[
										146000,
										146001
									],
									[
										146190,
										146191
									],
									[
										146193,
										146194
									],
									[
										146256,
										146257
									],
									[
										146259,
										146260
									],
									[
										146417,
										146418
									],
									[
										146420,
										146421
									],
									[
										146452,
										146453
									],
									[
										146457,
										146458
									],
									[
										146491,
										146492
									],
									[
										146499,
										146500
									],
									[
										146536,
										146537
									],
									[
										146542,
										146543
									],
									[
										146577,
										146578
									],
									[
										146582,
										146583
									],
									[
										146616,
										146617
									],
									[
										146626,
										146627
									],
									[
										146665,
										146666
									],
									[
										146668,
										146669
									],
									[
										146700,
										146701
									],
									[
										146706,
										146707
									],
									[
										146741,
										146742
									],
									[
										146750,
										146751
									],
									[
										146788,
										146789
									],
									[
										146796,
										146797
									],
									[
										146833,
										146834
									],
									[
										146841,
										146842
									],
									[
										146878,
										146879
									],
									[
										146884,
										146885
									],
									[
										146919,
										146920
									],
									[
										146929,
										146930
									],
									[
										147057,
										147058
									],
									[
										147064,
										147065
									],
									[
										147093,
										147094
									],
									[
										147100,
										147101
									],
									[
										147129,
										147130
									],
									[
										147144,
										147145
									],
									[
										147282,
										147283
									],
									[
										147294,
										147295
									],
									[
										147323,
										147324
									],
									[
										147335,
										147336
									],
									[
										147364,
										147365
									],
									[
										147379,
										147380
									],
									[
										147510,
										147511
									],
									[
										147515,
										147516
									],
									[
										147544,
										147545
									],
									[
										147549,
										147550
									],
									[
										147578,
										147579
									],
									[
										147597,
										147598
									],
									[
										147730,
										147731
									],
									[
										147737,
										147738
									],
									[
										147766,
										147767
									],
									[
										147773,
										147774
									],
									[
										147802,
										147803
									],
									[
										147820,
										147821
									],
									[
										147953,
										147954
									],
									[
										147960,
										147961
									],
									[
										147989,
										147990
									],
									[
										147996,
										147997
									],
									[
										148025,
										148026
									],
									[
										148043,
										148044
									],
									[
										148176,
										148177
									],
									[
										148183,
										148184
									],
									[
										148212,
										148213
									],
									[
										148219,
										148220
									],
									[
										148248,
										148249
									],
									[
										148260,
										148261
									],
									[
										148392,
										148393
									],
									[
										148398,
										148399
									],
									[
										148427,
										148428
									],
									[
										148433,
										148434
									],
									[
										148462,
										148463
									],
									[
										148474,
										148475
									],
									[
										148667,
										148668
									],
									[
										148674,
										148675
									],
									[
										148700,
										148701
									],
									[
										148707,
										148708
									],
									[
										148736,
										148737
									],
									[
										148743,
										148744
									],
									[
										148915,
										148916
									],
									[
										148924,
										148925
									],
									[
										148936,
										148937
									],
									[
										148945,
										148946
									],
									[
										149184,
										149185
									],
									[
										149189,
										149190
									],
									[
										149378,
										149379
									],
									[
										149379,
										149380
									],
									[
										149471,
										149472
									],
									[
										149474,
										149475
									],
									[
										149496,
										149497
									],
									[
										149498,
										149499
									],
									[
										149518,
										149519
									],
									[
										149522,
										149523
									],
									[
										149542,
										149543
									],
									[
										149549,
										149550
									],
									[
										149700,
										149701
									],
									[
										149722,
										149723
									],
									[
										149732,
										149733
									],
									[
										149734,
										149735
									],
									[
										149881,
										149882
									],
									[
										149886,
										149887
									],
									[
										149970,
										149971
									],
									[
										149973,
										149974
									],
									[
										150135,
										150136
									],
									[
										150149,
										150150
									],
									[
										150172,
										150173
									],
									[
										150177,
										150178
									],
									[
										150325,
										150326
									],
									[
										150347,
										150348
									],
									[
										150366,
										150367
									],
									[
										150369,
										150370
									],
									[
										150626,
										150627
									],
									[
										150634,
										150635
									],
									[
										150687,
										150688
									],
									[
										150698,
										150699
									],
									[
										150797,
										150798
									],
									[
										150820,
										150821
									],
									[
										150829,
										150830
									],
									[
										150833,
										150834
									],
									[
										150842,
										150843
									],
									[
										150847,
										150848
									],
									[
										150879,
										150880
									],
									[
										150881,
										150882
									],
									[
										151033,
										151034
									],
									[
										151052,
										151053
									],
									[
										151064,
										151065
									],
									[
										151066,
										151067
									],
									[
										151330,
										151331
									],
									[
										151338,
										151339
									],
									[
										151379,
										151380
									],
									[
										151390,
										151391
									],
									[
										151485,
										151486
									],
									[
										151507,
										151508
									],
									[
										151516,
										151517
									],
									[
										151520,
										151521
									],
									[
										151529,
										151530
									],
									[
										151534,
										151535
									],
									[
										151566,
										151567
									],
									[
										151568,
										151569
									],
									[
										151592,
										151593
									],
									[
										151645,
										151646
									],
									[
										151693,
										151694
									],
									[
										151697,
										151698
									],
									[
										151706,
										151707
									],
									[
										151711,
										151712
									],
									[
										151782,
										151783
									],
									[
										151784,
										151785
									],
									[
										151869,
										151870
									],
									[
										151937,
										151938
									],
									[
										151965,
										151966
									],
									[
										152004,
										152005
									],
									[
										152032,
										152033
									],
									[
										152093,
										152094
									],
									[
										152121,
										152122
									],
									[
										152155,
										152156
									],
									[
										152185,
										152186
									],
									[
										152223,
										152224
									],
									[
										152268,
										152269
									],
									[
										152336,
										152337
									],
									[
										152364,
										152365
									],
									[
										152403,
										152404
									],
									[
										152431,
										152432
									],
									[
										152492,
										152493
									],
									[
										152520,
										152521
									],
									[
										152554,
										152555
									],
									[
										152584,
										152585
									],
									[
										152622,
										152623
									],
									[
										152741,
										152742
									],
									[
										152744,
										152745
									],
									[
										152774,
										152775
									],
									[
										152779,
										152780
									],
									[
										152807,
										152808
									],
									[
										152814,
										152815
									],
									[
										152844,
										152845
									],
									[
										152849,
										152850
									],
									[
										152877,
										152878
									],
									[
										152883,
										152884
									],
									[
										152912,
										152913
									],
									[
										152918,
										152919
									],
									[
										152955,
										152956
									],
									[
										152970,
										152971
									],
									[
										153011,
										153012
									],
									[
										153019,
										153020
									],
									[
										153050,
										153051
									],
									[
										153059,
										153060
									],
									[
										153090,
										153091
									],
									[
										153096,
										153097
									],
									[
										153212,
										153213
									],
									[
										153237,
										153238
									],
									[
										153354,
										153355
									],
									[
										153359,
										153360
									],
									[
										153388,
										153389
									],
									[
										153391,
										153392
									],
									[
										153427,
										153428
									],
									[
										153437,
										153438
									],
									[
										153470,
										153471
									],
									[
										153477,
										153478
									],
									[
										153508,
										153509
									],
									[
										153513,
										153514
									],
									[
										153545,
										153546
									],
									[
										153551,
										153552
									],
									[
										153747,
										153748
									],
									[
										153753,
										153754
									],
									[
										153851,
										153852
									],
									[
										153863,
										153864
									],
									[
										154009,
										154010
									],
									[
										154017,
										154018
									],
									[
										154257,
										154258
									],
									[
										154264,
										154265
									],
									[
										154489,
										154490
									],
									[
										154496,
										154497
									],
									[
										154570,
										154571
									],
									[
										154578,
										154579
									],
									[
										154632,
										154633
									],
									[
										154638,
										154639
									],
									[
										154755,
										154756
									],
									[
										154777,
										154778
									],
									[
										154950,
										154951
									],
									[
										154957,
										154958
									],
									[
										155025,
										155026
									],
									[
										155030,
										155031
									],
									[
										155060,
										155061
									],
									[
										155063,
										155064
									],
									[
										155122,
										155123
									],
									[
										155126,
										155127
									],
									[
										155130,
										155131
									],
									[
										155140,
										155141
									],
									[
										155195,
										155196
									],
									[
										155200,
										155201
									],
									[
										155338,
										155339
									],
									[
										155352,
										155353
									],
									[
										155547,
										155548
									],
									[
										155552,
										155553
									],
									[
										155575,
										155576
									],
									[
										155578,
										155579
									],
									[
										155601,
										155602
									],
									[
										155608,
										155609
									],
									[
										155631,
										155632
									],
									[
										155641,
										155642
									],
									[
										155664,
										155665
									],
									[
										155671,
										155672
									],
									[
										155694,
										155695
									],
									[
										155704,
										155705
									],
									[
										155762,
										155763
									],
									[
										155768,
										155769
									],
									[
										155814,
										155815
									],
									[
										155820,
										155821
									],
									[
										155866,
										155867
									],
									[
										155873,
										155874
									],
									[
										155906,
										155907
									],
									[
										155908,
										155909
									],
									[
										155941,
										155942
									],
									[
										155943,
										155944
									],
									[
										156022,
										156023
									],
									[
										156031,
										156032
									],
									[
										156075,
										156076
									],
									[
										156083,
										156084
									],
									[
										156251,
										156252
									],
									[
										156263,
										156264
									],
									[
										156372,
										156373
									],
									[
										156377,
										156378
									],
									[
										156572,
										156573
									],
									[
										156579,
										156580
									],
									[
										156585,
										156586
									],
									[
										156593,
										156594
									],
									[
										156721,
										156722
									],
									[
										156747,
										156748
									],
									[
										156890,
										156891
									],
									[
										156909,
										156910
									],
									[
										156925,
										156926
									],
									[
										156938,
										156939
									],
									[
										156953,
										156954
									],
									[
										156964,
										156965
									],
									[
										157206,
										157207
									],
									[
										157214,
										157215
									],
									[
										157325,
										157326
									],
									[
										157353,
										157354
									],
									[
										157371,
										157372
									],
									[
										157381,
										157382
									],
									[
										157607,
										157608
									],
									[
										157614,
										157615
									],
									[
										157826,
										157827
									],
									[
										157833,
										157834
									],
									[
										157863,
										157864
									],
									[
										157870,
										157871
									],
									[
										158045,
										158046
									],
									[
										158053,
										158054
									],
									[
										158257,
										158258
									],
									[
										158264,
										158265
									],
									[
										158307,
										158308
									],
									[
										158311,
										158312
									],
									[
										158350,
										158351
									],
									[
										158354,
										158355
									],
									[
										158372,
										158373
									],
									[
										158376,
										158377
									],
									[
										158399,
										158400
									],
									[
										158405,
										158406
									],
									[
										158421,
										158422
									],
									[
										158427,
										158428
									],
									[
										158630,
										158631
									],
									[
										158637,
										158638
									],
									[
										158759,
										158760
									],
									[
										158781,
										158782
									],
									[
										158938,
										158939
									],
									[
										158953,
										158954
									],
									[
										159243,
										159244
									],
									[
										159259,
										159260
									],
									[
										159490,
										159491
									],
									[
										159520,
										159521
									],
									[
										159679,
										159680
									],
									[
										159736,
										159737
									],
									[
										159874,
										159875
									],
									[
										159885,
										159886
									],
									[
										159896,
										159897
									],
									[
										159903,
										159904
									],
									[
										159922,
										159923
									],
									[
										159931,
										159932
									],
									[
										159964,
										159965
									],
									[
										159970,
										159971
									],
									[
										159992,
										159993
									],
									[
										159997,
										159998
									],
									[
										160009,
										160010
									],
									[
										160016,
										160017
									],
									[
										160158,
										160159
									],
									[
										160169,
										160170
									],
									[
										160172,
										160173
									],
									[
										160179,
										160180
									],
									[
										160212,
										160213
									],
									[
										160223,
										160224
									],
									[
										160226,
										160227
									],
									[
										160232,
										160233
									],
									[
										160238,
										160239
									],
									[
										160243,
										160244
									],
									[
										160269,
										160270
									],
									[
										160277,
										160278
									],
									[
										160280,
										160281
									],
									[
										160289,
										160290
									],
									[
										160343,
										160344
									],
									[
										160351,
										160352
									],
									[
										160378,
										160379
									],
									[
										160389,
										160390
									],
									[
										160392,
										160393
									],
									[
										160398,
										160399
									],
									[
										160404,
										160405
									],
									[
										160411,
										160412
									],
									[
										160536,
										160537
									],
									[
										160545,
										160546
									],
									[
										160760,
										160761
									],
									[
										160765,
										160766
									],
									[
										160770,
										160771
									],
									[
										160784,
										160785
									],
									[
										160953,
										160954
									],
									[
										160958,
										160959
									],
									[
										160966,
										160967
									],
									[
										160971,
										160972
									],
									[
										160989,
										160990
									],
									[
										160998,
										160999
									],
									[
										161025,
										161026
									],
									[
										161027,
										161028
									],
									[
										161042,
										161043
									],
									[
										161044,
										161045
									],
									[
										161059,
										161060
									],
									[
										161067,
										161068
									],
									[
										161075,
										161076
									],
									[
										161079,
										161080
									],
									[
										161112,
										161113
									],
									[
										161117,
										161118
									],
									[
										161135,
										161136
									],
									[
										161140,
										161141
									],
									[
										161145,
										161146
									],
									[
										161152,
										161153
									],
									[
										161155,
										161156
									],
									[
										161160,
										161161
									],
									[
										161168,
										161169
									],
									[
										161170,
										161171
									],
									[
										161185,
										161186
									],
									[
										161187,
										161188
									],
									[
										161202,
										161203
									],
									[
										161204,
										161205
									],
									[
										161213,
										161214
									],
									[
										161218,
										161219
									],
									[
										161226,
										161227
									],
									[
										161232,
										161233
									],
									[
										161240,
										161241
									],
									[
										161248,
										161249
									],
									[
										161256,
										161257
									],
									[
										161265,
										161266
									],
									[
										161304,
										161305
									],
									[
										161311,
										161312
									],
									[
										161330,
										161331
									],
									[
										161339,
										161340
									],
									[
										161359,
										161360
									],
									[
										161365,
										161366
									],
									[
										161387,
										161388
									],
									[
										161394,
										161395
									],
									[
										161418,
										161419
									],
									[
										161423,
										161424
									],
									[
										161473,
										161474
									],
									[
										161480,
										161481
									],
									[
										161500,
										161501
									],
									[
										161507,
										161508
									],
									[
										161530,
										161531
									],
									[
										161535,
										161536
									],
									[
										161540,
										161541
									],
									[
										161546,
										161547
									],
									[
										161549,
										161550
									],
									[
										161554,
										161555
									],
									[
										161559,
										161560
									],
									[
										161565,
										161566
									],
									[
										161568,
										161569
									],
									[
										161573,
										161574
									],
									[
										161591,
										161592
									],
									[
										161595,
										161596
									],
									[
										161614,
										161615
									],
									[
										161622,
										161623
									],
									[
										161637,
										161638
									],
									[
										161645,
										161646
									],
									[
										161664,
										161665
									],
									[
										161675,
										161676
									],
									[
										161871,
										161872
									],
									[
										161874,
										161875
									],
									[
										161889,
										161890
									],
									[
										161896,
										161897
									],
									[
										161913,
										161914
									],
									[
										161922,
										161923
									],
									[
										161993,
										161994
									],
									[
										162015,
										162016
									],
									[
										162194,
										162195
									],
									[
										162201,
										162202
									],
									[
										162218,
										162219
									],
									[
										162226,
										162227
									],
									[
										162232,
										162233
									],
									[
										162234,
										162235
									],
									[
										162249,
										162250
									],
									[
										162257,
										162258
									],
									[
										162263,
										162264
									],
									[
										162265,
										162266
									],
									[
										162453,
										162454
									],
									[
										162479,
										162480
									],
									[
										162640,
										162641
									],
									[
										162658,
										162659
									],
									[
										162895,
										162896
									],
									[
										162902,
										162903
									],
									[
										163081,
										163082
									],
									[
										163091,
										163092
									],
									[
										163114,
										163115
									],
									[
										163124,
										163125
									],
									[
										163149,
										163150
									],
									[
										163158,
										163159
									],
									[
										163183,
										163184
									],
									[
										163194,
										163195
									],
									[
										163204,
										163205
									],
									[
										163219,
										163220
									],
									[
										163231,
										163232
									],
									[
										163233,
										163234
									],
									[
										163245,
										163246
									],
									[
										163264,
										163265
									],
									[
										163273,
										163274
									],
									[
										163275,
										163276
									],
									[
										163324,
										163325
									],
									[
										163335,
										163336
									],
									[
										163345,
										163346
									],
									[
										163357,
										163358
									],
									[
										163367,
										163368
									],
									[
										163370,
										163371
									],
									[
										163565,
										163566
									],
									[
										163578,
										163579
									],
									[
										163588,
										163589
									],
									[
										163601,
										163602
									],
									[
										163611,
										163612
									],
									[
										163613,
										163614
									],
									[
										163623,
										163624
									],
									[
										163626,
										163627
									],
									[
										163634,
										163635
									],
									[
										163638,
										163639
									],
									[
										163774,
										163775
									],
									[
										163779,
										163780
									],
									[
										163974,
										163975
									],
									[
										163988,
										163989
									],
									[
										164173,
										164174
									],
									[
										164196,
										164197
									],
									[
										164397,
										164398
									],
									[
										164405,
										164406
									],
									[
										164532,
										164533
									],
									[
										164558,
										164559
									],
									[
										164792,
										164793
									],
									[
										164799,
										164800
									],
									[
										164990,
										164991
									],
									[
										164997,
										164998
									],
									[
										165043,
										165044
									],
									[
										165051,
										165052
									],
									[
										165136,
										165137
									],
									[
										165143,
										165144
									],
									[
										165189,
										165190
									],
									[
										165195,
										165196
									],
									[
										165303,
										165304
									],
									[
										165323,
										165324
									],
									[
										165473,
										165474
									],
									[
										165492,
										165493
									],
									[
										165672,
										165673
									],
									[
										165692,
										165693
									],
									[
										165825,
										165826
									],
									[
										165848,
										165849
									],
									[
										166050,
										166051
									],
									[
										166102,
										166103
									],
									[
										166254,
										166255
									],
									[
										166261,
										166262
									],
									[
										166613,
										166614
									],
									[
										166618,
										166619
									],
									[
										166741,
										166742
									],
									[
										166750,
										166751
									],
									[
										166773,
										166774
									],
									[
										166792,
										166793
									],
									[
										166803,
										166804
									],
									[
										166805,
										166806
									],
									[
										167009,
										167010
									],
									[
										167016,
										167017
									],
									[
										167130,
										167131
									],
									[
										167139,
										167140
									],
									[
										167162,
										167163
									],
									[
										167180,
										167181
									],
									[
										167191,
										167192
									],
									[
										167193,
										167194
									],
									[
										167397,
										167398
									],
									[
										167406,
										167407
									],
									[
										167429,
										167430
									],
									[
										167446,
										167447
									],
									[
										167552,
										167553
									],
									[
										167561,
										167562
									],
									[
										167584,
										167585
									],
									[
										167602,
										167603
									],
									[
										167711,
										167712
									],
									[
										167767,
										167768
									],
									[
										167842,
										167843
									],
									[
										167860,
										167861
									],
									[
										167944,
										167945
									],
									[
										167962,
										167963
									],
									[
										168007,
										168008
									],
									[
										168029,
										168030
									],
									[
										168242,
										168243
									],
									[
										168251,
										168252
									],
									[
										168272,
										168273
									],
									[
										168284,
										168285
									],
									[
										168321,
										168322
									],
									[
										168327,
										168328
									],
									[
										168340,
										168341
									],
									[
										168342,
										168343
									],
									[
										168355,
										168356
									],
									[
										168360,
										168361
									],
									[
										168371,
										168372
									],
									[
										168373,
										168374
									],
									[
										168410,
										168411
									],
									[
										168416,
										168417
									],
									[
										168424,
										168425
									],
									[
										168434,
										168435
									],
									[
										168510,
										168511
									],
									[
										168519,
										168520
									],
									[
										168666,
										168667
									],
									[
										168674,
										168675
									],
									[
										168898,
										168899
									],
									[
										168903,
										168904
									],
									[
										169043,
										169044
									],
									[
										169060,
										169061
									],
									[
										169071,
										169072
									],
									[
										169073,
										169074
									],
									[
										169211,
										169212
									],
									[
										169229,
										169230
									],
									[
										169340,
										169341
									],
									[
										169342,
										169343
									],
									[
										169479,
										169480
									],
									[
										169493,
										169494
									],
									[
										169723,
										169724
									],
									[
										169733,
										169734
									],
									[
										169799,
										169800
									],
									[
										169802,
										169803
									],
									[
										169827,
										169828
									],
									[
										169830,
										169831
									],
									[
										169848,
										169849
									],
									[
										169850,
										169851
									],
									[
										169875,
										169876
									],
									[
										169877,
										169878
									],
									[
										169895,
										169896
									],
									[
										169897,
										169898
									],
									[
										169922,
										169923
									],
									[
										169924,
										169925
									],
									[
										169942,
										169943
									],
									[
										169948,
										169949
									],
									[
										169970,
										169971
									],
									[
										169976,
										169977
									],
									[
										170001,
										170002
									],
									[
										170003,
										170004
									],
									[
										170021,
										170022
									],
									[
										170028,
										170029
									],
									[
										170143,
										170144
									],
									[
										170160,
										170161
									],
									[
										170426,
										170427
									],
									[
										170434,
										170435
									],
									[
										170570,
										170571
									],
									[
										170595,
										170596
									],
									[
										170613,
										170614
									],
									[
										170623,
										170624
									],
									[
										170728,
										170729
									],
									[
										170736,
										170737
									],
									[
										170995,
										170996
									],
									[
										171002,
										171003
									],
									[
										171289,
										171290
									],
									[
										171307,
										171308
									],
									[
										171330,
										171331
									],
									[
										171344,
										171345
									],
									[
										171536,
										171537
									],
									[
										171549,
										171550
									],
									[
										171703,
										171704
									],
									[
										171724,
										171725
									],
									[
										171801,
										171802
									],
									[
										171809,
										171810
									],
									[
										171931,
										171932
									],
									[
										171939,
										171940
									],
									[
										172040,
										172041
									],
									[
										172056,
										172057
									],
									[
										172066,
										172067
									],
									[
										172069,
										172070
									],
									[
										172172,
										172173
									],
									[
										172188,
										172189
									],
									[
										172198,
										172199
									],
									[
										172201,
										172202
									],
									[
										172396,
										172397
									],
									[
										172426,
										172427
									],
									[
										172438,
										172439
									],
									[
										172444,
										172445
									],
									[
										172619,
										172620
									],
									[
										172628,
										172629
									],
									[
										172735,
										172736
									],
									[
										172742,
										172743
									],
									[
										173080,
										173081
									],
									[
										173083,
										173084
									],
									[
										173086,
										173087
									],
									[
										173093,
										173094
									],
									[
										173258,
										173259
									],
									[
										173261,
										173262
									],
									[
										173264,
										173265
									],
									[
										173268,
										173269
									],
									[
										173306,
										173307
									],
									[
										173309,
										173310
									],
									[
										173312,
										173313
									],
									[
										173314,
										173315
									],
									[
										173517,
										173518
									],
									[
										173540,
										173541
									],
									[
										173552,
										173553
									],
									[
										173563,
										173564
									],
									[
										173572,
										173573
									],
									[
										173577,
										173578
									],
									[
										173584,
										173585
									],
									[
										173593,
										173594
									],
									[
										173860,
										173861
									],
									[
										173887,
										173888
									],
									[
										173899,
										173900
									],
									[
										173913,
										173914
									],
									[
										173936,
										173937
									],
									[
										173949,
										173950
									],
									[
										174223,
										174224
									],
									[
										174257,
										174258
									],
									[
										174512,
										174513
									],
									[
										174521,
										174522
									],
									[
										174544,
										174545
									],
									[
										174550,
										174551
									],
									[
										174679,
										174680
									],
									[
										174695,
										174696
									],
									[
										174929,
										174930
									],
									[
										174944,
										174945
									],
									[
										175105,
										175106
									],
									[
										175116,
										175117
									],
									[
										175231,
										175232
									],
									[
										175241,
										175242
									],
									[
										175253,
										175254
									],
									[
										175265,
										175266
									],
									[
										175433,
										175434
									],
									[
										175440,
										175441
									],
									[
										175469,
										175470
									],
									[
										175480,
										175481
									],
									[
										175530,
										175531
									],
									[
										175541,
										175542
									],
									[
										175955,
										175956
									],
									[
										175966,
										175967
									],
									[
										176052,
										176053
									],
									[
										176063,
										176064
									],
									[
										176215,
										176216
									],
									[
										176222,
										176223
									],
									[
										176227,
										176228
									],
									[
										176229,
										176230
									],
									[
										176301,
										176302
									],
									[
										176310,
										176311
									],
									[
										176598,
										176599
									],
									[
										176610,
										176611
									],
									[
										176811,
										176812
									],
									[
										176816,
										176817
									],
									[
										177103,
										177104
									],
									[
										177120,
										177121
									],
									[
										177143,
										177144
									],
									[
										177153,
										177154
									],
									[
										177348,
										177349
									],
									[
										177350,
										177351
									],
									[
										177501,
										177502
									],
									[
										177521,
										177522
									],
									[
										177772,
										177773
									],
									[
										177799,
										177800
									],
									[
										177915,
										177916
									],
									[
										177940,
										177941
									],
									[
										178197,
										178198
									],
									[
										178223,
										178224
									],
									[
										178246,
										178247
									],
									[
										178265,
										178266
									],
									[
										178370,
										178371
									],
									[
										178387,
										178388
									],
									[
										178559,
										178560
									],
									[
										178583,
										178584
									],
									[
										178771,
										178772
									],
									[
										178779,
										178780
									],
									[
										178891,
										178892
									],
									[
										178902,
										178903
									],
									[
										178998,
										178999
									],
									[
										179017,
										179018
									],
									[
										179204,
										179205
									],
									[
										179219,
										179220
									],
									[
										179222,
										179223
									],
									[
										179240,
										179241
									],
									[
										179243,
										179244
									],
									[
										179262,
										179263
									],
									[
										179265,
										179266
									],
									[
										179277,
										179278
									],
									[
										179378,
										179379
									],
									[
										179400,
										179401
									],
									[
										179499,
										179500
									],
									[
										179504,
										179505
									],
									[
										179509,
										179510
									],
									[
										179516,
										179517
									],
									[
										179529,
										179530
									],
									[
										179535,
										179536
									],
									[
										179555,
										179556
									],
									[
										179559,
										179560
									],
									[
										179676,
										179677
									],
									[
										179695,
										179696
									],
									[
										179803,
										179804
									],
									[
										179818,
										179819
									],
									[
										179866,
										179867
									],
									[
										179872,
										179873
									],
									[
										179900,
										179901
									],
									[
										179909,
										179910
									],
									[
										179937,
										179938
									],
									[
										179945,
										179946
									],
									[
										179973,
										179974
									],
									[
										179981,
										179982
									],
									[
										180009,
										180010
									],
									[
										180016,
										180017
									],
									[
										180073,
										180074
									],
									[
										180091,
										180092
									],
									[
										180139,
										180140
									],
									[
										180146,
										180147
									],
									[
										180174,
										180175
									],
									[
										180183,
										180184
									],
									[
										180211,
										180212
									],
									[
										180219,
										180220
									],
									[
										180247,
										180248
									],
									[
										180253,
										180254
									],
									[
										180281,
										180282
									],
									[
										180289,
										180290
									],
									[
										180318,
										180319
									],
									[
										180324,
										180325
									],
									[
										180383,
										180384
									],
									[
										180402,
										180403
									],
									[
										180450,
										180451
									],
									[
										180458,
										180459
									],
									[
										180486,
										180487
									],
									[
										180494,
										180495
									],
									[
										180522,
										180523
									],
									[
										180532,
										180533
									],
									[
										180590,
										180591
									],
									[
										180602,
										180603
									],
									[
										180650,
										180651
									],
									[
										180656,
										180657
									],
									[
										180772,
										180773
									],
									[
										180777,
										180778
									],
									[
										180808,
										180809
									],
									[
										180814,
										180815
									],
									[
										180845,
										180846
									],
									[
										180852,
										180853
									],
									[
										180883,
										180884
									],
									[
										180887,
										180888
									],
									[
										181036,
										181037
									],
									[
										181055,
										181056
									],
									[
										181163,
										181164
									],
									[
										181178,
										181179
									],
									[
										181220,
										181221
									],
									[
										181226,
										181227
									],
									[
										181241,
										181242
									],
									[
										181249,
										181250
									],
									[
										181264,
										181265
									],
									[
										181273,
										181274
									],
									[
										181288,
										181289
									],
									[
										181300,
										181301
									],
									[
										181315,
										181316
									],
									[
										181323,
										181324
									],
									[
										181338,
										181339
									],
									[
										181346,
										181347
									],
									[
										181361,
										181362
									],
									[
										181368,
										181369
									],
									[
										181417,
										181418
									],
									[
										181435,
										181436
									],
									[
										181477,
										181478
									],
									[
										181484,
										181485
									],
									[
										181499,
										181500
									],
									[
										181508,
										181509
									],
									[
										181523,
										181524
									],
									[
										181529,
										181530
									],
									[
										181544,
										181545
									],
									[
										181552,
										181553
									],
									[
										181567,
										181568
									],
									[
										181575,
										181576
									],
									[
										181590,
										181591
									],
									[
										181596,
										181597
									],
									[
										181646,
										181647
									],
									[
										181665,
										181666
									],
									[
										181707,
										181708
									],
									[
										181715,
										181716
									],
									[
										181730,
										181731
									],
									[
										181738,
										181739
									],
									[
										181753,
										181754
									],
									[
										181763,
										181764
									],
									[
										181813,
										181814
									],
									[
										181825,
										181826
									],
									[
										181867,
										181868
									],
									[
										181873,
										181874
									],
									[
										181979,
										181980
									],
									[
										181984,
										181985
									],
									[
										182012,
										182013
									],
									[
										182018,
										182019
									],
									[
										182049,
										182050
									],
									[
										182053,
										182054
									],
									[
										182183,
										182184
									],
									[
										182207,
										182208
									],
									[
										182253,
										182254
									],
									[
										182254,
										182255
									],
									[
										182419,
										182420
									],
									[
										182423,
										182424
									],
									[
										182457,
										182458
									],
									[
										182466,
										182467
									],
									[
										182469,
										182470
									],
									[
										182483,
										182484
									],
									[
										182486,
										182487
									],
									[
										182495,
										182496
									],
									[
										182522,
										182523
									],
									[
										182528,
										182529
									],
									[
										182562,
										182563
									],
									[
										182573,
										182574
									],
									[
										182576,
										182577
									],
									[
										182588,
										182589
									],
									[
										182615,
										182616
									],
									[
										182621,
										182622
									],
									[
										182655,
										182656
									],
									[
										182666,
										182667
									],
									[
										182669,
										182670
									],
									[
										182681,
										182682
									],
									[
										182684,
										182685
									],
									[
										182695,
										182696
									],
									[
										182722,
										182723
									],
									[
										182729,
										182730
									],
									[
										182763,
										182764
									],
									[
										182777,
										182778
									],
									[
										182780,
										182781
									],
									[
										182793,
										182794
									],
									[
										182953,
										182954
									],
									[
										182957,
										182958
									],
									[
										183110,
										183111
									],
									[
										183115,
										183116
									],
									[
										183303,
										183304
									],
									[
										183306,
										183307
									],
									[
										183326,
										183327
									],
									[
										183333,
										183334
									],
									[
										183353,
										183354
									],
									[
										183358,
										183359
									],
									[
										183378,
										183379
									],
									[
										183388,
										183389
									],
									[
										183408,
										183409
									],
									[
										183417,
										183418
									],
									[
										183437,
										183438
									],
									[
										183446,
										183447
									],
									[
										183466,
										183467
									],
									[
										183472,
										183473
									],
									[
										183492,
										183493
									],
									[
										183496,
										183497
									],
									[
										183516,
										183517
									],
									[
										183522,
										183523
									],
									[
										183542,
										183543
									],
									[
										183547,
										183548
									],
									[
										183567,
										183568
									],
									[
										183576,
										183577
									],
									[
										183720,
										183721
									],
									[
										183731,
										183732
									],
									[
										183901,
										183902
									],
									[
										183922,
										183923
									],
									[
										183934,
										183935
									],
									[
										183949,
										183950
									],
									[
										184115,
										184116
									],
									[
										184157,
										184158
									],
									[
										184381,
										184382
									],
									[
										184388,
										184389
									],
									[
										184450,
										184451
									],
									[
										184455,
										184456
									],
									[
										184590,
										184591
									],
									[
										184610,
										184611
									],
									[
										184629,
										184630
									],
									[
										184633,
										184634
									],
									[
										184645,
										184646
									],
									[
										184654,
										184655
									],
									[
										184857,
										184858
									],
									[
										184875,
										184876
									],
									[
										185007,
										185008
									],
									[
										185025,
										185026
									],
									[
										185044,
										185045
									],
									[
										185047,
										185048
									],
									[
										185059,
										185060
									],
									[
										185076,
										185077
									],
									[
										185092,
										185093
									],
									[
										185100,
										185101
									],
									[
										185141,
										185142
									],
									[
										185144,
										185145
									],
									[
										185160,
										185161
									],
									[
										185162,
										185163
									],
									[
										185212,
										185213
									],
									[
										185214,
										185215
									],
									[
										185264,
										185265
									],
									[
										185270,
										185271
									],
									[
										185298,
										185299
									],
									[
										185304,
										185305
									],
									[
										185317,
										185318
									],
									[
										185324,
										185325
									],
									[
										185478,
										185479
									],
									[
										185484,
										185485
									],
									[
										185514,
										185515
									],
									[
										185520,
										185521
									],
									[
										185804,
										185805
									],
									[
										185805,
										185806
									],
									[
										186012,
										186013
									],
									[
										186017,
										186018
									],
									[
										186172,
										186173
									],
									[
										186180,
										186181
									],
									[
										186320,
										186321
									],
									[
										186331,
										186332
									],
									[
										186554,
										186555
									],
									[
										186562,
										186563
									],
									[
										186712,
										186713
									],
									[
										186719,
										186720
									],
									[
										186949,
										186950
									],
									[
										186960,
										186961
									],
									[
										187195,
										187196
									],
									[
										187202,
										187203
									],
									[
										187399,
										187400
									],
									[
										187404,
										187405
									],
									[
										187483,
										187484
									],
									[
										187486,
										187487
									],
									[
										187576,
										187577
									],
									[
										187587,
										187588
									],
									[
										187713,
										187714
									],
									[
										187720,
										187721
									],
									[
										187894,
										187895
									],
									[
										187900,
										187901
									],
									[
										187928,
										187929
									],
									[
										187934,
										187935
									],
									[
										188070,
										188071
									],
									[
										188076,
										188077
									],
									[
										188230,
										188231
									],
									[
										188250,
										188251
									],
									[
										188401,
										188402
									],
									[
										188415,
										188416
									],
									[
										188678,
										188679
									],
									[
										188685,
										188686
									],
									[
										188821,
										188822
									],
									[
										188826,
										188827
									],
									[
										188854,
										188855
									],
									[
										188862,
										188863
									],
									[
										188991,
										188992
									],
									[
										189025,
										189026
									],
									[
										189051,
										189052
									],
									[
										189075,
										189076
									],
									[
										189106,
										189107
									],
									[
										189126,
										189127
									],
									[
										189145,
										189146
									],
									[
										189148,
										189149
									],
									[
										189160,
										189161
									],
									[
										189177,
										189178
									],
									[
										189193,
										189194
									],
									[
										189201,
										189202
									],
									[
										189244,
										189245
									],
									[
										189247,
										189248
									],
									[
										189263,
										189264
									],
									[
										189265,
										189266
									],
									[
										189316,
										189317
									],
									[
										189318,
										189319
									],
									[
										189368,
										189369
									],
									[
										189374,
										189375
									],
									[
										189402,
										189403
									],
									[
										189408,
										189409
									],
									[
										189421,
										189422
									],
									[
										189428,
										189429
									],
									[
										189550,
										189551
									],
									[
										189568,
										189569
									],
									[
										189825,
										189826
									],
									[
										189830,
										189831
									],
									[
										189946,
										189947
									],
									[
										189951,
										189952
									],
									[
										190094,
										190095
									],
									[
										190112,
										190113
									],
									[
										190131,
										190132
									],
									[
										190134,
										190135
									],
									[
										190146,
										190147
									],
									[
										190163,
										190164
									],
									[
										190179,
										190180
									],
									[
										190187,
										190188
									],
									[
										190228,
										190229
									],
									[
										190231,
										190232
									],
									[
										190247,
										190248
									],
									[
										190249,
										190250
									],
									[
										190299,
										190300
									],
									[
										190301,
										190302
									],
									[
										190351,
										190352
									],
									[
										190357,
										190358
									],
									[
										190370,
										190371
									],
									[
										190376,
										190377
									],
									[
										190389,
										190390
									],
									[
										190396,
										190397
									],
									[
										190615,
										190616
									],
									[
										190620,
										190621
									],
									[
										190736,
										190737
									],
									[
										190741,
										190742
									],
									[
										190896,
										190897
									],
									[
										190905,
										190906
									],
									[
										190936,
										190937
									],
									[
										190945,
										190946
									],
									[
										191007,
										191008
									],
									[
										191016,
										191017
									],
									[
										191185,
										191186
									],
									[
										191194,
										191195
									],
									[
										191374,
										191375
									],
									[
										191392,
										191393
									],
									[
										191592,
										191593
									],
									[
										191610,
										191611
									],
									[
										191809,
										191810
									],
									[
										191827,
										191828
									],
									[
										191937,
										191938
									],
									[
										191970,
										191971
									],
									[
										192073,
										192074
									],
									[
										192093,
										192094
									],
									[
										192314,
										192315
									],
									[
										192322,
										192323
									],
									[
										192396,
										192397
									],
									[
										192406,
										192407
									],
									[
										192563,
										192564
									],
									[
										192578,
										192579
									],
									[
										192590,
										192591
									],
									[
										192592,
										192593
									],
									[
										192732,
										192733
									],
									[
										192755,
										192756
									],
									[
										192767,
										192768
									],
									[
										192779,
										192780
									],
									[
										192807,
										192808
									],
									[
										192810,
										192811
									],
									[
										192829,
										192830
									],
									[
										192834,
										192835
									],
									[
										192861,
										192862
									],
									[
										192864,
										192865
									],
									[
										192882,
										192883
									],
									[
										192888,
										192889
									],
									[
										192915,
										192916
									],
									[
										192918,
										192919
									],
									[
										192936,
										192937
									],
									[
										192946,
										192947
									],
									[
										193114,
										193115
									],
									[
										193116,
										193117
									],
									[
										193277,
										193278
									],
									[
										193319,
										193320
									],
									[
										193487,
										193488
									],
									[
										193514,
										193515
									],
									[
										193529,
										193530
									],
									[
										193538,
										193539
									],
									[
										193546,
										193547
									],
									[
										193555,
										193556
									],
									[
										193567,
										193568
									],
									[
										193583,
										193584
									],
									[
										193592,
										193593
									],
									[
										193607,
										193608
									],
									[
										193621,
										193622
									],
									[
										193623,
										193624
									],
									[
										193632,
										193633
									],
									[
										193640,
										193641
									],
									[
										193766,
										193767
									],
									[
										193780,
										193781
									],
									[
										193935,
										193936
									],
									[
										193942,
										193943
									],
									[
										194130,
										194131
									],
									[
										194139,
										194140
									],
									[
										194168,
										194169
									],
									[
										194174,
										194175
									],
									[
										194256,
										194257
									],
									[
										194264,
										194265
									],
									[
										194342,
										194343
									],
									[
										194349,
										194350
									],
									[
										194449,
										194450
									],
									[
										194470,
										194471
									],
									[
										194675,
										194676
									],
									[
										194685,
										194686
									],
									[
										194760,
										194761
									],
									[
										194775,
										194776
									],
									[
										194804,
										194805
									],
									[
										194807,
										194808
									],
									[
										194943,
										194944
									],
									[
										194964,
										194965
									],
									[
										195150,
										195151
									],
									[
										195160,
										195161
									],
									[
										195277,
										195278
									],
									[
										195300,
										195301
									],
									[
										195378,
										195379
									],
									[
										195385,
										195386
									],
									[
										195580,
										195581
									],
									[
										195587,
										195588
									],
									[
										195661,
										195662
									],
									[
										195671,
										195672
									],
									[
										195682,
										195683
									],
									[
										195707,
										195708
									],
									[
										195794,
										195795
									],
									[
										195811,
										195812
									],
									[
										195941,
										195942
									],
									[
										195951,
										195952
									],
									[
										196024,
										196025
									],
									[
										196045,
										196046
									],
									[
										196064,
										196065
									],
									[
										196067,
										196068
									],
									[
										196273,
										196274
									],
									[
										196323,
										196324
									],
									[
										196501,
										196502
									],
									[
										196506,
										196507
									],
									[
										196622,
										196623
									],
									[
										196644,
										196645
									],
									[
										196656,
										196657
									],
									[
										196659,
										196660
									],
									[
										196740,
										196741
									],
									[
										196760,
										196761
									],
									[
										196772,
										196773
									],
									[
										196787,
										196788
									],
									[
										196911,
										196912
									],
									[
										196932,
										196933
									],
									[
										196944,
										196945
									],
									[
										196959,
										196960
									],
									[
										197123,
										197124
									],
									[
										197131,
										197132
									],
									[
										197146,
										197147
									],
									[
										197157,
										197158
									],
									[
										197173,
										197174
									],
									[
										197191,
										197192
									],
									[
										197449,
										197450
									],
									[
										197469,
										197470
									],
									[
										197483,
										197484
									],
									[
										197487,
										197488
									],
									[
										197499,
										197500
									],
									[
										197508,
										197509
									],
									[
										197741,
										197742
									],
									[
										197756,
										197757
									],
									[
										197768,
										197769
									],
									[
										197770,
										197771
									],
									[
										197965,
										197966
									],
									[
										198004,
										198005
									],
									[
										198016,
										198017
									],
									[
										198019,
										198020
									],
									[
										198150,
										198151
									],
									[
										198158,
										198159
									],
									[
										198331,
										198332
									],
									[
										198345,
										198346
									],
									[
										198437,
										198438
									],
									[
										198443,
										198444
									],
									[
										198645,
										198646
									],
									[
										198651,
										198652
									],
									[
										198947,
										198948
									],
									[
										198954,
										198955
									],
									[
										199071,
										199072
									],
									[
										199081,
										199082
									],
									[
										199099,
										199100
									],
									[
										199108,
										199109
									],
									[
										199220,
										199221
									],
									[
										199230,
										199231
									],
									[
										199272,
										199273
									],
									[
										199281,
										199282
									],
									[
										199498,
										199499
									],
									[
										199505,
										199506
									],
									[
										199679,
										199680
									],
									[
										199686,
										199687
									],
									[
										199917,
										199918
									],
									[
										199924,
										199925
									],
									[
										199945,
										199946
									],
									[
										199952,
										199953
									],
									[
										199972,
										199973
									],
									[
										199984,
										199985
									],
									[
										200004,
										200005
									],
									[
										200011,
										200012
									],
									[
										200031,
										200032
									],
									[
										200039,
										200040
									],
									[
										200203,
										200204
									],
									[
										200210,
										200211
									],
									[
										200230,
										200231
									],
									[
										200237,
										200238
									],
									[
										200258,
										200259
									],
									[
										200270,
										200271
									],
									[
										200290,
										200291
									],
									[
										200297,
										200298
									],
									[
										200317,
										200318
									],
									[
										200325,
										200326
									],
									[
										200490,
										200491
									],
									[
										200497,
										200498
									],
									[
										200518,
										200519
									],
									[
										200525,
										200526
									],
									[
										200546,
										200547
									],
									[
										200558,
										200559
									],
									[
										200578,
										200579
									],
									[
										200585,
										200586
									],
									[
										200606,
										200607
									],
									[
										200614,
										200615
									],
									[
										200778,
										200779
									],
									[
										200785,
										200786
									],
									[
										200806,
										200807
									],
									[
										200813,
										200814
									],
									[
										200833,
										200834
									],
									[
										200845,
										200846
									],
									[
										200865,
										200866
									],
									[
										200872,
										200873
									],
									[
										200890,
										200891
									],
									[
										200898,
										200899
									],
									[
										201062,
										201063
									],
									[
										201069,
										201070
									],
									[
										201089,
										201090
									],
									[
										201096,
										201097
									],
									[
										201116,
										201117
									],
									[
										201128,
										201129
									],
									[
										201146,
										201147
									],
									[
										201153,
										201154
									],
									[
										201171,
										201172
									],
									[
										201179,
										201180
									],
									[
										201343,
										201344
									],
									[
										201350,
										201351
									],
									[
										201371,
										201372
									],
									[
										201378,
										201379
									],
									[
										201396,
										201397
									],
									[
										201408,
										201409
									],
									[
										201426,
										201427
									],
									[
										201433,
										201434
									],
									[
										201451,
										201452
									],
									[
										201459,
										201460
									],
									[
										201610,
										201611
									],
									[
										201619,
										201620
									],
									[
										201648,
										201649
									],
									[
										201657,
										201658
									],
									[
										201686,
										201687
									],
									[
										201704,
										201705
									],
									[
										201949,
										201950
									],
									[
										201956,
										201957
									],
									[
										201959,
										201960
									],
									[
										201966,
										201967
									],
									[
										202124,
										202125
									],
									[
										202132,
										202133
									],
									[
										202161,
										202162
									],
									[
										202169,
										202170
									],
									[
										202198,
										202199
									],
									[
										202213,
										202214
									],
									[
										202454,
										202455
									],
									[
										202465,
										202466
									],
									[
										202468,
										202469
									],
									[
										202486,
										202487
									],
									[
										202574,
										202575
									],
									[
										202585,
										202586
									],
									[
										202588,
										202589
									],
									[
										202606,
										202607
									],
									[
										202825,
										202826
									],
									[
										202836,
										202837
									],
									[
										202839,
										202840
									],
									[
										202857,
										202858
									],
									[
										202946,
										202947
									],
									[
										202957,
										202958
									],
									[
										202960,
										202961
									],
									[
										202978,
										202979
									],
									[
										203136,
										203137
									],
									[
										203144,
										203145
									],
									[
										203173,
										203174
									],
									[
										203196,
										203197
									],
									[
										203225,
										203226
									],
									[
										203240,
										203241
									],
									[
										203482,
										203483
									],
									[
										203493,
										203494
									],
									[
										203496,
										203497
									],
									[
										203514,
										203515
									],
									[
										203603,
										203604
									],
									[
										203614,
										203615
									],
									[
										203617,
										203618
									],
									[
										203635,
										203636
									],
									[
										203844,
										203845
									],
									[
										203855,
										203856
									],
									[
										203858,
										203859
									],
									[
										203876,
										203877
									],
									[
										203967,
										203968
									],
									[
										203978,
										203979
									],
									[
										203981,
										203982
									],
									[
										203999,
										204000
									],
									[
										204098,
										204099
									],
									[
										204105,
										204106
									],
									[
										204326,
										204327
									],
									[
										204337,
										204338
									],
									[
										204340,
										204341
									],
									[
										204358,
										204359
									],
									[
										204453,
										204454
									],
									[
										204464,
										204465
									],
									[
										204467,
										204468
									],
									[
										204485,
										204486
									],
									[
										204588,
										204589
									],
									[
										204595,
										204596
									],
									[
										204805,
										204806
									],
									[
										204816,
										204817
									],
									[
										204819,
										204820
									],
									[
										204837,
										204838
									],
									[
										204925,
										204926
									],
									[
										204936,
										204937
									],
									[
										204939,
										204940
									],
									[
										204957,
										204958
									],
									[
										205172,
										205173
									],
									[
										205183,
										205184
									],
									[
										205186,
										205187
									],
									[
										205204,
										205205
									],
									[
										205299,
										205300
									],
									[
										205310,
										205311
									],
									[
										205313,
										205314
									],
									[
										205331,
										205332
									],
									[
										205433,
										205434
									],
									[
										205440,
										205441
									],
									[
										205656,
										205657
									],
									[
										205667,
										205668
									],
									[
										205670,
										205671
									],
									[
										205688,
										205689
									],
									[
										205780,
										205781
									],
									[
										205791,
										205792
									],
									[
										205794,
										205795
									],
									[
										205812,
										205813
									],
									[
										205911,
										205912
									],
									[
										205918,
										205919
									],
									[
										206090,
										206091
									],
									[
										206101,
										206102
									],
									[
										206130,
										206131
									],
									[
										206141,
										206142
									],
									[
										206170,
										206171
									],
									[
										206182,
										206183
									],
									[
										206431,
										206432
									],
									[
										206438,
										206439
									],
									[
										206441,
										206442
									],
									[
										206453,
										206454
									],
									[
										206610,
										206611
									],
									[
										206618,
										206619
									],
									[
										206647,
										206648
									],
									[
										206655,
										206656
									],
									[
										206684,
										206685
									],
									[
										206702,
										206703
									],
									[
										206881,
										206882
									],
									[
										206887,
										206888
									],
									[
										206916,
										206917
									],
									[
										206922,
										206923
									],
									[
										206951,
										206952
									],
									[
										206969,
										206970
									],
									[
										207299,
										207300
									],
									[
										207307,
										207308
									],
									[
										207323,
										207324
									],
									[
										207331,
										207332
									],
									[
										207568,
										207569
									],
									[
										207574,
										207575
									],
									[
										207603,
										207604
									],
									[
										207609,
										207610
									],
									[
										207638,
										207639
									],
									[
										207650,
										207651
									],
									[
										207963,
										207964
									],
									[
										207970,
										207971
									],
									[
										207973,
										207974
									],
									[
										207979,
										207980
									],
									[
										208255,
										208256
									],
									[
										208261,
										208262
									],
									[
										208290,
										208291
									],
									[
										208296,
										208297
									],
									[
										208325,
										208326
									],
									[
										208343,
										208344
									],
									[
										208527,
										208528
									],
									[
										208536,
										208537
									],
									[
										208565,
										208566
									],
									[
										208588,
										208589
									],
									[
										208617,
										208618
									],
									[
										208632,
										208633
									],
									[
										208951,
										208952
									],
									[
										208962,
										208963
									],
									[
										208965,
										208966
									],
									[
										208983,
										208984
									],
									[
										209075,
										209076
									],
									[
										209086,
										209087
									],
									[
										209089,
										209090
									],
									[
										209100,
										209101
									],
									[
										209196,
										209197
									],
									[
										209203,
										209204
									],
									[
										209293,
										209294
									],
									[
										209304,
										209305
									],
									[
										209307,
										209308
									],
									[
										209325,
										209326
									],
									[
										209690,
										209691
									],
									[
										209701,
										209702
									],
									[
										209704,
										209705
									],
									[
										209722,
										209723
									],
									[
										209810,
										209811
									],
									[
										209821,
										209822
									],
									[
										209824,
										209825
									],
									[
										209842,
										209843
									],
									[
										210134,
										210135
									],
									[
										210145,
										210146
									],
									[
										210148,
										210149
									],
									[
										210166,
										210167
									],
									[
										210255,
										210256
									],
									[
										210266,
										210267
									],
									[
										210269,
										210270
									],
									[
										210287,
										210288
									],
									[
										210446,
										210447
									],
									[
										210454,
										210455
									],
									[
										210483,
										210484
									],
									[
										210491,
										210492
									],
									[
										210520,
										210521
									],
									[
										210535,
										210536
									],
									[
										210862,
										210863
									],
									[
										210867,
										210868
									],
									[
										211178,
										211179
									],
									[
										211183,
										211184
									],
									[
										211349,
										211350
									],
									[
										211355,
										211356
									],
									[
										211384,
										211385
									],
									[
										211400,
										211401
									],
									[
										211429,
										211430
									],
									[
										211444,
										211445
									],
									[
										211690,
										211691
									],
									[
										211701,
										211702
									],
									[
										211704,
										211705
									],
									[
										211715,
										211716
									],
									[
										211805,
										211806
									],
									[
										211816,
										211817
									],
									[
										211819,
										211820
									],
									[
										211830,
										211831
									],
									[
										211927,
										211928
									],
									[
										211934,
										211935
									],
									[
										211937,
										211938
									],
									[
										211949,
										211950
									],
									[
										212036,
										212037
									],
									[
										212047,
										212048
									],
									[
										212050,
										212051
									],
									[
										212061,
										212062
									],
									[
										212148,
										212149
									],
									[
										212159,
										212160
									],
									[
										212162,
										212163
									],
									[
										212173,
										212174
									],
									[
										212378,
										212379
									],
									[
										212389,
										212390
									],
									[
										212392,
										212393
									],
									[
										212410,
										212411
									],
									[
										212498,
										212499
									],
									[
										212509,
										212510
									],
									[
										212512,
										212513
									],
									[
										212530,
										212531
									],
									[
										212618,
										212619
									],
									[
										212629,
										212630
									],
									[
										212632,
										212633
									],
									[
										212650,
										212651
									],
									[
										212738,
										212739
									],
									[
										212749,
										212750
									],
									[
										212752,
										212753
									],
									[
										212770,
										212771
									],
									[
										212858,
										212859
									],
									[
										212869,
										212870
									],
									[
										212872,
										212873
									],
									[
										212890,
										212891
									],
									[
										212978,
										212979
									],
									[
										212989,
										212990
									],
									[
										212992,
										212993
									],
									[
										213010,
										213011
									],
									[
										213230,
										213231
									],
									[
										213241,
										213242
									],
									[
										213244,
										213245
									],
									[
										213262,
										213263
									],
									[
										213351,
										213352
									],
									[
										213362,
										213363
									],
									[
										213365,
										213366
									],
									[
										213383,
										213384
									],
									[
										213472,
										213473
									],
									[
										213483,
										213484
									],
									[
										213486,
										213487
									],
									[
										213504,
										213505
									],
									[
										213593,
										213594
									],
									[
										213604,
										213605
									],
									[
										213607,
										213608
									],
									[
										213625,
										213626
									],
									[
										213714,
										213715
									],
									[
										213725,
										213726
									],
									[
										213728,
										213729
									],
									[
										213746,
										213747
									],
									[
										213835,
										213836
									],
									[
										213846,
										213847
									],
									[
										213849,
										213850
									],
									[
										213867,
										213868
									],
									[
										214030,
										214031
									],
									[
										214037,
										214038
									],
									[
										214066,
										214067
									],
									[
										214073,
										214074
									],
									[
										214102,
										214103
									],
									[
										214120,
										214121
									],
									[
										214443,
										214444
									],
									[
										214450,
										214451
									],
									[
										214453,
										214454
									],
									[
										214460,
										214461
									],
									[
										214755,
										214756
									],
									[
										214762,
										214763
									],
									[
										214765,
										214766
									],
									[
										214772,
										214773
									],
									[
										214941,
										214942
									],
									[
										214953,
										214954
									],
									[
										214982,
										214983
									],
									[
										215012,
										215013
									],
									[
										215041,
										215042
									],
									[
										215056,
										215057
									],
									[
										215300,
										215301
									],
									[
										215311,
										215312
									],
									[
										215314,
										215315
									],
									[
										215332,
										215333
									],
									[
										215434,
										215435
									],
									[
										215442,
										215443
									],
									[
										215459,
										215460
									],
									[
										215465,
										215466
									],
									[
										215562,
										215563
									],
									[
										215573,
										215574
									],
									[
										215576,
										215577
									],
									[
										215594,
										215595
									],
									[
										215811,
										215812
									],
									[
										215816,
										215817
									],
									[
										215833,
										215834
									],
									[
										215841,
										215842
									],
									[
										215950,
										215951
									],
									[
										215955,
										215956
									],
									[
										215972,
										215973
									],
									[
										215980,
										215981
									],
									[
										216191,
										216192
									],
									[
										216202,
										216203
									],
									[
										216205,
										216206
									],
									[
										216223,
										216224
									],
									[
										216311,
										216312
									],
									[
										216322,
										216323
									],
									[
										216325,
										216326
									],
									[
										216343,
										216344
									],
									[
										216559,
										216560
									],
									[
										216564,
										216565
									],
									[
										216581,
										216582
									],
									[
										216589,
										216590
									],
									[
										216699,
										216700
									],
									[
										216704,
										216705
									],
									[
										216721,
										216722
									],
									[
										216729,
										216730
									],
									[
										216902,
										216903
									],
									[
										216910,
										216911
									],
									[
										216939,
										216940
									],
									[
										216947,
										216948
									],
									[
										216976,
										216977
									],
									[
										216995,
										216996
									],
									[
										217324,
										217325
									],
									[
										217329,
										217330
									],
									[
										217559,
										217560
									],
									[
										217566,
										217567
									],
									[
										217595,
										217596
									],
									[
										217602,
										217603
									],
									[
										217631,
										217632
									],
									[
										217646,
										217647
									],
									[
										217829,
										217830
									],
									[
										217837,
										217838
									],
									[
										217866,
										217867
									],
									[
										217874,
										217875
									],
									[
										217903,
										217904
									],
									[
										217922,
										217923
									],
									[
										218104,
										218105
									],
									[
										218112,
										218113
									],
									[
										218141,
										218142
									],
									[
										218149,
										218150
									],
									[
										218178,
										218179
									],
									[
										218196,
										218197
									],
									[
										218451,
										218452
									],
									[
										218457,
										218458
									],
									[
										218699,
										218700
									],
									[
										218709,
										218710
									],
									[
										218738,
										218739
									],
									[
										218749,
										218750
									],
									[
										218778,
										218779
									],
									[
										218797,
										218798
									],
									[
										218990,
										218991
									],
									[
										219004,
										219005
									],
									[
										219033,
										219034
									],
									[
										219047,
										219048
									],
									[
										219182,
										219183
									],
									[
										219189,
										219190
									],
									[
										219258,
										219259
									],
									[
										219265,
										219266
									],
									[
										219306,
										219307
									],
									[
										219314,
										219315
									],
									[
										219332,
										219333
									],
									[
										219343,
										219344
									],
									[
										219511,
										219512
									],
									[
										219530,
										219531
									],
									[
										219547,
										219548
									],
									[
										219550,
										219551
									],
									[
										219562,
										219563
									],
									[
										219573,
										219574
									],
									[
										219591,
										219592
									],
									[
										219599,
										219600
									],
									[
										219679,
										219680
									],
									[
										219719,
										219720
									],
									[
										219847,
										219848
									],
									[
										219856,
										219857
									],
									[
										220078,
										220079
									],
									[
										220085,
										220086
									],
									[
										220131,
										220132
									],
									[
										220147,
										220148
									],
									[
										220192,
										220193
									],
									[
										220196,
										220197
									],
									[
										220338,
										220339
									],
									[
										220345,
										220346
									],
									[
										220374,
										220375
									],
									[
										220381,
										220382
									],
									[
										220571,
										220572
									],
									[
										220579,
										220580
									],
									[
										220608,
										220609
									],
									[
										220616,
										220617
									],
									[
										220747,
										220748
									],
									[
										220768,
										220769
									],
									[
										220780,
										220781
									],
									[
										220790,
										220791
									],
									[
										221019,
										221020
									],
									[
										221026,
										221027
									],
									[
										221142,
										221143
									],
									[
										221149,
										221150
									],
									[
										221178,
										221179
									],
									[
										221185,
										221186
									],
									[
										221368,
										221369
									],
									[
										221375,
										221376
									],
									[
										221584,
										221585
									],
									[
										221591,
										221592
									],
									[
										221620,
										221621
									],
									[
										221627,
										221628
									],
									[
										221850,
										221851
									],
									[
										221857,
										221858
									],
									[
										221899,
										221900
									],
									[
										221904,
										221905
									],
									[
										221907,
										221908
									],
									[
										221916,
										221917
									],
									[
										221919,
										221920
									],
									[
										221925,
										221926
									],
									[
										221928,
										221929
									],
									[
										221933,
										221934
									],
									[
										222013,
										222014
									],
									[
										222018,
										222019
									],
									[
										222021,
										222022
									],
									[
										222030,
										222031
									],
									[
										222263,
										222264
									],
									[
										222275,
										222276
									],
									[
										222304,
										222305
									],
									[
										222317,
										222318
									],
									[
										222499,
										222500
									],
									[
										222506,
										222507
									],
									[
										222532,
										222533
									],
									[
										222539,
										222540
									],
									[
										222568,
										222569
									],
									[
										222575,
										222576
									],
									[
										222732,
										222733
									],
									[
										222737,
										222738
									],
									[
										222765,
										222766
									],
									[
										222772,
										222773
									],
									[
										222791,
										222792
									],
									[
										222796,
										222797
									],
									[
										222829,
										222830
									],
									[
										222834,
										222835
									],
									[
										222866,
										222867
									],
									[
										222876,
										222877
									],
									[
										222913,
										222914
									],
									[
										222920,
										222921
									],
									[
										223092,
										223093
									],
									[
										223097,
										223098
									],
									[
										223120,
										223121
									],
									[
										223125,
										223126
									],
									[
										223159,
										223160
									],
									[
										223166,
										223167
									],
									[
										223183,
										223184
									],
									[
										223190,
										223191
									],
									[
										223333,
										223334
									],
									[
										223348,
										223349
									],
									[
										223491,
										223492
									],
									[
										223513,
										223514
									],
									[
										223531,
										223532
									],
									[
										223540,
										223541
									],
									[
										223700,
										223701
									],
									[
										223709,
										223710
									],
									[
										223885,
										223886
									],
									[
										223894,
										223895
									],
									[
										224071,
										224072
									],
									[
										224090,
										224091
									],
									[
										224321,
										224322
									],
									[
										224329,
										224330
									],
									[
										224527,
										224528
									],
									[
										224546,
										224547
									],
									[
										224737,
										224738
									],
									[
										224746,
										224747
									],
									[
										225048,
										225049
									],
									[
										225056,
										225057
									],
									[
										225279,
										225280
									],
									[
										225288,
										225289
									],
									[
										225318,
										225319
									],
									[
										225325,
										225326
									],
									[
										225355,
										225356
									],
									[
										225364,
										225365
									],
									[
										225441,
										225442
									],
									[
										225460,
										225461
									],
									[
										225477,
										225478
									],
									[
										225480,
										225481
									],
									[
										225492,
										225493
									],
									[
										225503,
										225504
									],
									[
										225521,
										225522
									],
									[
										225529,
										225530
									],
									[
										225536,
										225537
									],
									[
										225538,
										225539
									],
									[
										225741,
										225742
									],
									[
										225757,
										225758
									],
									[
										225802,
										225803
									],
									[
										225806,
										225807
									],
									[
										226000,
										226001
									],
									[
										226007,
										226008
									],
									[
										226049,
										226050
									],
									[
										226058,
										226059
									],
									[
										226237,
										226238
									],
									[
										226238,
										226239
									],
									[
										226307,
										226308
									],
									[
										226313,
										226314
									],
									[
										226405,
										226406
									],
									[
										226409,
										226410
									],
									[
										226653,
										226654
									],
									[
										226672,
										226673
									],
									[
										226693,
										226694
									],
									[
										226704,
										226705
									],
									[
										226724,
										226725
									],
									[
										226726,
										226727
									],
									[
										226740,
										226741
									],
									[
										226742,
										226743
									],
									[
										226763,
										226764
									],
									[
										226776,
										226777
									],
									[
										226788,
										226789
									],
									[
										226802,
										226803
									],
									[
										227011,
										227012
									],
									[
										227044,
										227045
									],
									[
										227052,
										227053
									],
									[
										227055,
										227056
									],
									[
										227069,
										227070
									],
									[
										227091,
										227092
									],
									[
										227101,
										227102
									],
									[
										227111,
										227112
									],
									[
										227129,
										227130
									],
									[
										227140,
										227141
									],
									[
										227152,
										227153
									],
									[
										227157,
										227158
									],
									[
										227212,
										227213
									],
									[
										227249,
										227250
									],
									[
										227257,
										227258
									],
									[
										227260,
										227261
									],
									[
										227274,
										227275
									],
									[
										227296,
										227297
									],
									[
										227306,
										227307
									],
									[
										227316,
										227317
									],
									[
										227464,
										227465
									],
									[
										227474,
										227475
									],
									[
										227486,
										227487
									],
									[
										227494,
										227495
									],
									[
										227727,
										227728
									],
									[
										227736,
										227737
									],
									[
										227792,
										227793
									],
									[
										227801,
										227802
									],
									[
										227883,
										227884
									],
									[
										227895,
										227896
									],
									[
										227907,
										227908
									],
									[
										227926,
										227927
									],
									[
										228036,
										228037
									],
									[
										228043,
										228044
									],
									[
										228100,
										228101
									],
									[
										228107,
										228108
									],
									[
										228246,
										228247
									],
									[
										228260,
										228261
									],
									[
										228272,
										228273
									],
									[
										228287,
										228288
									],
									[
										228307,
										228308
									],
									[
										228317,
										228318
									],
									[
										228325,
										228326
									],
									[
										228335,
										228336
									],
									[
										228344,
										228345
									],
									[
										228346,
										228347
									],
									[
										228556,
										228557
									],
									[
										228565,
										228566
									],
									[
										228686,
										228687
									],
									[
										228689,
										228690
									],
									[
										228721,
										228722
									],
									[
										228726,
										228727
									],
									[
										228760,
										228761
									],
									[
										228768,
										228769
									],
									[
										228805,
										228806
									],
									[
										228810,
										228811
									],
									[
										228844,
										228845
									],
									[
										228851,
										228852
									],
									[
										228887,
										228888
									],
									[
										228894,
										228895
									],
									[
										228930,
										228931
									],
									[
										228937,
										228938
									],
									[
										228974,
										228975
									],
									[
										228984,
										228985
									],
									[
										229023,
										229024
									],
									[
										229032,
										229033
									],
									[
										229070,
										229071
									],
									[
										229075,
										229076
									],
									[
										229109,
										229110
									],
									[
										229117,
										229118
									],
									[
										229154,
										229155
									],
									[
										229160,
										229161
									],
									[
										229195,
										229196
									],
									[
										229205,
										229206
									],
									[
										229244,
										229245
									],
									[
										229247,
										229248
									],
									[
										229279,
										229280
									],
									[
										229290,
										229291
									],
									[
										229442,
										229443
									],
									[
										229452,
										229453
									],
									[
										229612,
										229613
									],
									[
										229618,
										229619
									],
									[
										229647,
										229648
									],
									[
										229674,
										229675
									],
									[
										229811,
										229812
									],
									[
										229819,
										229820
									],
									[
										229848,
										229849
									],
									[
										229867,
										229868
									],
									[
										230004,
										230005
									],
									[
										230012,
										230013
									],
									[
										230041,
										230042
									],
									[
										230066,
										230067
									],
									[
										230204,
										230205
									],
									[
										230213,
										230214
									],
									[
										230242,
										230243
									],
									[
										230269,
										230270
									],
									[
										230404,
										230405
									],
									[
										230411,
										230412
									],
									[
										230440,
										230441
									],
									[
										230461,
										230462
									],
									[
										230595,
										230596
									],
									[
										230600,
										230601
									],
									[
										230629,
										230630
									],
									[
										230648,
										230649
									],
									[
										230785,
										230786
									],
									[
										230793,
										230794
									],
									[
										230822,
										230823
									],
									[
										230846,
										230847
									],
									[
										230981,
										230982
									],
									[
										230987,
										230988
									],
									[
										231016,
										231017
									],
									[
										231040,
										231041
									],
									[
										231222,
										231223
									],
									[
										231227,
										231228
									],
									[
										231258,
										231259
									],
									[
										231263,
										231264
									],
									[
										231396,
										231397
									],
									[
										231415,
										231416
									],
									[
										231434,
										231435
									],
									[
										231445,
										231446
									],
									[
										231465,
										231466
									],
									[
										231467,
										231468
									],
									[
										231546,
										231547
									],
									[
										231568,
										231569
									],
									[
										231677,
										231678
									],
									[
										231688,
										231689
									],
									[
										231717,
										231718
									],
									[
										231728,
										231729
									],
									[
										231874,
										231875
									],
									[
										231884,
										231885
									],
									[
										232069,
										232070
									],
									[
										232074,
										232075
									],
									[
										232103,
										232104
									],
									[
										232116,
										232117
									],
									[
										232263,
										232264
									],
									[
										232277,
										232278
									],
									[
										232439,
										232440
									],
									[
										232455,
										232456
									],
									[
										232739,
										232740
									],
									[
										232754,
										232755
									],
									[
										232864,
										232865
									],
									[
										232881,
										232882
									],
									[
										232899,
										232900
									],
									[
										232901,
										232902
									],
									[
										232913,
										232914
									],
									[
										232919,
										232920
									],
									[
										232965,
										232966
									],
									[
										232974,
										232975
									],
									[
										233019,
										233020
									],
									[
										233028,
										233029
									],
									[
										233140,
										233141
									],
									[
										233156,
										233157
									],
									[
										233240,
										233241
									],
									[
										233249,
										233250
									],
									[
										233267,
										233268
									],
									[
										233269,
										233270
									],
									[
										233281,
										233282
									],
									[
										233308,
										233309
									],
									[
										233410,
										233411
									],
									[
										233415,
										233416
									],
									[
										233441,
										233442
									],
									[
										233442,
										233443
									],
									[
										233471,
										233472
									],
									[
										233472,
										233473
									],
									[
										233505,
										233506
									],
									[
										233516,
										233517
									],
									[
										233519,
										233520
									],
									[
										233537,
										233538
									],
									[
										233540,
										233541
									],
									[
										233551,
										233552
									],
									[
										233748,
										233749
									],
									[
										233751,
										233752
									],
									[
										233782,
										233783
									],
									[
										233787,
										233788
									],
									[
										234084,
										234085
									],
									[
										234091,
										234092
									],
									[
										234196,
										234197
									],
									[
										234215,
										234216
									],
									[
										234234,
										234235
									],
									[
										234245,
										234246
									],
									[
										234265,
										234266
									],
									[
										234267,
										234268
									],
									[
										234346,
										234347
									],
									[
										234368,
										234369
									],
									[
										234460,
										234461
									],
									[
										234468,
										234469
									],
									[
										234480,
										234481
									],
									[
										234495,
										234496
									],
									[
										234508,
										234509
									],
									[
										234512,
										234513
									],
									[
										234603,
										234604
									],
									[
										234615,
										234616
									],
									[
										234737,
										234738
									],
									[
										234756,
										234757
									],
									[
										234880,
										234881
									],
									[
										234900,
										234901
									],
									[
										234954,
										234955
									],
									[
										234978,
										234979
									],
									[
										235202,
										235203
									],
									[
										235211,
										235212
									],
									[
										235307,
										235308
									],
									[
										235315,
										235316
									],
									[
										235373,
										235374
									],
									[
										235381,
										235382
									],
									[
										235499,
										235500
									],
									[
										235506,
										235507
									],
									[
										235717,
										235718
									],
									[
										235726,
										235727
									],
									[
										235865,
										235866
									],
									[
										235879,
										235880
									],
									[
										235908,
										235909
									],
									[
										235924,
										235925
									],
									[
										236070,
										236071
									],
									[
										236080,
										236081
									],
									[
										236267,
										236268
									],
									[
										236273,
										236274
									],
									[
										236304,
										236305
									],
									[
										236309,
										236310
									],
									[
										236605,
										236606
									],
									[
										236612,
										236613
									],
									[
										236744,
										236745
									],
									[
										236758,
										236759
									],
									[
										236770,
										236771
									],
									[
										236788,
										236789
									],
									[
										236947,
										236948
									],
									[
										236966,
										236967
									],
									[
										236985,
										236986
									],
									[
										236996,
										236997
									],
									[
										237016,
										237017
									],
									[
										237022,
										237023
									],
									[
										237034,
										237035
									],
									[
										237039,
										237040
									],
									[
										237061,
										237062
									],
									[
										237074,
										237075
									],
									[
										237255,
										237256
									],
									[
										237257,
										237258
									],
									[
										237278,
										237279
									],
									[
										237281,
										237282
									],
									[
										237289,
										237290
									],
									[
										237295,
										237296
									],
									[
										237506,
										237507
									],
									[
										237525,
										237526
									],
									[
										237533,
										237534
									],
									[
										237536,
										237537
									],
									[
										237550,
										237551
									],
									[
										237572,
										237573
									],
									[
										237582,
										237583
									],
									[
										237592,
										237593
									],
									[
										237610,
										237611
									],
									[
										237621,
										237622
									],
									[
										237633,
										237634
									],
									[
										237638,
										237639
									],
									[
										237776,
										237777
									],
									[
										237794,
										237795
									],
									[
										237823,
										237824
									],
									[
										237842,
										237843
									],
									[
										237873,
										237874
									],
									[
										237878,
										237879
									],
									[
										238172,
										238173
									],
									[
										238181,
										238182
									],
									[
										238281,
										238282
									],
									[
										238292,
										238293
									],
									[
										238321,
										238322
									],
									[
										238340,
										238341
									],
									[
										238371,
										238372
									],
									[
										238375,
										238376
									],
									[
										238518,
										238519
									],
									[
										238530,
										238531
									],
									[
										238559,
										238560
									],
									[
										238580,
										238581
									],
									[
										238611,
										238612
									],
									[
										238615,
										238616
									],
									[
										238757,
										238758
									],
									[
										238768,
										238769
									],
									[
										238797,
										238798
									],
									[
										238815,
										238816
									],
									[
										238846,
										238847
									],
									[
										238850,
										238851
									],
									[
										238997,
										238998
									],
									[
										239013,
										239014
									],
									[
										239042,
										239043
									],
									[
										239062,
										239063
									],
									[
										239093,
										239094
									],
									[
										239097,
										239098
									],
									[
										239242,
										239243
									],
									[
										239255,
										239256
									],
									[
										239284,
										239285
									],
									[
										239304,
										239305
									],
									[
										239366,
										239367
									],
									[
										239373,
										239374
									],
									[
										239521,
										239522
									],
									[
										239540,
										239541
									],
									[
										239569,
										239570
									],
									[
										239589,
										239590
									],
									[
										239651,
										239652
									],
									[
										239658,
										239659
									],
									[
										239850,
										239851
									],
									[
										239859,
										239860
									],
									[
										239890,
										239891
									],
									[
										239901,
										239902
									],
									[
										240108,
										240109
									],
									[
										240113,
										240114
									],
									[
										240214,
										240215
									],
									[
										240221,
										240222
									],
									[
										240344,
										240345
									],
									[
										240349,
										240350
									],
									[
										240411,
										240412
									],
									[
										240418,
										240419
									],
									[
										240567,
										240568
									],
									[
										240576,
										240577
									],
									[
										240606,
										240607
									],
									[
										240613,
										240614
									],
									[
										240643,
										240644
									],
									[
										240652,
										240653
									],
									[
										240772,
										240773
									],
									[
										240788,
										240789
									],
									[
										240817,
										240818
									],
									[
										240834,
										240835
									],
									[
										240865,
										240866
									],
									[
										240871,
										240872
									],
									[
										241103,
										241104
									],
									[
										241112,
										241113
									],
									[
										241143,
										241144
									],
									[
										241154,
										241155
									],
									[
										241355,
										241356
									],
									[
										241363,
										241364
									],
									[
										241392,
										241393
									],
									[
										241408,
										241409
									],
									[
										241466,
										241467
									],
									[
										241473,
										241474
									],
									[
										241627,
										241628
									],
									[
										241645,
										241646
									],
									[
										241674,
										241675
									],
									[
										241694,
										241695
									],
									[
										241725,
										241726
									],
									[
										241730,
										241731
									],
									[
										241946,
										241947
									],
									[
										241968,
										241969
									],
									[
										241997,
										241998
									],
									[
										242021,
										242022
									],
									[
										242052,
										242053
									],
									[
										242058,
										242059
									],
									[
										242256,
										242257
									],
									[
										242262,
										242263
									],
									[
										242293,
										242294
									],
									[
										242304,
										242305
									],
									[
										242458,
										242459
									],
									[
										242473,
										242474
									],
									[
										242502,
										242503
									],
									[
										242518,
										242519
									],
									[
										242549,
										242550
									],
									[
										242554,
										242555
									],
									[
										242740,
										242741
									],
									[
										242747,
										242748
									],
									[
										242778,
										242779
									],
									[
										242789,
										242790
									],
									[
										242912,
										242913
									],
									[
										242926,
										242927
									],
									[
										242955,
										242956
									],
									[
										242970,
										242971
									],
									[
										243118,
										243119
									],
									[
										243123,
										243124
									],
									[
										243268,
										243269
									],
									[
										243281,
										243282
									],
									[
										243310,
										243311
									],
									[
										243325,
										243326
									],
									[
										243472,
										243473
									],
									[
										243477,
										243478
									],
									[
										243621,
										243622
									],
									[
										243626,
										243627
									],
									[
										243655,
										243656
									],
									[
										243660,
										243661
									],
									[
										243848,
										243849
									],
									[
										243857,
										243858
									],
									[
										243888,
										243889
									],
									[
										243899,
										243900
									],
									[
										244019,
										244020
									],
									[
										244028,
										244029
									],
									[
										244057,
										244058
									],
									[
										244079,
										244080
									],
									[
										244227,
										244228
									],
									[
										244234,
										244235
									],
									[
										244533,
										244534
									],
									[
										244540,
										244541
									],
									[
										244640,
										244641
									],
									[
										244650,
										244651
									],
									[
										244679,
										244680
									],
									[
										244696,
										244697
									],
									[
										244844,
										244845
									],
									[
										244851,
										244852
									],
									[
										244998,
										244999
									],
									[
										245012,
										245013
									],
									[
										245041,
										245042
									],
									[
										245062,
										245063
									],
									[
										245198,
										245199
									],
									[
										245207,
										245208
									],
									[
										245236,
										245237
									],
									[
										245259,
										245260
									],
									[
										245406,
										245407
									],
									[
										245413,
										245414
									],
									[
										245556,
										245557
									],
									[
										245569,
										245570
									],
									[
										245598,
										245599
									],
									[
										245617,
										245618
									],
									[
										245765,
										245766
									],
									[
										245771,
										245772
									],
									[
										245960,
										245961
									],
									[
										245967,
										245968
									],
									[
										246263,
										246264
									],
									[
										246275,
										246276
									],
									[
										246328,
										246329
									],
									[
										246335,
										246336
									],
									[
										246448,
										246449
									],
									[
										246460,
										246461
									],
									[
										246626,
										246627
									],
									[
										246640,
										246641
									],
									[
										246652,
										246653
									],
									[
										246670,
										246671
									],
									[
										246888,
										246889
									],
									[
										246901,
										246902
									],
									[
										246913,
										246914
									],
									[
										246926,
										246927
									],
									[
										246938,
										246939
									],
									[
										246948,
										246949
									],
									[
										246961,
										246962
									],
									[
										246963,
										246964
									],
									[
										247180,
										247181
									],
									[
										247192,
										247193
									],
									[
										247221,
										247222
									],
									[
										247237,
										247238
									],
									[
										247389,
										247390
									],
									[
										247399,
										247400
									],
									[
										247545,
										247546
									],
									[
										247558,
										247559
									],
									[
										247587,
										247588
									],
									[
										247611,
										247612
									],
									[
										247763,
										247764
									],
									[
										247773,
										247774
									],
									[
										247916,
										247917
									],
									[
										247928,
										247929
									],
									[
										247957,
										247958
									],
									[
										247977,
										247978
									],
									[
										248128,
										248129
									],
									[
										248138,
										248139
									],
									[
										248283,
										248284
									],
									[
										248297,
										248298
									],
									[
										248326,
										248327
									],
									[
										248348,
										248349
									],
									[
										248500,
										248501
									],
									[
										248510,
										248511
									],
									[
										248697,
										248698
									],
									[
										248703,
										248704
									],
									[
										248734,
										248735
									],
									[
										248745,
										248746
									],
									[
										248868,
										248869
									],
									[
										248877,
										248878
									],
									[
										248889,
										248890
									],
									[
										248910,
										248911
									],
									[
										248929,
										248930
									],
									[
										248932,
										248933
									],
									[
										248944,
										248945
									],
									[
										248953,
										248954
									],
									[
										248961,
										248962
									],
									[
										248972,
										248973
									],
									[
										248992,
										248993
									],
									[
										249003,
										249004
									],
									[
										249015,
										249016
									],
									[
										249026,
										249027
									],
									[
										249162,
										249163
									],
									[
										249168,
										249169
									],
									[
										249177,
										249178
									],
									[
										249195,
										249196
									],
									[
										249366,
										249367
									],
									[
										249371,
										249372
									],
									[
										249380,
										249381
									],
									[
										249422,
										249423
									],
									[
										249434,
										249435
									],
									[
										249439,
										249440
									],
									[
										249577,
										249578
									],
									[
										249586,
										249587
									],
									[
										249595,
										249596
									],
									[
										249624,
										249625
									],
									[
										249634,
										249635
									],
									[
										249644,
										249645
									],
									[
										249654,
										249655
									],
									[
										249665,
										249666
									],
									[
										249677,
										249678
									],
									[
										249682,
										249683
									],
									[
										249905,
										249906
									],
									[
										249916,
										249917
									],
									[
										249945,
										249946
									],
									[
										249963,
										249964
									],
									[
										250111,
										250112
									],
									[
										250117,
										250118
									],
									[
										250260,
										250261
									],
									[
										250272,
										250273
									],
									[
										250301,
										250302
									],
									[
										250319,
										250320
									],
									[
										250467,
										250468
									],
									[
										250473,
										250474
									],
									[
										250614,
										250615
									],
									[
										250625,
										250626
									],
									[
										250654,
										250655
									],
									[
										250673,
										250674
									],
									[
										250820,
										250821
									],
									[
										250826,
										250827
									],
									[
										250969,
										250970
									],
									[
										250982,
										250983
									],
									[
										251011,
										251012
									],
									[
										251025,
										251026
									],
									[
										251146,
										251147
									],
									[
										251157,
										251158
									],
									[
										251342,
										251343
									],
									[
										251348,
										251349
									],
									[
										251351,
										251352
									],
									[
										251358,
										251359
									],
									[
										251361,
										251362
									],
									[
										251370,
										251371
									],
									[
										251373,
										251374
									],
									[
										251379,
										251380
									],
									[
										251382,
										251383
									],
									[
										251390,
										251391
									],
									[
										251393,
										251394
									],
									[
										251399,
										251400
									],
									[
										251402,
										251403
									],
									[
										251408,
										251409
									],
									[
										251411,
										251412
									],
									[
										251419,
										251420
									],
									[
										251473,
										251474
									],
									[
										251479,
										251480
									],
									[
										251482,
										251483
									],
									[
										251489,
										251490
									],
									[
										251492,
										251493
									],
									[
										251501,
										251502
									],
									[
										251504,
										251505
									],
									[
										251512,
										251513
									],
									[
										251515,
										251516
									],
									[
										251524,
										251525
									],
									[
										251527,
										251528
									],
									[
										251535,
										251536
									],
									[
										251538,
										251539
									],
									[
										251544,
										251545
									],
									[
										251588,
										251589
									],
									[
										251592,
										251593
									],
									[
										251634,
										251635
									],
									[
										251640,
										251641
									],
									[
										251643,
										251644
									],
									[
										251650,
										251651
									],
									[
										251653,
										251654
									],
									[
										251662,
										251663
									],
									[
										251665,
										251666
									],
									[
										251673,
										251674
									],
									[
										251676,
										251677
									],
									[
										251685,
										251686
									],
									[
										251688,
										251689
									],
									[
										251696,
										251697
									],
									[
										251834,
										251835
									],
									[
										251843,
										251844
									],
									[
										251920,
										251921
									],
									[
										251929,
										251930
									],
									[
										252017,
										252018
									],
									[
										252079,
										252080
									],
									[
										252098,
										252099
									],
									[
										252109,
										252110
									],
									[
										252128,
										252129
									],
									[
										252147,
										252148
									],
									[
										252172,
										252173
									],
									[
										252183,
										252184
									],
									[
										252202,
										252203
									],
									[
										252275,
										252276
									],
									[
										252285,
										252286
									],
									[
										252296,
										252297
									],
									[
										252315,
										252316
									],
									[
										252391,
										252392
									],
									[
										252426,
										252427
									],
									[
										252437,
										252438
									],
									[
										252456,
										252457
									],
									[
										252549,
										252550
									],
									[
										252580,
										252581
									],
									[
										252591,
										252592
									],
									[
										252618,
										252619
									],
									[
										252689,
										252690
									],
									[
										252697,
										252698
									],
									[
										252708,
										252709
									],
									[
										252727,
										252728
									],
									[
										252812,
										252813
									],
									[
										252841,
										252842
									],
									[
										252852,
										252853
									],
									[
										252871,
										252872
									],
									[
										252957,
										252958
									],
									[
										252987,
										252988
									],
									[
										252998,
										252999
									],
									[
										253017,
										253018
									],
									[
										253107,
										253108
									],
									[
										253152,
										253153
									],
									[
										253164,
										253165
									],
									[
										253183,
										253184
									],
									[
										253266,
										253267
									],
									[
										253301,
										253302
									],
									[
										253315,
										253316
									],
									[
										253334,
										253335
									],
									[
										253415,
										253416
									],
									[
										253443,
										253444
									],
									[
										253454,
										253455
									],
									[
										253473,
										253474
									],
									[
										253577,
										253578
									],
									[
										253643,
										253644
									],
									[
										253655,
										253656
									],
									[
										253729,
										253730
									],
									[
										253809,
										253810
									],
									[
										253846,
										253847
									],
									[
										253858,
										253859
									],
									[
										253877,
										253878
									],
									[
										253950,
										253951
									],
									[
										253963,
										253964
									],
									[
										253974,
										253975
									],
									[
										253993,
										253994
									],
									[
										254070,
										254071
									],
									[
										254083,
										254084
									],
									[
										254094,
										254095
									],
									[
										254113,
										254114
									],
									[
										254186,
										254187
									],
									[
										254199,
										254200
									],
									[
										254210,
										254211
									],
									[
										254229,
										254230
									],
									[
										254304,
										254305
									],
									[
										254317,
										254318
									],
									[
										254328,
										254329
									],
									[
										254347,
										254348
									],
									[
										254419,
										254420
									],
									[
										254440,
										254441
									],
									[
										254451,
										254452
									],
									[
										254575,
										254576
									],
									[
										254590,
										254591
									],
									[
										254680,
										254681
									],
									[
										254788,
										254789
									],
									[
										254807,
										254808
									],
									[
										254890,
										254891
									],
									[
										254919,
										254920
									],
									[
										254931,
										254932
									],
									[
										254950,
										254951
									],
									[
										255028,
										255029
									],
									[
										255061,
										255062
									],
									[
										255073,
										255074
									],
									[
										255092,
										255093
									],
									[
										255149,
										255150
									],
									[
										255190,
										255191
									],
									[
										255202,
										255203
									],
									[
										255221,
										255222
									],
									[
										255297,
										255298
									],
									[
										255325,
										255326
									],
									[
										255337,
										255338
									],
									[
										255356,
										255357
									],
									[
										255431,
										255432
									],
									[
										255462,
										255463
									],
									[
										255474,
										255475
									],
									[
										255493,
										255494
									],
									[
										255548,
										255549
									],
									[
										255586,
										255587
									],
									[
										255598,
										255599
									],
									[
										255688,
										255689
									],
									[
										255694,
										255695
									],
									[
										255736,
										255737
									],
									[
										255844,
										255845
									],
									[
										255863,
										255864
									],
									[
										255961,
										255962
									],
									[
										255990,
										255991
									],
									[
										256002,
										256003
									],
									[
										256023,
										256024
									],
									[
										256101,
										256102
									],
									[
										256134,
										256135
									],
									[
										256146,
										256147
									],
									[
										256165,
										256166
									],
									[
										256222,
										256223
									],
									[
										256263,
										256264
									],
									[
										256275,
										256276
									],
									[
										256294,
										256295
									],
									[
										256370,
										256371
									],
									[
										256398,
										256399
									],
									[
										256410,
										256411
									],
									[
										256429,
										256430
									],
									[
										256504,
										256505
									],
									[
										256535,
										256536
									],
									[
										256547,
										256548
									],
									[
										256566,
										256567
									],
									[
										256621,
										256622
									],
									[
										256659,
										256660
									],
									[
										256671,
										256672
									],
									[
										256698,
										256699
									],
									[
										256707,
										256708
									],
									[
										256801,
										256802
									],
									[
										256843,
										256844
									],
									[
										256861,
										256862
									],
									[
										256871,
										256872
									],
									[
										256956,
										256957
									],
									[
										256998,
										256999
									],
									[
										257016,
										257017
									],
									[
										257026,
										257027
									],
									[
										257139,
										257140
									],
									[
										257181,
										257182
									],
									[
										257199,
										257200
									],
									[
										257209,
										257210
									],
									[
										257398,
										257399
									],
									[
										257462,
										257463
									],
									[
										257478,
										257479
									],
									[
										257489,
										257490
									],
									[
										257506,
										257507
									],
									[
										257552,
										257553
									],
									[
										257573,
										257574
									],
									[
										257584,
										257585
									],
									[
										257601,
										257602
									],
									[
										257620,
										257621
									],
									[
										257637,
										257638
									],
									[
										257642,
										257643
									],
									[
										257659,
										257660
									],
									[
										257671,
										257672
									],
									[
										257688,
										257689
									],
									[
										257740,
										257741
									],
									[
										257762,
										257763
									],
									[
										257773,
										257774
									],
									[
										257790,
										257791
									],
									[
										257839,
										257840
									],
									[
										257858,
										257859
									],
									[
										257869,
										257870
									],
									[
										257886,
										257887
									],
									[
										257936,
										257937
									],
									[
										257956,
										257957
									],
									[
										257967,
										257968
									],
									[
										257984,
										257985
									],
									[
										258034,
										258035
									],
									[
										258054,
										258055
									],
									[
										258065,
										258066
									],
									[
										258082,
										258083
									],
									[
										258129,
										258130
									],
									[
										258138,
										258139
									],
									[
										258149,
										258150
									],
									[
										258166,
										258167
									],
									[
										258223,
										258224
									],
									[
										258247,
										258248
									],
									[
										258258,
										258259
									],
									[
										258275,
										258276
									],
									[
										258284,
										258285
									],
									[
										258417,
										258418
									],
									[
										258424,
										258425
									],
									[
										258427,
										258428
									],
									[
										258431,
										258432
									],
									[
										258434,
										258435
									],
									[
										258440,
										258441
									],
									[
										258475,
										258476
									],
									[
										258484,
										258485
									],
									[
										258487,
										258488
									],
									[
										258501,
										258502
									],
									[
										258504,
										258505
									],
									[
										258515,
										258516
									],
									[
										258518,
										258519
									],
									[
										258530,
										258531
									],
									[
										258533,
										258534
									],
									[
										258546,
										258547
									],
									[
										258696,
										258697
									],
									[
										258760,
										258761
									],
									[
										258781,
										258782
									],
									[
										258792,
										258793
									],
									[
										258917,
										258918
									],
									[
										258963,
										258964
									],
									[
										258989,
										258990
									],
									[
										259000,
										259001
									],
									[
										259020,
										259021
									],
									[
										259039,
										259040
									],
									[
										259061,
										259062
									],
									[
										259066,
										259067
									],
									[
										259088,
										259089
									],
									[
										259100,
										259101
									],
									[
										259120,
										259121
									],
									[
										259172,
										259173
									],
									[
										259199,
										259200
									],
									[
										259210,
										259211
									],
									[
										259230,
										259231
									],
									[
										259279,
										259280
									],
									[
										259303,
										259304
									],
									[
										259314,
										259315
									],
									[
										259334,
										259335
									],
									[
										259384,
										259385
									],
									[
										259409,
										259410
									],
									[
										259420,
										259421
									],
									[
										259440,
										259441
									],
									[
										259490,
										259491
									],
									[
										259515,
										259516
									],
									[
										259526,
										259527
									],
									[
										259546,
										259547
									],
									[
										259593,
										259594
									],
									[
										259602,
										259603
									],
									[
										259613,
										259614
									],
									[
										259633,
										259634
									],
									[
										259690,
										259691
									],
									[
										259719,
										259720
									],
									[
										259730,
										259731
									],
									[
										259758,
										259759
									],
									[
										259767,
										259768
									],
									[
										259853,
										259854
									],
									[
										259895,
										259896
									],
									[
										259913,
										259914
									],
									[
										259923,
										259924
									],
									[
										260007,
										260008
									],
									[
										260012,
										260013
									],
									[
										260039,
										260040
									],
									[
										260065,
										260066
									],
									[
										260130,
										260131
									],
									[
										260135,
										260136
									],
									[
										260143,
										260144
									],
									[
										260162,
										260163
									],
									[
										260176,
										260177
									],
									[
										260188,
										260189
									],
									[
										260195,
										260196
									],
									[
										260197,
										260198
									],
									[
										260308,
										260309
									],
									[
										260313,
										260314
									],
									[
										260321,
										260322
									],
									[
										260340,
										260341
									],
									[
										260354,
										260355
									],
									[
										260366,
										260367
									],
									[
										260373,
										260374
									],
									[
										260375,
										260376
									],
									[
										260486,
										260487
									],
									[
										260491,
										260492
									],
									[
										260499,
										260500
									],
									[
										260518,
										260519
									],
									[
										260532,
										260533
									],
									[
										260544,
										260545
									],
									[
										260551,
										260552
									],
									[
										260553,
										260554
									],
									[
										260664,
										260665
									],
									[
										260669,
										260670
									],
									[
										260677,
										260678
									],
									[
										260696,
										260697
									],
									[
										260710,
										260711
									],
									[
										260722,
										260723
									],
									[
										260729,
										260730
									],
									[
										260731,
										260732
									],
									[
										260842,
										260843
									],
									[
										260847,
										260848
									],
									[
										260855,
										260856
									],
									[
										260874,
										260875
									],
									[
										260888,
										260889
									],
									[
										260900,
										260901
									],
									[
										260907,
										260908
									],
									[
										260909,
										260910
									],
									[
										261020,
										261021
									],
									[
										261027,
										261028
									],
									[
										261035,
										261036
									],
									[
										261055,
										261056
									],
									[
										261189,
										261190
									],
									[
										261205,
										261206
									],
									[
										261329,
										261330
									],
									[
										261333,
										261334
									],
									[
										261409,
										261410
									],
									[
										261418,
										261419
									],
									[
										261514,
										261515
									],
									[
										261578,
										261579
									],
									[
										261602,
										261603
									],
									[
										261613,
										261614
									],
									[
										261795,
										261796
									],
									[
										261804,
										261805
									],
									[
										261825,
										261826
									],
									[
										261834,
										261835
									],
									[
										261864,
										261865
									],
									[
										261912,
										261913
									],
									[
										261933,
										261934
									],
									[
										261944,
										261945
									],
									[
										261964,
										261965
									],
									[
										262022,
										262023
									],
									[
										262052,
										262053
									],
									[
										262063,
										262064
									],
									[
										262083,
										262084
									],
									[
										262141,
										262142
									],
									[
										262158,
										262159
									],
									[
										262168,
										262169
									],
									[
										262184,
										262185
									],
									[
										262195,
										262196
									],
									[
										262215,
										262216
									],
									[
										262270,
										262271
									],
									[
										262317,
										262318
									],
									[
										262328,
										262329
									],
									[
										262348,
										262349
									],
									[
										262402,
										262403
									],
									[
										262426,
										262427
									],
									[
										262437,
										262438
									],
									[
										262457,
										262458
									],
									[
										262485,
										262486
									],
									[
										262505,
										262506
									],
									[
										262563,
										262564
									],
									[
										262592,
										262593
									],
									[
										262604,
										262605
									],
									[
										262624,
										262625
									],
									[
										262677,
										262678
									],
									[
										262710,
										262711
									],
									[
										262722,
										262723
									],
									[
										262742,
										262743
									],
									[
										262799,
										262800
									],
									[
										262840,
										262841
									],
									[
										262852,
										262853
									],
									[
										262872,
										262873
									],
									[
										262923,
										262924
									],
									[
										262951,
										262952
									],
									[
										262963,
										262964
									],
									[
										262983,
										262984
									],
									[
										263033,
										263034
									],
									[
										263064,
										263065
									],
									[
										263076,
										263077
									],
									[
										263104,
										263105
									],
									[
										263113,
										263114
									],
									[
										263199,
										263200
									],
									[
										263241,
										263242
									],
									[
										263259,
										263260
									],
									[
										263269,
										263270
									],
									[
										263673,
										263678
									],
									[
										264088,
										264098
									],
									[
										264296,
										264306
									],
									[
										264519,
										264529
									],
									[
										264730,
										264740
									],
									[
										264837,
										264847
									],
									[
										265404,
										265414
									],
									[
										265560,
										265570
									],
									[
										265697,
										265707
									],
									[
										265717,
										265727
									],
									[
										265886,
										265896
									],
									[
										266100,
										266110
									],
									[
										266308,
										266318
									],
									[
										266366,
										266376
									],
									[
										266590,
										266600
									],
									[
										266616,
										266626
									],
									[
										266801,
										266811
									],
									[
										266822,
										266832
									],
									[
										266921,
										266931
									],
									[
										267103,
										267113
									],
									[
										267393,
										267403
									],
									[
										267820,
										267830
									],
									[
										268103,
										268113
									],
									[
										268293,
										268303
									],
									[
										268475,
										268485
									],
									[
										268563,
										268573
									],
									[
										268779,
										268789
									],
									[
										268967,
										268977
									],
									[
										269246,
										269256
									],
									[
										269512,
										269522
									],
									[
										269809,
										269819
									],
									[
										270031,
										270041
									],
									[
										270129,
										270139
									],
									[
										270225,
										270235
									],
									[
										270304,
										270314
									],
									[
										270324,
										270334
									],
									[
										270598,
										270609
									],
									[
										270780,
										270791
									],
									[
										270999,
										271010
									],
									[
										271291,
										271299
									],
									[
										271474,
										271482
									],
									[
										271686,
										271694
									],
									[
										271702,
										271710
									],
									[
										271939,
										271949
									],
									[
										272115,
										272125
									],
									[
										272428,
										272438
									],
									[
										272604,
										272614
									],
									[
										272917,
										272927
									],
									[
										273092,
										273101
									],
									[
										273199,
										273208
									],
									[
										273335,
										273344
									],
									[
										273530,
										273538
									],
									[
										273620,
										273628
									],
									[
										273878,
										273902
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								273889,
								273889
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 27,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 110754.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 48,
					"file": "shared.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12142,
						"regions":
						{
						},
						"selection":
						[
							[
								9007,
								9007
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"history_list_is_closing": true,
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 4868.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 49,
					"file": "server/systems/weapons/plasma.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3719,
						"regions":
						{
						},
						"selection":
						[
							[
								1137,
								1137
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 52,
					"type": "text"
				},
				{
					"buffer": 50,
					"file": "flights.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17530,
						"regions":
						{
						},
						"selection":
						[
							[
								17529,
								17529
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 8444.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 51,
					"file": "server/systems/weapons/ammo.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4030,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"history_list_is_closing": true,
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 151.0,
						"zoom_level": 1.0
					},
					"stack_index": 101,
					"type": "text"
				}
			]
		},
		{
			"selected": 8,
			"sheets":
			[
				{
					"buffer": 52,
					"file": "server/ships/avenger.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3473,
						"regions":
						{
						},
						"selection":
						[
							[
								3081,
								3081
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 42.0,
						"zoom_level": 1.0
					},
					"stack_index": 45,
					"type": "text"
				},
				{
					"buffer": 38,
					"file": "server/salvo.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1654,
						"regions":
						{
						},
						"selection":
						[
							[
								1235,
								1235
							]
						],
						"settings":
						{
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 260.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "mixed.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14179,
						"regions":
						{
						},
						"selection":
						[
							[
								8357,
								8357
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 4261.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 27,
					"file": "server/systems/weapons/dual.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2688,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 106,
					"type": "text"
				},
				{
					"buffer": 37,
					"file": "server/ship.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 31189,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 140.0,
						"zoom_level": 1.0
					},
					"stack_index": 83,
					"type": "text"
				},
				{
					"buffer": 30,
					"file": "server/systems/weapon.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4497,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 28.0,
						"zoom_level": 1.0
					},
					"stack_index": 82,
					"type": "text"
				},
				{
					"buffer": 45,
					"file": "lobby.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8127,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 238.0,
						"zoom_level": 1.0
					},
					"stack_index": 65,
					"type": "text"
				},
				{
					"buffer": 53,
					"file": "autoload.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7294,
						"regions":
						{
						},
						"selection":
						[
							[
								491,
								491
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 51,
					"type": "text"
				},
				{
					"buffer": 54,
					"file": "log.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5637,
						"regions":
						{
						},
						"selection":
						[
							[
								138,
								138
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 1008.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 55,
					"file": "server/dbManager.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 52901,
						"regions":
						{
						},
						"selection":
						[
							[
								1121,
								1121
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"history_list_is_closing": true,
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 185.0,
						"zoom_level": 1.0
					},
					"stack_index": 63,
					"type": "text"
				},
				{
					"buffer": 40,
					"file": "graphics.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8626,
						"regions":
						{
						},
						"selection":
						[
							[
								7581,
								7581
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"spell_check": true,
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3413.0,
						"zoom_level": 1.0
					},
					"stack_index": 73,
					"type": "text"
				},
				{
					"buffer": 31,
					"file": "server/systems/weapons/em.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2481,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 605.0,
						"zoom_level": 1.0
					},
					"stack_index": 87,
					"type": "text"
				},
				{
					"buffer": 29,
					"file": "server/systems/system.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5697,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2168.0,
						"zoom_level": 1.0
					},
					"stack_index": 68,
					"type": "text"
				},
				{
					"buffer": 25,
					"file": "server/systems/structure.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5299,
						"regions":
						{
						},
						"selection":
						[
							[
								2905,
								2905
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1545.0,
						"zoom_level": 1.0
					},
					"stack_index": 48,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "shipclasses.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 84965,
						"regions":
						{
						},
						"selection":
						[
							[
								72791,
								72791
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 35075.0,
						"zoom_level": 1.0
					},
					"stack_index": 27,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "systems.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 88832,
						"regions":
						{
						},
						"selection":
						[
							[
								18704,
								18704
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 9326.0,
						"zoom_level": 1.0
					},
					"stack_index": 26,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "mathLib.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6275,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1844.0,
						"zoom_level": 1.0
					},
					"stack_index": 94,
					"type": "text"
				},
				{
					"buffer": 56,
					"file": "server/ships/altarian.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2268,
						"regions":
						{
						},
						"selection":
						[
							[
								486,
								486
							]
						],
						"settings":
						{
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 46,
					"type": "text"
				},
				{
					"buffer": 32,
					"file": "server/systems/weapons/area.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1057,
						"regions":
						{
						},
						"selection":
						[
							[
								564,
								564
							]
						],
						"settings":
						{
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 95,
					"type": "text"
				},
				{
					"buffer": 55,
					"file": "server/dbManager.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 52901,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"history_list_is_closing": true,
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 11808.0,
						"zoom_level": 1.0
					},
					"stack_index": 72,
					"type": "text"
				},
				{
					"buffer": 57,
					"file": "server/ships/darkner.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1617,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 70.0,
						"zoom_level": 1.0
					},
					"stack_index": 44,
					"type": "text"
				},
				{
					"buffer": 40,
					"file": "graphics.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8626,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"spell_check": true,
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 105,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "classes.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15680,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2615.0,
						"zoom_level": 1.0
					},
					"stack_index": 76,
					"type": "text"
				},
				{
					"buffer": 28,
					"file": "cam.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2799,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 294.0,
						"zoom_level": 1.0
					},
					"stack_index": 61,
					"type": "text"
				},
				{
					"buffer": 46,
					"file": "game.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 68668,
						"regions":
						{
						},
						"selection":
						[
							[
								50095,
								50095
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"history_list_is_closing": true,
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 26423.0,
						"zoom_level": 1.0
					},
					"stack_index": 24,
					"type": "text"
				},
				{
					"buffer": 48,
					"file": "shared.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12142,
						"regions":
						{
						},
						"selection":
						[
							[
								9186,
								9186
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"history_list_is_closing": true,
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 5017.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "salvo.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9307,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 58,
					"file": "gameSetup.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17232,
						"regions":
						{
						},
						"selection":
						[
							[
								6293,
								6293
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2752.0,
						"zoom_level": 1.0
					},
					"stack_index": 53,
					"type": "text"
				},
				{
					"buffer": 59,
					"file": "server/ships/tinashi.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2321,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 222.0,
						"zoom_level": 1.0
					},
					"stack_index": 33,
					"type": "text"
				},
				{
					"buffer": 60,
					"file": "server/ships/sharlin.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3653,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 775.0,
						"zoom_level": 1.0
					},
					"stack_index": 35,
					"type": "text"
				},
				{
					"buffer": 61,
					"file": "server/ships/whitestar.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1773,
						"regions":
						{
						},
						"selection":
						[
							[
								460,
								460
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 128.0,
						"zoom_level": 1.0
					},
					"stack_index": 31,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "server/math.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3193,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 97,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "server/classes.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5274,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"auto_name": "<?php",
							"bh_regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 64.0,
						"zoom_level": 1.0
					},
					"stack_index": 89,
					"type": "text"
				},
				{
					"buffer": 62,
					"file": "server/ships/primus.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2652,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 63.0,
						"zoom_level": 1.0
					},
					"stack_index": 37,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "game.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 22940,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 25.0,
						"zoom_level": 1.0
					},
					"stack_index": 91,
					"type": "text"
				},
				{
					"buffer": 63,
					"file": "server/ships/demos.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1898,
						"regions":
						{
						},
						"selection":
						[
							[
								447,
								447
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 43,
					"type": "text"
				},
				{
					"buffer": 64,
					"file": "server/ships/vorchan.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1654,
						"regions":
						{
						},
						"selection":
						[
							[
								614,
								625
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 32,
					"type": "text"
				},
				{
					"buffer": 65,
					"file": "server/ships/haven.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1539,
						"regions":
						{
						},
						"selection":
						[
							[
								466,
								467
							]
						],
						"settings":
						{
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 41,
					"type": "text"
				},
				{
					"buffer": 66,
					"file": "server/systems/weapons/linked.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3139,
						"regions":
						{
						},
						"selection":
						[
							[
								731,
								731
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 285.0,
						"zoom_level": 1.0
					},
					"stack_index": 54,
					"type": "text"
				},
				{
					"buffer": 50,
					"file": "flights.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17530,
						"regions":
						{
						},
						"selection":
						[
							[
								1265,
								1265
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 282.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "server/flight.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1800,
						"regions":
						{
						},
						"selection":
						[
							[
								218,
								218
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"auto_name": "<?php",
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 51,
					"file": "server/systems/weapons/ammo.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4030,
						"regions":
						{
						},
						"selection":
						[
							[
								516,
								516
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"history_list_is_closing": true,
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 49,
					"type": "text"
				},
				{
					"buffer": 36,
					"file": "server/fighter.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4488,
						"regions":
						{
						},
						"selection":
						[
							[
								3412,
								3412
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"auto_name": "<php",
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1520.0,
						"zoom_level": 1.0
					},
					"stack_index": 55,
					"type": "text"
				},
				{
					"buffer": 0,
					"file": "ajax.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7178,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1905.0,
						"zoom_level": 1.0
					},
					"stack_index": 86,
					"type": "text"
				},
				{
					"buffer": 67,
					"file": "getGameData.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 761,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 107,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "server/manager.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 47304,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2531.0,
						"zoom_level": 1.0
					},
					"stack_index": 64,
					"type": "text"
				},
				{
					"buffer": 68,
					"file": "shiptest.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6815,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 30.0,
						"zoom_level": 1.0
					},
					"stack_index": 93,
					"type": "text"
				},
				{
					"buffer": 69,
					"file": "combattest.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2850,
						"regions":
						{
						},
						"selection":
						[
							[
								2685,
								2685
							]
						],
						"settings":
						{
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 100.0,
						"zoom_level": 1.0
					},
					"stack_index": 100,
					"type": "text"
				},
				{
					"buffer": 70,
					"file": "server/ships/gquan.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2690,
						"regions":
						{
						},
						"selection":
						[
							[
								1248,
								1248
							]
						],
						"settings":
						{
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 73.0,
						"zoom_level": 1.0
					},
					"stack_index": 42,
					"type": "text"
				},
				{
					"buffer": 71,
					"file": "index.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2382,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 385.0,
						"zoom_level": 1.0
					},
					"stack_index": 110,
					"type": "text"
				},
				{
					"buffer": 35,
					"file": "server/systems/weapons/launcher.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1982,
						"regions":
						{
						},
						"selection":
						[
							[
								186,
								186
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 50,
					"type": "text"
				},
				{
					"buffer": 72,
					"file": "balltest.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1297,
						"regions":
						{
						},
						"selection":
						[
							[
								198,
								198
							]
						],
						"settings":
						{
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 109,
					"type": "text"
				},
				{
					"buffer": 73,
					"file": "systemtest.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3559,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 48.0,
						"zoom_level": 1.0
					},
					"stack_index": 60,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "server/systems/weapons/particle.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2968,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 92,
					"type": "text"
				},
				{
					"buffer": 34,
					"file": "server/systems/weapons/laser.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6750,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"history_list_is_closing": true,
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 82.0,
						"zoom_level": 1.0
					},
					"stack_index": 98,
					"type": "text"
				},
				{
					"buffer": 39,
					"file": "server/systems/weapons/pulse.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4270,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 84,
					"type": "text"
				},
				{
					"buffer": 49,
					"file": "server/systems/weapons/plasma.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3719,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 102,
					"type": "text"
				},
				{
					"buffer": 74,
					"file": "server/systems/weapons/matter.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2261,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 96,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 22.0
	},
	"input":
	{
		"height": 34.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.407878831674,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "p1.sublime-project",
	"replace":
	{
		"height": 40.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"log",
				"C:\\xampp\\htdocs\\fire\\log.txt"
			],
			[
				"sal",
				"C:\\xampp\\htdocs\\fire\\server\\salvo.php"
			],
			[
				"mix",
				"C:\\xampp\\htdocs\\fire\\mixed.js"
			],
			[
				"salvo",
				"C:\\xampp\\htdocs\\fire\\salvo.js"
			],
			[
				"fl",
				"C:\\xampp\\htdocs\\fire\\server\\flight.php"
			],
			[
				"sh",
				"C:\\xampp\\htdocs\\fire\\server\\ship.php"
			],
			[
				"game.js",
				"C:\\xampp\\htdocs\\fire\\game.js"
			],
			[
				"share",
				"C:\\xampp\\htdocs\\fire\\shared.js"
			],
			[
				"flig",
				"C:\\xampp\\htdocs\\fire\\server\\flight.php"
			],
			[
				"laser",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\weapons\\laser.php"
			],
			[
				"shar",
				"C:\\xampp\\htdocs\\fire\\shared.js"
			],
			[
				"sty",
				"C:\\xampp\\htdocs\\fire\\style.css"
			],
			[
				"sys",
				"C:\\xampp\\htdocs\\fire\\systems.js"
			],
			[
				"style",
				"C:\\xampp\\htdocs\\fire\\style.css"
			],
			[
				"styl",
				"C:\\xampp\\htdocs\\fire\\style.css"
			],
			[
				"part",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\weapons\\particle.php"
			],
			[
				"pul",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\weapons\\pulse.php"
			],
			[
				"puls",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\weapons\\pulse.php"
			],
			[
				"art",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\weapons\\particle.php"
			],
			[
				"light",
				"C:\\xampp\\htdocs\\fire\\flights.js"
			],
			[
				"ga",
				"C:\\xampp\\htdocs\\fire\\game.php"
			],
			[
				"st",
				"C:\\xampp\\htdocs\\fire\\style.css"
			],
			[
				"game",
				"C:\\xampp\\htdocs\\fire\\game.php"
			],
			[
				"aja",
				"C:\\xampp\\htdocs\\fire\\ajax.js"
			],
			[
				"hyp",
				"C:\\xampp\\htdocs\\fire\\server\\ships\\hyperion.php"
			],
			[
				"vorc",
				"C:\\xampp\\htdocs\\fire\\server\\ships\\vorchan.php"
			],
			[
				"amm",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\weapons\\ammo.php"
			],
			[
				"lau",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\weapons\\launcher.php"
			],
			[
				"oly",
				"C:\\xampp\\htdocs\\fire\\server\\ships\\olympus.php"
			],
			[
				"vopr",
				"C:\\xampp\\htdocs\\fire\\server\\ships\\vorchan.php"
			],
			[
				"hav",
				"C:\\xampp\\htdocs\\fire\\server\\ships\\haven.php"
			],
			[
				"vor",
				"C:\\xampp\\htdocs\\fire\\server\\ships\\vorchan.php"
			],
			[
				"plas",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\weapons\\plasma.php"
			],
			[
				"dem",
				"C:\\xampp\\htdocs\\fire\\server\\ships\\demos.php"
			],
			[
				"games",
				"C:\\xampp\\htdocs\\fire\\gameSetup.php"
			],
			[
				"mixe",
				"C:\\xampp\\htdocs\\fire\\mixed.js"
			],
			[
				"figt",
				"C:\\xampp\\htdocs\\fire\\server\\fighter.php"
			],
			[
				"par",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\weapons\\particle.php"
			],
			[
				"man",
				"C:\\xampp\\htdocs\\fire\\server\\manager.php"
			],
			[
				"plasma",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\weapons\\plasma.php"
			],
			[
				"tet",
				"C:\\xampp\\htdocs\\fire\\server\\ships\\tethys.php"
			],
			[
				"teth",
				"C:\\xampp\\htdocs\\fire\\server\\ships\\tethys.php"
			],
			[
				"alt",
				"C:\\xampp\\htdocs\\fire\\server\\ships\\altarian.php"
			],
			[
				"sjh",
				"C:\\xampp\\htdocs\\fire\\shipclasses.js"
			],
			[
				"gam",
				"C:\\xampp\\htdocs\\fire\\game.js"
			],
			[
				"clas",
				"C:\\xampp\\htdocs\\fire\\classes.js"
			],
			[
				"fgl",
				"C:\\xampp\\htdocs\\fire\\flights.js"
			],
			[
				"cam",
				"C:\\xampp\\htdocs\\fire\\cam.js"
			],
			[
				"sha",
				"C:\\xampp\\htdocs\\fire\\shared.js"
			],
			[
				"",
				"C:\\xampp\\htdocs\\fire\\systems.js"
			],
			[
				"shared",
				"C:\\xampp\\htdocs\\fire\\shared.js"
			],
			[
				"game.",
				"C:\\xampp\\htdocs\\fire\\game.php"
			],
			[
				"las",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\weapons\\laser.php"
			],
			[
				"lobb",
				"C:\\xampp\\htdocs\\fire\\lobby.php"
			],
			[
				"lob",
				"C:\\xampp\\htdocs\\fire\\lobby.php"
			],
			[
				"db",
				"C:\\xampp\\htdocs\\fire\\server\\dbManager.php"
			],
			[
				"po",
				"C:\\xampp\\htdocs\\fire\\postGameData.php"
			],
			[
				"php",
				"C:\\xampp\\htdocs\\fire\\lobby.php"
			],
			[
				"d",
				"C:\\xampp\\htdocs\\fire\\server\\dbManager.php"
			],
			[
				"pos",
				"C:\\xampp\\htdocs\\fire\\postGameData.php"
			],
			[
				"mana",
				"C:\\xampp\\htdocs\\fire\\server\\manager.php"
			],
			[
				"post",
				"C:\\xampp\\htdocs\\fire\\postGameData.php"
			],
			[
				"lo",
				"C:\\xampp\\htdocs\\fire\\lobby.php"
			],
			[
				"de",
				"C:\\xampp\\htdocs\\fire\\server\\debug.php"
			],
			[
				"stru",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\structure.php"
			],
			[
				"fig",
				"C:\\xampp\\htdocs\\fire\\server\\fighter.php"
			],
			[
				"war",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\weapons\\launcher.php"
			],
			[
				"deb",
				"C:\\xampp\\htdocs\\fire\\server\\debug.php"
			],
			[
				"ome",
				"C:\\xampp\\htdocs\\fire\\server\\ships\\omega.php"
			],
			[
				"mx",
				"C:\\xampp\\htdocs\\fire\\mixed.js"
			],
			[
				"ima",
				"C:\\xampp\\htdocs\\fire\\imageloader.js"
			],
			[
				"fight",
				"C:\\xampp\\htdocs\\fire\\flights.js"
			],
			[
				"mag",
				"C:\\xampp\\htdocs\\fire\\server\\manager.php"
			],
			[
				"pr",
				"C:\\xampp\\htdocs\\fire\\server\\ships\\primus.php"
			],
			[
				"game.php",
				"C:\\xampp\\htdocs\\fire\\game.php"
			],
			[
				"pri",
				"C:\\xampp\\htdocs\\fire\\server\\ships\\primus.php"
			],
			[
				"nn",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\nonweapon.php"
			],
			[
				"cla",
				"C:\\xampp\\htdocs\\fire\\server\\classes.php"
			],
			[
				"fi",
				"C:\\xampp\\htdocs\\fire\\server\\fighter.php"
			],
			[
				"lgo",
				"C:\\xampp\\htdocs\\fire\\log.txt"
			],
			[
				"ave",
				"C:\\xampp\\htdocs\\fire\\server\\ships\\avenger.php"
			],
			[
				"scr",
				"C:\\xampp\\htdocs\\fire\\script.js"
			],
			[
				"sy",
				"C:\\xampp\\htdocs\\fire\\systems.js"
			],
			[
				"str",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\structure.php"
			],
			[
				"ma",
				"C:\\xampp\\htdocs\\fire\\server\\manager.php"
			],
			[
				"gr",
				"C:\\xampp\\htdocs\\fire\\graphics.js"
			],
			[
				"qu",
				"C:\\xampp\\htdocs\\fire\\server\\ships\\gquan.php"
			],
			[
				"gqu",
				"C:\\xampp\\htdocs\\fire\\server\\ships\\gquan.php"
			],
			[
				"av",
				"C:\\xampp\\htdocs\\fire\\server\\ships\\avenger.php"
			],
			[
				"w",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\weapon.php"
			],
			[
				"sc",
				"C:\\xampp\\htdocs\\fire\\script.js"
			],
			[
				"auto",
				"C:\\xampp\\htdocs\\fire\\autoload.php"
			],
			[
				"f",
				"C:\\xampp\\htdocs\\fire\\flights.js"
			],
			[
				"s",
				"C:\\xampp\\htdocs\\fire\\shipclasses.js"
			],
			[
				"sa",
				"C:\\xampp\\htdocs\\fire\\server\\salvo.php"
			],
			[
				"cl",
				"C:\\xampp\\htdocs\\fire\\server\\classes.php"
			],
			[
				"g",
				"C:\\xampp\\htdocs\\fire\\game.js"
			],
			[
				"math",
				"C:\\xampp\\htdocs\\fire\\server\\math.php"
			],
			[
				"gme",
				"C:\\xampp\\htdocs\\fire\\game.js"
			],
			[
				"pa",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\weapons\\particle.php"
			],
			[
				"non",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\nonweapon.php"
			],
			[
				"nonw",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\nonweapon.php"
			],
			[
				"scri",
				"C:\\xampp\\htdocs\\fire\\script.js"
			],
			[
				"matt",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\weapons\\matter.php"
			],
			[
				"mat",
				"C:\\xampp\\htdocs\\fire\\server\\math.php"
			],
			[
				"gq",
				"C:\\xampp\\htdocs\\fire\\server\\ships\\gquan.php"
			],
			[
				"tina",
				"C:\\xampp\\htdocs\\fire\\server\\ships\\tinashi.php"
			],
			[
				"sen",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\nonweapon.php"
			],
			[
				"dual",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\weapons\\dual.php"
			],
			[
				"gae",
				"C:\\xampp\\htdocs\\fire\\game.php"
			],
			[
				"we",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\weapon.php"
			],
			[
				"ar",
				"C:\\xampp\\htdocs\\fire\\server\\ships\\artemis.php"
			],
			[
				"mis",
				"C:\\xampp\\htdocs\\fire\\systemtest.php"
			],
			[
				"laun",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\weapons\\launcher.php"
			],
			[
				"partic",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\weapons\\particle.php"
			],
			[
				"com",
				"C:\\xampp\\htdocs\\fire\\combattest.php"
			],
			[
				"test",
				"C:\\xampp\\htdocs\\fire\\shiptest.php"
			],
			[
				"am",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\weapons\\ammo.php"
			],
			[
				"la",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\weapons\\laser.php"
			],
			[
				"tin",
				"C:\\xampp\\htdocs\\fire\\server\\ships\\tinashi.php"
			],
			[
				"pu",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\weapons\\pulse.php"
			],
			[
				"wea",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\weapon.php"
			],
			[
				"whit",
				"C:\\xampp\\htdocs\\fire\\server\\ships\\whitestar.php"
			],
			[
				"grap",
				"C:\\xampp\\htdocs\\fire\\graphics.js"
			],
			[
				"lasma",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\weapons\\plasma.php"
			],
			[
				"gra",
				"C:\\xampp\\htdocs\\fire\\graphics.js"
			],
			[
				"og",
				"C:\\xampp\\htdocs\\fire\\log.txt"
			],
			[
				"aven",
				"C:\\xampp\\htdocs\\fire\\server\\ships\\avenger.php"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 392.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 171.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
