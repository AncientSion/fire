{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"el",
				"elapsed"
			],
			[
				"dr",
				"drawTrajectory"
			],
			[
				"assemble",
				"assembleBallistics"
			],
			[
				"move",
				"movementResolved"
			],
			[
				"getHit",
				"getHitSection"
			],
			[
				"getMis",
				"getMissionTypeString"
			],
			[
				"setPostMo",
				"setPostMoveImage"
			],
			[
				"geu",
				"getUnitById"
			],
			[
				"getUnt",
				"getUnitById"
			],
			[
				"order",
				"ordered"
			],
			[
				"target",
				"targetid"
			],
			[
				"dodepl",
				"doDeployFlight"
			],
			[
				"reset",
				"resetHover"
			],
			[
				"getU",
				"getUnitByClick"
			],
			[
				"hasInvali",
				"hasInvalidPower"
			],
			[
				"confirm",
				"confirmFiringOrders"
			],
			[
				"unit",
				"unitSize"
			],
			[
				"getPo",
				"getPowerReq"
			],
			[
				"font-s",
				"font-size"
			],
			[
				"getRema",
				"getRemainingDelay"
			],
			[
				"getRem",
				"getCurrentImpulse"
			],
			[
				"getRemain",
				"getRemainingEP"
			],
			[
				"add",
				"addClass"
			],
			[
				"getRe",
				"getReinforcements"
			],
			[
				"getAmg",
				"getAngleFromTo"
			],
			[
				"getPositi",
				"getCurrentPosition"
			],
			[
				"col",
				"colspan"
			],
			[
				"gethit",
				"getHitSystem"
			],
			[
				"fire",
				"handleFireClick"
			],
			[
				"getpla",
				"getPlannedPosition"
			],
			[
				"getBase",
				"getBaseOffsetPos"
			],
			[
				"play",
				"playerName"
			],
			[
				"getbase",
				"getBaseOffsetPos"
			],
			[
				"setPre",
				"setPreMovePosition"
			],
			[
				"bac",
				"background-color"
			],
			[
				"getImp",
				"getImpulseStep"
			],
			[
				"ren",
				"reinforce"
			],
			[
				"setRemain",
				"setRemainingDelay"
			],
			[
				"remai",
				"remainingDelay"
			],
			[
				"rema",
				"remainingImpulse"
			],
			[
				"remaining",
				"remainingImpulse"
			],
			[
				"stroke",
				"strokeStyle"
			],
			[
				"getRei",
				"getReinforcementShips"
			],
			[
				"draw",
				"drawSystemAxis"
			],
			[
				"font-",
				"font-size"
			],
			[
				"se",
				"select"
			],
			[
				"roate",
				"rotate270size90"
			],
			[
				"getre",
				"getRemainingImpulse"
			],
			[
				"getImpu",
				"getImpulseChangeCost"
			],
			[
				"getTurn",
				"getMaxTurnAngle"
			],
			[
				"turn",
				"turnAngle"
			],
			[
				"baseI",
				"baseImpulseCost"
			],
			[
				"getPlann",
				"getPlannedPosition"
			],
			[
				"getPlanned",
				"getPlannedPosition"
			],
			[
				"switchM",
				"switchTurnMode"
			],
			[
				"getPla",
				"getPlannedPosition"
			],
			[
				"getD",
				"getDefensiveBonus"
			],
			[
				"to",
				"totalDmg"
			],
			[
				"getEW",
				"getEWMode"
			],
			[
				"getBoost",
				"getBoostEffectElements"
			],
			[
				"getOutputmod",
				"getOutputModeMods"
			],
			[
				"Db",
				"DBManager"
			],
			[
				"getSystem",
				"getSystemByName"
			],
			[
				"initDe",
				"initDeploymentWrapper"
			],
			[
				"getC",
				"getCurrentReinforceCost"
			],
			[
				"parentI",
				"parentIntegrity"
			],
			[
				"impul",
				"impulseString"
			],
			[
				"isIn",
				"isInEWArc"
			],
			[
				"getBas",
				"getBaseOffsetPos"
			],
			[
				"power",
				"powerReq"
			],
			[
				"DBM",
				"DBManager"
			],
			[
				"drawMove",
				"drawMoveRange"
			],
			[
				"back",
				"background-color"
			],
			[
				"remove",
				"removeClass"
			],
			[
				"resol",
				"resolveBallisticFireOrder"
			],
			[
				"getOut",
				"getOutput"
			],
			[
				"getAc",
				"getActiveLocks"
			],
			[
				"getElement",
				"getElementsByClassName"
			],
			[
				"senSor",
				"checkSensorHighlight"
			],
			[
				"r",
				"echoReturn"
			],
			[
				"Salv",
				"salvoCtx"
			],
			[
				"salvo",
				"salvoCtx"
			],
			[
				"getUni",
				"getUnitById"
			],
			[
				"ele",
				"element"
			],
			[
				"getSyste",
				"getSystemByName"
			],
			[
				"pro",
				"prototype"
			],
			[
				"pto",
				"prototype"
			],
			[
				"getout",
				"getOutputUsage"
			],
			[
				"traver",
				"traverseMod"
			],
			[
				"getimda",
				"getAimDataLocation"
			],
			[
				"getAimData",
				"getAimDataTarget"
			],
			[
				"getTrav",
				"getTraverseRating"
			],
			[
				"getTraverse",
				"getTraverseRating"
			],
			[
				"backg",
				"background"
			],
			[
				"var_",
				"var_export"
			],
			[
				"interc",
				"interceptVector"
			],
			[
				"getSyst",
				"getSystemDetailsDiv"
			],
			[
				"prio",
				"priority"
			],
			[
				"output",
				"outputMod"
			],
			[
				"setSystem",
				"setSystemImage"
			],
			[
				"getA",
				"getActiveWeapon"
			],
			[
				"outp",
				"outputMask"
			],
			[
				"getAcc",
				"getAccelSteps"
			],
			[
				"getBoos",
				"getBoostLevel"
			],
			[
				"reinfo",
				"reinforceTable"
			],
			[
				"damage",
				"damageInflicted"
			],
			[
				"sort",
				"sortBallistics"
			],
			[
				"intercept",
				"interceptDist"
			],
			[
				"canAd",
				"canAdvanceFromLobby"
			],
			[
				"weapon",
				"weaponLoadoutDiv"
			],
			[
				"open",
				"openGamesElement"
			],
			[
				"ongo",
				"ongoingGamesElement"
			],
			[
				"animateSh",
				"animateShipExplosions"
			],
			[
				"an",
				"animations"
			],
			[
				"class",
				"classname"
			],
			[
				"var",
				"var_dump"
			],
			[
				"getCrit",
				"getCritDuration"
			],
			[
				"z",
				"z-index"
			],
			[
				"glo",
				"globalCompositeOperation"
			],
			[
				"fps",
				"fpsInterval"
			],
			[
				"ballisti",
				"ballisticInterceptionHover"
			],
			[
				"drae",
				"drawBeamExplosion"
			],
			[
				"getReman",
				"getRemainingIntegrity"
			],
			[
				"getTurns",
				"getTurnStartPosition"
			],
			[
				"handle",
				"handleFireOrders"
			],
			[
				"has",
				"hasSystemsSelected"
			],
			[
				"getStruct",
				"getStructureById"
			],
			[
				"clasname",
				"classname"
			]
		]
	},
	"buffers":
	[
		{
			"file": "ajax.js",
			"settings":
			{
				"buffer_size": 5896,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/classes.php",
			"settings":
			{
				"buffer_size": 5249,
				"encoding": "UTF-8",
				"line_ending": "Windows",
				"name": "<?php"
			}
		},
		{
			"file": "classes.js",
			"settings":
			{
				"buffer_size": 15597,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "style.css",
			"settings":
			{
				"buffer_size": 20328,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "test.php",
			"settings":
			{
				"buffer_size": 2951,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "mixed.js",
			"settings":
			{
				"buffer_size": 13578,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "shipclasses.js",
			"settings":
			{
				"buffer_size": 84910,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "mathLib.js",
			"settings":
			{
				"buffer_size": 6014,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "global.php",
			"settings":
			{
				"buffer_size": 457,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/math.php",
			"settings":
			{
				"buffer_size": 3193,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/systems/weapons/particle.php",
			"settings":
			{
				"buffer_size": 3046,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/systems/weapons/em.php",
			"settings":
			{
				"buffer_size": 2481,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "game.php",
			"settings":
			{
				"buffer_size": 18255,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/flight.php",
			"settings":
			{
				"buffer_size": 1532,
				"encoding": "UTF-8",
				"line_ending": "Windows",
				"name": "<?php"
			}
		},
		{
			"file": "server/ships/darkner.php",
			"settings":
			{
				"buffer_size": 1619,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/ships/omega.php",
			"settings":
			{
				"buffer_size": 3748,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/ships/hyperion.php",
			"settings":
			{
				"buffer_size": 2775,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/ships/saggitarius.php",
			"settings":
			{
				"buffer_size": 2568,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/ships/artemis.php",
			"settings":
			{
				"buffer_size": 2273,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/ships/tethys.php",
			"settings":
			{
				"buffer_size": 1611,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "imageloader.js",
			"settings":
			{
				"buffer_size": 4540,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/ships/battlecrab.php",
			"settings":
			{
				"buffer_size": 1686,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/systems/structure.php",
			"settings":
			{
				"buffer_size": 5248,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "server/systems/weapons/dual.php",
			"settings":
			{
				"buffer_size": 2688,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "cam.js",
			"settings":
			{
				"buffer_size": 2399,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/systems/system.php",
			"settings":
			{
				"buffer_size": 4866,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/systems/weapon.php",
			"settings":
			{
				"buffer_size": 4819,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "server/systems/nonweapon.php",
			"settings":
			{
				"buffer_size": 5055,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/systems/weapons/laser.php",
			"settings":
			{
				"buffer_size": 6601,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "postGameData.php",
			"settings":
			{
				"buffer_size": 2952,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/salvo.php",
			"settings":
			{
				"buffer_size": 1614,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/mixed.php",
			"settings":
			{
				"buffer_size": 5993,
				"encoding": "UTF-8",
				"line_ending": "Windows",
				"name": "<?php"
			}
		},
		{
			"file": "server/fighter.php",
			"settings":
			{
				"buffer_size": 4485,
				"encoding": "UTF-8",
				"line_ending": "Windows",
				"name": "<php"
			}
		},
		{
			"file": "salvo.js",
			"settings":
			{
				"buffer_size": 9290,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/ship.php",
			"settings":
			{
				"buffer_size": 29303,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/systems/weapons/pulse.php",
			"settings":
			{
				"buffer_size": 4111,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "systems.js",
			"settings":
			{
				"buffer_size": 87162,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "graphics.js",
			"settings":
			{
				"buffer_size": 8389,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/ships/olympus.php",
			"settings":
			{
				"buffer_size": 1590,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "createGame.php",
			"settings":
			{
				"buffer_size": 1418,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "script.js",
			"settings":
			{
				"buffer_size": 16154,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "lobby.php",
			"settings":
			{
				"buffer_size": 6997,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "<?php\n\ninclude_once 'global.php';\n\nclass Manager {\n\tpublic $userid;\n\tpublic $gameid;\n\n\tpublic $name;\n\tpublic $status;\n\tpublic $turn;\n\tpublic $phase;\n\tpublic $pv;\n\tpublic $reinforce;\n\n\tpublic $index = 0;\n\tpublic $faction = \"\";\n\tpublic $value = 0;\n\n\tpublic $ships = array();\n\tpublic $ballistics = array();\n\tpublic $gd = array();\n\tpublic $fires = array();\n\tpublic $damages = array();\n\tpublic $crits = array();\n\tpublic $playerstatus = array();\n\tpublic $reinforcements = array();\n\tpublic $rdyReinforcements = array();\n\tpublic $deploys = array();\n\tpublic $incoming = array();\n\tpublic $userindex = 0;\n\tpublic $flights = array();\n\n\tpublic $flight = 0;\n\tpublic $salvo = 0;\n\n\tpublic $const = array(\n\t\t\"ew\" => array(\n\t\t\t\"p\" => 1.5,\n\t\t\t\"len\" => 15\n\t\t),\n\t);\n\n\tfunction __construct($userid = 0, $gameid = 0){\n\t\t//Debug::log(\"constructing manager \".$userid.\"/\".$gameid);\n\t\t//$this->getMemory();\n\t\t$this->userid = $userid;\n\t\t$this->gameid = $gameid;\n\n\t\tif ($this->gameid){\n\t\t\t$this->getGeneralData();\n\t\t\t$this->setUserIndex();\n\t\t}\n\t}\n\n\tpublic function test(){\n\t\t$db = DBManager::app();\n\n\t\t$query = array();\n\t\t$id = 3;\n\t\t$turn = 3;\n\n\t\t$query[] = \"update playerstatus set phase = 2, status = 'ready' where gameid = \".$id;\n\t\t\t$query[] = \"update games set phase = 2 where id = \".$id;\n\t\t\t$query[] = \"update fireorders set resolved = 0, hits = 0 where gameid = \".$id;\n\t\t\t$query[] = \"delete from damages where turn = \".$turn;\n\t\t\t$query[] = \"delete from systemcrits where turn = \".$turn;\n\n\t\t/*\t\n\n\t\t$query[] = \"update playerstatus set phase = 2, status = 'ready' where gameid = \".$id;\n\t\t\t$query[] = \"update games set phase = 2 where id = \".$id;\n\t\t\t$query[] = \"update fireorders set resolved = 0, hits = 0 where gameid = \".$id;\n\t\t\t$query[] = \"delete from damages where turn = \".$turn;\n\t\t\t$query[] = \"delete from systemcrits where turn = \".$turn;\n\t\t*/\n\t\tforeach ($query as $sql){\n\t\t\t$db->query($sql);\n\t\t}\n\t}\n\n\tpublic function getClientData(){\n\n\t\t//$this->handleFighterMovementPhaseNew(); return;\n\t\t//$this->test(); return;\n\t\t//$this->initiateDogfights();\n\t\t//$this->createDogfightFires();\n\n\t \t//var_dump($this->getUnitById(12)->getEndState(1));\n\n\t\t//$this->setShipLocks($this->getUnitById(2)); return;\n\n\t\t//$this->deploy();();\n\n\t\treturn array(\n\t\t\t\"id\" => $this->gameid,\n\t\t\t\"name\" => $this->name,\n\t\t\t\"status\" => $this->status,\n\t\t\t\"turn\" => $this->turn,\n\t\t\t\"phase\" => $this->phase,\n\t\t\t\"ships\" => $this->getShipData(),\n\t\t\t\"reinforcements\" => $this->rdyReinforcements,\n\t\t\t\"deploys\" => $this->deploys,\n\t\t\t\"incoming\" =>$this->incoming,\n\t\t\t\"const\" => $this->const\n\t\t);\n\n\t}\n\n\tpublic function getMemory(){\n\t\t$size = memory_get_usage(true);\n\t    $unit=array('b','kb','mb','gb','tb','pb');\n\t    Debug::log(@round($size/pow(1024,($i=floor(log($size,1024)))),2).' '.$unit[$i]);\n\t}\n\t\n\tpublic function getUsername(){\n\t\t$name = DBManager::app()->getUsername($this->userid);\n\t\t\n\t\tif ($name){\n\t\t\treturn $name;\n\t\t}\n\t}\n\t\n\tpublic function getOpenGames(){\n\t\t$list = DBManager::app()->getOpenGames($this->userid);\n\t\tif ($list){\n\t\t\treturn $list;\n\t\t}\n\t\telse {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tpublic function getGeneralData(){\n\t\t//Debug::log(\"getGeneralData for game \".$this->gameid);\n\t\t$gd = DBManager::app()->getGameDetails($this->gameid);\n\n\t\t$this->name = $gd[\"name\"];\n\t\t$this->pv = $gd[\"pv\"];\n\t\t$this->reinforce = $gd[\"reinforce\"];\n\t\t$this->status = $gd[\"status\"];\n\t\t$this->turn = $gd[\"turn\"];\n\t\t$this->phase = $gd[\"phase\"];\n\t\t$this->playerstatus = DBManager::app()->getPlayerStatus($this->gameid);\n\t}\n\n\tpublic function validateFleetCost($ships){\n\t\t$used = 0;\n\n\t\tfor ($i = 0; $i < sizeof($ships); $i++){\n\t\t\t$used = $used + $ships[$i][\"value\"];\n\t\t}\n\n\t\t$avail = $this->pv;\n\n\t\tif ($used <= $avail){\n\t\t\treturn $avail - $used;\n\t\t}\n\t\treturn 0;\n\t}\n\n\tpublic function getGameData(){\n\t\t//Debug::log(\"getGameData\");\n\t\t$db = DBManager::app();\n\n\t\t$this->setReinforceStatus();\n\t\t$this->fires = $db->getAllFireOrders($this->gameid);\n\n\t\t$this->ships = $this->assembleUnits();\n\t\t//Debug::log(\"ships: \".sizeof($this->ships));\n\t\t//$this->ballistics = $this->assembleBallistics();\n\n\t\t$this->reinforcements = $db->getAllReinforcements($this->gameid, $this->userid);\n\t\t$this->rdyReinforcements = $this->readyReinforcements();\n\t\t$this->deploys = $db->getDeployArea($this->gameid, $this->turn);\n\t\t$this->incoming = $db->getIncomingShips($this->gameid, $this->turn);\n\t\t\n\t\t$this->deleteResolvedFireOrders();\n\n\t\t$this->damages = array();\n\t\t$this->crits = array();\n\t}\n\n\tpublic function setUserIndex(){\n\t\tfor ($i = 0; $i < sizeof($this->playerstatus); $i++){\n\t\t\tif ($this->playerstatus[$i][\"userid\"] == $this->userid){\n\t\t\t\t$this->userindex = $i % 2;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function getBaseFacing(){\n\t\treturn 0 + (180 * ($this->userindex % 2));\n\t}\n\n\tpublic function setReinforceStatus(){\n\t\tfor ($i = 0; $i < sizeof($this->playerstatus); $i++){\n\t\t\tif ($this->playerstatus[$i][\"userid\"] == $this->userid){\n\t\t\t\t$this->faction = $this->playerstatus[$i][\"faction\"];\n\t\t\t\t$this->value = $this->playerstatus[$i][\"value\"];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function getShipData(){\n\t\tfor ($i = sizeof($this->ships)-1; $i >= 0; $i--){\n\t\t\tif ($this->ships[$i]->userid != $this->userid){\n\t\t\t\tif ($this->ships[$i]->flight && $this->ships[$i]->available == $this->turn && !$this->ships[$i]->actions[0]->resolved){\n\t\t\t\t\tarray_splice($this->ships, $i, 1);\n\t\t\t\t}\n\t\t\t\telse if ($this->ships[$i]->ship && $this->phase == 0 || $this->ships[$i]->flight && $this->phase == 1){\n\t\t\t\t\t$this->ships[$i]->hideActions();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tswitch ($this->phase){\n\t\t\tcase -1: \n\t\t\t\tfor ($i = 0; $i < sizeof($this->ships); $i++){\n\t\t\t\t\tif ($this->ships[$i]->userid != $this->userid){\n\t\t\t\t\t\t$this->ships[$i]->hidePowers($this->turn);\n\t\t\t\t\t\t$this->ships[$i]->hideFireOrders($this->turn);\n\t\t\t\t\t}\n\t\t\t\t} break;\n\t\t\tcase 2:\n\t\t\t\tfor ($i = 0; $i < sizeof($this->ships); $i++){\n\t\t\t\t\tif ($this->ships[$i]->userid != $this->userid){\n\t\t\t\t\t\t$this->ships[$i]->hideFireOrders($this->turn);\n\t\t\t\t\t}\n\t\t\t\t} break;\n\t\t\tdefault: break;\n\t\t}\n\n\t\treturn $this->ships;\n\t}\n\n\tpublic function deleteResolvedFireOrders(){\n\t\tfor ($i = sizeof($this->fires)-1; $i >= 0; $i--){\n\t\t\tif ($this->fires[$i]->resolved == 1){\n\t\t\t\tarray_splice($this->fires, $i, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function createGame($name){\n\t\tif (DBManager::app()->createGame($this->userid, $name)){\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tpublic function readyReinforcements(){\n\t\t//Debug::log(\"readyReinforcements s\".sizeof($this->reinforcements));\n\t\t$data = array();\n\n\t\tfor ($i = 0; $i < sizeof($this->reinforcements); $i++){\n\t\t\tif ($this->reinforcements[$i][\"userid\"] == $this->userid){\n\t\t\t\t$s = new $this->reinforcements[$i][\"name\"](-$this->reinforcements[$i][\"id\"], $this->userid, $this->turn + $this->reinforcements[$i][\"eta\"], \"available\", 0);\n\t\t\t\t$s->cost = $this->reinforcements[$i][\"cost\"];\n\t\t\t\t$s->currentImpulse = $s->baseImpulse;\n\n\t\t\t\tfor ($j = 0; $j < sizeof($s->structures); $j++){\n\t\t\t\t\t$s->structures[$j]->remainingNegation = $s->structures[$j]->negation;\n\t\t\t\t}\n\t\t\t\t$data[] = $s;\n\t\t\t}\n\t\t}\n\t\treturn $data;\n\t}\n\n\tpublic function assembleUnits(){\n\t\t//Debug::log(\"assembleUnits\");\n\t\t$db =  DBManager::app()->getActiveUnits($this->gameid, $this->turn); \n\t\t$units = array();\n\n\t\tfor ($i = 0; $i < sizeof($db); $i++){\n\t\t\t$unit = new $db[$i][\"name\"](\n\t\t\t\t$db[$i][\"id\"],\n\t\t\t\t$db[$i][\"userid\"],\n\t\t\t\t$db[$i][\"available\"],\n\t\t\t\t$db[$i][\"status\"],\n\t\t\t\t$db[$i][\"destroyed\"]\n\t\t\t);\n\n\t\t\t$unit->facing = $db[$i][\"angle\"];\n\t\t\t$unit->remainingDelay = $db[$i][\"delay\"];\n\t\t\t$unit->currentImpulse = $db[$i][\"thrust\"];\n\t\t\t$unit->x = $db[$i][\"x\"];\n\t\t\t$unit->y = $db[$i][\"y\"];\n\n\t\t\tif (!$unit->ship){\n\t\t\t\t$unit->addSubUnits($db[$i][\"subunits\"]);\n\t\t\t\t$unit->addMissionDB($db[$i][\"mission\"], $this->userid, $this->turn, $this->phase);\n\t\t\t}\n\t\t\t$units[] = $unit;\n\t\t}\n\n\t\tDBManager::app()->getDamages($units);\n\t\tDBManager::app()->getPowers($units);\n\t\tDBManager::app()->getCrits($units);\n\t\tDBManager::app()->getFires($units);\n\t\tDBManager::app()->getActions($units, $this->turn);\n\t\tDBManager::app()->getEW($units, $this->turn);\n\t\tDBManager::app()->getShipLoad($units);\n\t\tDBManager::app()->getDogfights($units);\n\n\n\t\tif ($this->turn > 1){\n\t\t\tfor ($i = 0; $i < sizeof($units); $i++){\n\t\t\t\t$a = $units[$i]->getCurrentPosition();\n\t\t\t\tfor ($j = $i+1; $j < sizeof($units); $j++){\n\t\t\t\t\tif ($units[$i]->id != $units[$j]->id){\n\t\t\t\t\t\t$b = $units[$j]->getCurrentPosition();\n\t\t\t\t\t\tif ($a->x == $b->x && $a->y == $b->y){\n\t\t\t\t\t\t\t//Debug::log(\"valid: \".$units[$i]->id.\"/\".$units[$j]->id);\n\t\t\t\t\t\t\t$units[$i]->cc[] = $units[$j]->id;\n\t\t\t\t\t\t\t$units[$j]->cc[] = $units[$i]->id;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor ($i = 0; $i < sizeof($units); $i++){\n\t\t\t//$units[$i]->addFireDB($this->fires);\n\t\t\t$units[$i]->setState($this->turn); //check damage state after dmg is applied\n\t\t}\n\n\t\treturn $units;\n\t}\n\n\tpublic function canAdvance($gameid){\n\t\t//Debug::log(\"canAdvance?\");\n\t\t$this->playerstatus = DBManager::app()->getPlayerStatus($gameid);\n\t\tif ($this->status == \"open\"){\n\t\t\treturn false;\n\t\t}\n\t\telse if (sizeof($this->playerstatus) >= 2){\n\t\t\tfor ($i = 0; $i < sizeof($this->playerstatus); $i++){\n\t\t\t\tif ($this->playerstatus[$i][\"status\"] == \"waiting\"){\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic function prepareAdvance($gameid){\n\t\t//Debug::log(\"prepareAdvance + get data\");\n\t\t$this->gameid = $gameid;\n\t\t$this->getGeneralData();\n\t\t$this->getGameData();\n\t}\n\n\tpublic function doAdvance(){\n\t\tDebug::log(\"doAdvance for game\".$this->gameid.\" from phase \".$this->phase.\" to phase \".($this->phase+1));\n\t\t//return;\n\t\t$time = -microtime(true);\n\n\t\tswitch ($this->phase){\n\t\t\tcase -1; // from deploy to move\n\t\t\t\t$this->handleDeploymentPhase();\n\t\t\t\t$this->startMovementPhase();\n\t\t\t\tbreak;\n\t\t\tcase 0; // ship moves\n\t\t\t\t$this->handleMovementPhase();\n\t\t\t\t$this->startFiringPhase();\n\t\t\t//\t$this->startFighterMovementPhase();startFiringPhase\n\t\t\t\tbreak;\n\t\t\tcase 1; // fighters moves\n\t\t\t\t//$this->handleFighterMovementPhase();\n\t\t\t\t$this->startFiringPhase();\n\t\t\t\tbreak;\n\t\t\tcase 2; // from fire to resolve fire\n\t\t\t\tif ($this->handleFiringPhase()){\n\t\t\t\t\t$this->startDamageControlPhase();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 3; // from damage control to NEW TURN - deploymnt\n\t\t\t\t$this->handleDamageControlPhase();\n\t\t\t\t$this->endTurn();\n\t\t\t\t$this->startNewTurn();\n\t\t\t\t$this->startDeploymentPhase();\n\t\t\t\t//$this->turn++;\n\t\t\t\t//$this->phase = 2;\n\t\t\t\t//DBManager::app()->setGameTurnPhase($this->gameid, $this->turn, $this->phase);\n\t\t\t\t//$this->updatePlayerStatus(\"waiting\");\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\n\t\t$time += microtime(true); \n\t\tDebug::log(\"advancing game state time: \".round($time, 3).\" seconds.\");\n\t\treturn true;\n\t}\n\n\tpublic function updatePlayerStatus($status){\n\t\tfor ($i = 0; $i < sizeof($this->playerstatus); $i++){\n\t\t\tDBManager::app()->setPlayerstatus($this->playerstatus[$i][\"userid\"], $this->gameid, $this->turn, $this->phase, $status);\n\t\t}\n\t}\n\n\tpublic function pickReinforcements(){\n\t\tif ($this->turn < 2){return;}\n\n\t\tfor ($i = 0; $i < sizeof($this->playerstatus); $i++){\n\t\t\t$avail = 0;\n\t\t\tfor ($j = 0; $j < sizeof($this->reinforcements); $j++){\n\t\t\t\tif ($this->reinforcements[$j][\"userid\"] == $this->playerstatus[$i][\"userid\"]){\n\t\t\t\t\t$avail++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($avail >= 4){\n\t\t\t\tcontinue;\n\t\t\t}\n\n\n\t\t\t$picks = array();\n\t\t\t$now = 0;\n\t\t\t$max = 1;\n\t\t\tif (!$max){continue;}\n\t\t\t$validShips = $this->getReinforcementShips($this->playerstatus[$i][\"faction\"]);\n\t\t\t//$validShips = array_merge($validShips, $this->getFlights());\n\t\t\t//$validShips = $this->getFlights();\n\n\t\t\tfor ($j = 0; $j < $max; $j++){\n\t\t\t\t$pick = $validShips[mt_rand(0, sizeof($validShips)-1)];\n\t\t\t\t$roll = mt_rand(1, 10);\n\n\t\t\t\tif ($roll >= $pick[\"weight\"]){\n\t\t\t\t\t$now++;\n\t\t\t\t\t$pick[\"eta\"] += mt_rand(3, 4);\n\t\t\t\t\t$pick[\"eta\"] = max(2, $pick[\"eta\"]);\n\t\t\t\t\t$pick[\"value\"] = ceil($pick[\"value\"] * (mt_rand(8, 12))/10);\n\t\t\t\t\t$picks[] = $pick;\n\n\t\t\t\t\tif ($now == $max){\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (sizeof($picks)){\n\t\t\t\tDBManager::app()->insertReinforcements($this->gameid, $this->playerstatus[$i][\"userid\"], $picks);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic function handleDeploymentPhase(){\n\t\t//Debug::log(\"handleDeploymentPhase\");\n\t\t$this->initBallistics();\n\t\t$this->handleDeploymentActions();\n\t\t$this->handleJumpActions();\n\t\t$this->assembleEndStates();\n\t\tDBManager::app()->deleteEmptyLoads($this->gameid);\n\t}\n\n\tpublic function initBallistics(){\n\t\tDebug::log(\"initBallistics\");\n\t\t$fires = DBManager::app()->getUnresolvedFireOrders($this->gameid, $this->turn);\n\t\tusort($fires, function($a, $b){\n\t\t\treturn $a->shooterid - $b->shooterid;\n\t\t});\n\n\t\t$adjust = array();\n\t\t$units = array();\n\t\tfor ($i = 0; $i < sizeof($fires); $i++){\n\t\t\t$skip = 0;\n\t\t\t$shooter = $this->getUnitById($fires[$i]->shooterid);\n\t\t\t$launcher = $shooter->getSystemById($fires[$i]->weaponid);\n\t\t\t$fires[$i]->shots = $launcher->getShots($this->turn);\n\t\t\tif (!($launcher instanceof Launcher)){\n\t\t\t\tDebug::log(\"Hangar fireorder, resolving: \".$fires[$i]->id);\n\t\t\t\tif ($launcher instanceof Hangar){\n\t\t\t\t\t$fires[$i]->resolved = 1;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tDebug::log(\"FATAL ERROR, no launcher/hangar, fire: \".$fires[$i]->id);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$name = $launcher->getAmmo()->name;\n\t\t\t$adjust[] = array(\n\t\t\t\t\"launchData\" => array(\"shipid\" => $shooter->id, \"systemid\" => $launcher->id, \n\t\t\t\t\t\"loads\" => array(0 => array(\"name\" => $name, \"launch\" => $fires[$i]->shots)\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t);\n\n\t\t\tfor ($j = 0; $j < sizeof($units); $j++){\n\t\t\t\tif ($units[$j][\"userid\"] == $shooter->userid && $units[$j][\"mission\"][\"targetid\"] == $fires[$i]->targetid && $units[$j][\"launchData\"][\"loads\"][0][\"name\"] == $name){\n\t\t\t\t\t$units[$j][\"launchData\"][\"loads\"][0][\"launch\"] += $fires[$i]->shots;\n\t\t\t\t\t$skip = 1;\n\t\t\t\t\tDebug::log(\"merging\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($skip){continue;}\n\n\t\t\t$sPos = $shooter->getCurrentPosition();\n\t\t\t$tPos = $this->getUnitById($fires[$i]->targetid)->getCurrentPosition();\n\t\t\t$a = Math::getAngle($sPos->x, $sPos->y, $tPos->x, $tPos->y);\n\t\t\t$devi = Math::getPointInDirection($shooter->size/3, $a, $sPos->x + mt_rand(-10, 10), $sPos->y + mt_rand(-10, 10));\n\t\t\t$mission = array(\"type\" => 2, \"turn\" => $this->turn, \"targetid\" => $fires[$i]->targetid, \"x\" => $tPos->x, \"y\" => $tPos->y, \"arrived\" => 0, \"new\" => 1);\n\t\t\t$move = array(\"turn\" => $this->turn, \"type\" => \"deploy\", \"dist\" => 0, \"x\" => $devi->x, \"y\" => $devi->y, \"a\" => $a, \"cost\" => 0, \"delay\" => 0, \"costmod\" => 0, \"resolved\" => 0);\n\t\t\t$launchData = array(\"shipid\" => $shooter->id, \"systemid\" => $launcher->id, \"loads\" => array(0 => array(\"launch\" => $fires[$i]->shots, \"name\" => $name)));\n\n\t\t\t$units[] = array(\"gameid\" => $this->gameid, \"userid\" => $shooter->userid, \"type\" => \"Salvo\", \"name\" => \"Salvo\", \"turn\" => $this->turn, \"eta\" => 0,\n\t\t\t\t\"mission\" => $mission, \"actions\" => array($move), \"launchData\" => $launchData);\n\n\n\t\t}\n\n\t\tif (sizeof($fires)){\n\t\t\tDBManager::app()->updateBallisticFireOrder($fires);\n\t\t}\n\n\t\tif (sizeof($units)){\n\t\t\tDBManager::app()->insertUnits($this->userid, $this->gameid, $units);\n\t\t\tDBManager::app()->updateSystemLoad($adjust);\n\t\t\tfor ($i = 0; $i < sizeof($units); $i++){\n\t\t\t\t$this->ships[] = new Salvo($units[$i][\"id\"], $units[$i][\"userid\"], $this->turn, \"deployed\", 0);\n\t\t\t\t$this->ships[sizeof($this->ships)-1]->actions[] = new Action(-1, $this->turn, \"deploy\", 0, $devi->x, $devi->y, $a, 0, 0, 0, 0);\n\n\t\t\t}\n\t\t}\n\n\n\t}\n\n\tpublic function handleDeploymentActions(){\n\t\t$data = array();\n\t\tfor ($i = 0; $i < sizeof($this->ships); $i++){\n\t\t\tif ($this->ships[$i]->available == $this->turn){\n\t\t\t\tif (sizeof($this->ships[$i]->actions) == 1){\n\t\t\t\t\t$data[] = $this->ships[$i]->id;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tDBManager::app()->resolveDeployActions($data);\n\t}\n\n\tpublic function handleJumpActions(){\n\t\tDebug::log(\"handleJumpActions\");\n\t\t$updated = array();\n\n\t\t$mod = 1;\n\t\tif ($this->turn == 1){\n\t\t\t$mod = 0.33;\n\t\t}\n\n\t\tfor ($i = 0; $i < sizeof($this->ships); $i++){\n\t\t\tif ($this->ships[$i]->ship && $this->ships[$i]->available == $this->turn){\n\t\t\t\t$order = $this->ships[$i]->actions[0];\n\t\t\t\t$output = $this->ships[$i]->getSystemByName(\"Sensor\")->output;\n\t\t\t\t$shift = round($this->ships[$i]->size / $output*500*$mod, 2);\n\t\t\t\t$aShift = ceil($shift);\n\t\t\t\t$pShift = ceil($shift*2);\n\t\t\t\tDebug::log(\"jumpin: #\".$this->ships[$i]->id.\", class: \".$this->ships[$i]->name.\", size: \".$this->ships[$i]->size.\", sensor: \".$output.\", ordered to: \".$order->x.\"/\".$order->y.\", shiftPotential: \".$shift.\"%\");\n\t\t\t\tDebug::log($this->ships[$i]->name.\", aShift: \".$aShift.\"°, pShift: \".$pShift.\"px\");\n\n\t\t\t\t$aShift = mt_rand(-$aShift, $aShift);\n\t\t\t\t$xShift = mt_rand(-$pShift, $pShift);\n\t\t\t\t$yShift = mt_rand(-$pShift, $pShift);\n\t\t\t\t$dist = Math::getDist($order->x, $order->y, $order->x + $xShift, $order->y + $yShift);\n\n\t\t\t\tDebug::log(\"--> aShift: \".$aShift.\"°, psShift: \".$xShift.\"/\".$yShift.\" (\".$dist.\"px)\");\n\n\t\t\t\t$this->ships[$i]->actions[0]->resolved = 1;\n\t\t\t\t$this->ships[$i]->actions[] = new Action(-1, $this->turn, \"jump\", $dist, $order->x + $xShift, $order->y + $yShift, $aShift, 0, 0, 0, 0);\n\t\t\t\t$updated[] = $this->ships[$i];\n\t\t\t}\n\t\t}\n\n\t\tif (sizeof($updated)){\n\t\t\tDebug::log(\"action size: \".sizeof($updated[0]->actions));\n\t\t\tDBManager::app()->insertServerActions($updated);\n\t\t}\n\t}\n\n\tpublic function startMovementPhase(){\n\t\t//Debug::log(\"startShipMovementPhase\");\n\t\t$dbManager = DBManager::app();\n\t\t$this->phase = 0;\n\n\t\tif ($dbManager->setGameTurnPhase($this->gameid, $this->turn, $this->phase)){\n\t\t\t$this->updatePlayerStatus(\"waiting\");\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tpublic function startFighterMovementPhase(){\n\t\t//Debug::log(\"startFighterMovementPhase\");\n\t\t$dbManager = DBManager::app();\n\t\t$this->phase = 1;\n\n\t\tif ($dbManager->setGameTurnPhase($this->gameid, $this->turn, $this->phase)){\n\t\t\tfor ($i = 0; $i < sizeof($this->playerstatus); $i++){\n\t\t\t\t$hasFlight = false;\n\t\t\t\tfor ($j = 0; $j < sizeof($this->ships); $j++){\n\t\t\t\t\tif ($this->ships[$j]->userid == $this->playerstatus[$i][\"userid\"] && $this->ships[$j]->flight){\n\t\t\t\t\t\t$hasFlight = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ($hasFlight){\n\t\t\t\t\t$dbManager->setPlayerstatus($this->playerstatus[$i][\"userid\"], $this->gameid, $this->turn, $this->phase, \"waiting\");\n\t\t\t\t}\n\t\t\t\telse $dbManager->setPlayerstatus($this->playerstatus[$i][\"userid\"], $this->gameid, $this->turn, $this->phase, \"ready\");\n\t\t\t}\n\t\t}\n\n\t\tif ($this->canAdvance($this->gameid)){\n\t\t\t$this->doAdvance();\n\t\t}\n\t}\n\n\tpublic function handleMovementPhase(){\n\t\tDebug::log(\"handleShipMovementPhase\");\n\t\t$this->handleShipMovement();\n\t\t$this->flight = 1;\n\t\t$this->handleMixedMovement();\n\t\t$this->flight = 0;\n\t\t$this->salvo = 1;\n\t\t$this->handleMixedMovement();\n\t\t$this->salvo = 0;\n\t}\n\n\n\tpublic function handleShipMovement(){\n\t\tDebug::log(\"handleShipMovement\");\n\t\tfor ($i = 0; $i < sizeof($this->ships); $i++){\n\t\t\tif ($this->ships[$i]->ship){\n\t\t\t\tfor ($j = sizeof($this->ships[$i]->actions)-1; $j >= 0; $j--){\n\t\t\t\t\tif ($this->ships[$i]->actions[$j]->resolved == 0){\n\t\t\t\t\t\t$this->ships[$i]->actions[$j]->resolved = 1;\n\t\t\t\t\t} else break 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tDBManager::app()->resolveUnitMovementDB($this->ships);\n\t}\n\n\tpublic function handleMixedMovement(){\n\t\tDebug::log(\"handleMixedMovement\");\n\t\t$missions = array();\n\t\t$stack = array(array(), array(), array());\n\t\t$units = array();\n\n\t\t//resolve order\n\t\t//1. patrol\n\t\t//2. strike on ship\n\n\t\n\t\tfor ($i = 0; $i < sizeof($this->ships); $i++){\n\t\t\tif ($this->flight && !$this->ships[$i]->flight || $this->salvo && !$this->ships[$i]->salvo){\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ($this->ships[$i]->mission->arrived){ // already at target location\n\t\t\t\tif ($this->ships[$i]->mission->type == 2){ // strike\n\t\t\t\t\t$t = $this->getUnitById($this->ships[$i]->mission->targetid);\n\t\t\t\t\t$tPos = $t->getCurrentPosition();\n\t\t\t\t\t$dist = Math::getDist2($this->ships[$i]->getCurrentPosition(), $tPos);\n\t\t\t\t\t$angle = Math::getAngle2($this->ships[$i]->getCurrentPosition(), $tPos);\n\t\t\t\t\t$move = new Action(-1, $this->turn,\t\"move\",\t$dist, $tPos->x, $tPos->y, $angle, 0, 0, 0, 0);\n\t\t\t\t\t$this->ships[$i]->actions[] = $move;\n\t\t\t\t\tDebug::log(\"STATIC STRIKE #\".$this->ships[$i]->id.\", adding move to: \".$move->x.\"/\".$move->y);\n\t\t\t\t\t$units[] = $this->ships[$i];\n\t\t\t\t} \n\t\t\t\telse {\n\t\t\t\t\t$tPos = $this->ships[$i]->getCurrentPosition(); // Patrol\n\t\t\t\t\t$move = new Action(-1, $this->turn,\t\"move\",\t0, $tPos->x, $tPos->y, 0, 0, 0, 0, 0);\n\t\t\t\t\t$this->ships[$i]->actions[] = $move;\n\t\t\t\t\tDebug::log(\"STATIC PATROL #\".$this->ships[$i]->id.\", adding move to: \".$move->x.\"/\".$move->y);\n\t\t\t\t\t$units[] = $this->ships[$i];\n\t\t\t\t}\n\n\t\t\t\t$this->ships[$i]->mission->x = $tPos->x;\n\t\t\t\t$this->ships[$i]->mission->y = $tPos->y;\n\t\t\t\t$missions[] = $this->ships[$i]->mission;\n\t\t\t}\n\t\t\telse { // on way\n\t\t\t\tif ($this->ships[$i]->mission->type == 2){ // strike\n\t\t\t\t\t$target = $this->getUnitById($this->ships[$i]->mission->targetid);\n\t\t\t\t\tif ($target->ship){\n\t\t\t\t\t\t$stack[1][] = $this->ships[$i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse { // patrol\n\t\t\t\t\t$stack[0][] = $this->ships[$i];\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (sizeof($units)){\n\t\t\tDBManager::app()->insertServerActions($units);\n\t\t\t$units = array();\n\t\t}\n\n\t\tDebug::log(\"layer 0 -> patrol target, layer 1 => strike\");\n\t\tfor ($i = 0; $i < sizeof($stack); $i++){\n\t\t\tDebug::log(\"resolving layer #\".$i);\n\t\t\tfor ($j = 0; $j < sizeof($stack[$i]); $j++){\n\t\t\t\tDebug::log(\"resolving mixed #\".$stack[$i][$j]->id);\n\t\t\t\tDebug::log(\"_____________________\");\n\t\t\t\t$origin = $stack[$i][$j]->getCurrentPosition();\n\t\t\t\t$impulse = $stack[$i][$j]->getCurrentImpulse();\n\t\t\t\t$tPos;\n\t\t\t\t$dist;\n\t\t\t\t$angle;\n\t\t\t\tif ($stack[$i][$j]->mission->type == 1){\n\t\t\t\t\t$tPos = new Point($stack[$i][$j]->mission->x, $stack[$i][$j]->mission->y); // patrol\n\t\t\t\t}\n\t\t\t\telse $tPos = $this->getUnitById($stack[$i][$j]->mission->targetid)->getCurrentPosition(); // strike / int\n\n\t\t\t\t$stack[$i][$j]->mission->x = $tPos->x;\n\t\t\t\t$stack[$i][$j]->mission->y = $tPos->y;\n\t\t\t\t$dist = Math::getDist2($origin, $tPos);\n\t\t\t\t$angle = Math::getAngle2($origin, $tPos);\n\n\t\t\t\tDebug::log(\"Flight #\".$stack[$i][$j]->id.\", impulse: \".$impulse);\n\t\t\t\tDebug::log(\"From \".$origin->x.\"/\".$origin->y.\" to \".$tPos->x.\"/\".$tPos->y);\n\t\t\t\tDebug::log(\"Dist \".$dist.\", angle: \".$angle);\n\n\t\t\t\tif ($impulse <= $dist){\n\t\t\t\t\tDebug::log(\"close in\");\n\t\t\t\t\t$tPos = Math::getPointInDirection($impulse, $angle, $origin->x, $origin->y);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tDebug::log(\"arrival\");\n\t\t\t\t\t$stack[$i][$j]->mission->arrived = $this->turn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$missions[] = $stack[$i][$j]->mission;\n\t\t\t\t$stack[$i][$j]->facing = $angle;\n\t\t\t\t$move = new Action(-1, $this->turn,\t\"move\",\t$dist, $tPos->x, $tPos->y,\n\t\t\t\t$angle, 0, 0, 0, 0);\n\t\t\t\t$stack[$i][$j]->actions[] = $move;\n\n\t\t\t\tDebug::log(\"adding move to: \".$move->x.\"/\".$move->y);\n\n\t\t\t\t$units[] = $stack[$i][$j];\n\t\t\t}\n\t\t\tif (sizeof($units)){\n\t\t\t\tDBManager::app()->insertServerActions($units);\n\t\t\t\t$units = array();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (sizeof($missions)){\n\t\t\tDBManager::app()->updateMissionState($missions);\n\t\t}\n\t}\n\n\tpublic function assembleEndStates(){\n\t\tDebug::log(\"assembleEndStates\");\n\t\t$states = array();\n\t\tfor ($i = 0; $i < sizeof($this->ships); $i++){\n\t\t\t$states[] = $this->ships[$i]->getEndState($this->turn, $this->phase);\n\t\t}\n\n\t\tif ($this->phase == 3){\n\t\t\tfor ($i = 0; $i < sizeof($this->incoming); $i++){\n\t\t\t\tif ($this->incoming[$i][\"available\"] == $this->turn+1){\n\t\t\t\t\t$states[] = array(\n\t\t\t\t\t\t\"id\" => $this->incoming[$i][\"id\"], \n\t\t\t\t\t\t\"x\" => $this->incoming[$i][\"x\"], \n\t\t\t\t\t\t\"y\" => $this->incoming[$i][\"y\"], \n\t\t\t\t\t\t\"delay\" => 0, \n\t\t\t\t\t\t\"angle\" => $this->incoming[$i][\"a\"], \n\t\t\t\t\t\t\"thrust\" => 0\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (sizeof($states)){DBManager::app()->updateUnitEndState($states, $this->turn, $this->phase);}\n\t}\n\n\tpublic function startFiringPhase(){\n\t//\tDebug::log(\"startFiringPhase\");\n\t\t$dbManager = DBManager::app();\n\t\t$this->phase = 2;\n\n\t\tif ($dbManager->setGameTurnPhase($this->gameid, $this->turn, $this->phase)){\n\t\t\t//$players = $dbManager->getPlayerStatus($this->gameid);\n\t\t\t$this->updatePlayerStatus(\"waiting\");\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tpublic function handleFiringPhase(){\n\t\t$time = -microtime(true);\n\n\t\t$this->setupShips();\n\t\t//return false;\n\n\t\t$this->setFireOrderDetails();\n\t\t$this->sortFireOrders();\n\t\t$this->resolveShipFireOrders();\n\t\t$this->resolveFighterFireOrders();\n\t\t$this->resolveBallisticFireOrders();\n\t\t$this->cleanFireOrders();\n\t\t$this->testCrits();\n\t\t$this->writeDamageEntries();\n\t\t$this->writeCritEntries();\n\t\t$this->setUnitStatus();\n\t\t$time += microtime(true); \n\t\tDebug::log(\"handleFiringPhase time: \".round($time, 3).\" seconds.\");\n\t\treturn true;\n\t}\n\t\n\tpublic function handleDamageControlPhase(){\n\t\t$this->assembleEndStates();\n\t\treturn true;\n\t}\n\n\n\tpublic function endTurn(){\n\t\tDebug::log(\"endTurn\");\n\t\t$this->alterReinforcementPoints();\n\n\t\t$data = array();\n\t\tfor ($i = 0; $i < sizeof($this->incoming); $i++){\n\t\t\tif ($this->incoming[$i][\"available\"] == $this->turn+1){\n\t\t\t\t$data[] = $this->incoming[$i][\"id\"];\n\t\t\t}\n\t\t}\n\t\tDBManager::app()->resolveDeployActions($data);\n\t\tDBManager::app()->destroyUnitsDB(array($this->ships, $this->ballistics));\n\t}\n\n\tpublic function alterReinforcementPoints(){\n\t\tfor ($i = 0; $i < sizeof($this->playerstatus); $i++){\n\t\t\tDBManager::app()->addReinforceValue($this->playerstatus[$i][\"userid\"], $this->gameid, $this->reinforce);\n\t\t};\n\t}\n\n\tpublic function startNewTurn(){\n\t\t//Debug::log(\"startNewTurn\");\n\t\t$this->turn = $this->turn+1;\n\t\t$this->phase = -1;\n\t\tDBManager::app()->setGameTurnPhase($this->gameid, $this->turn, $this->phase);\n\t}\n\n\tpublic function startDeploymentPhase(){\n\t\t//Debug::log(\"startDeploymentPhase\");\n\t\t$this->pickReinforcements();\n\t\t$this->updatePlayerStatus(\"waiting\");\n\t\treturn;\n\t}\n\n\tpublic function setupShips(){\n\t\tfor ($i = 0; $i < sizeof($this->ships); $i++){\n\t\t\t$this->ships[$i]->setFacing();\n\t\t\t$this->ships[$i]->setPosition();\n\t\t\t$this->ships[$i]->setupForDamage();\n\t\t\t$this->setShipLocks($this->ships[$i]);\n\t}\n\n\t\tfor ($i = 0; $i < sizeof($this->ships); $i++){\n\t\t\t$aPos = $this->ships[$i]->getCurrentPosition();\n\t\t\tfor ($j = $i+1; $j < sizeof($this->ships); $j++){\n\t\t\t\tif ($this->ships[$i]->userid == $this->ships[$j]->userid){continue;}\n\t\t\t\t$bPos = $this->ships[$j]->getCurrentPosition();\n\t\t\t\t$dist = Math::getDist2($aPos, $bPos);\n\t\t\t\t$this->ships[$i]->distances[] = array($this->ships[$j]->id, $dist);\n\t\t\t\t$this->ships[$j]->distances[] = array($this->ships[$i]->id, $dist);\n\n\t\t\t\t//$this->ships[$i]->angles[] = array($this->ships[$j]->id, round(Math::addAngle($this->ships[$i]->getFacing(), Math::getAngle2($aPos, $bPos))));\n\t\t\t\t//$this->ships[$j]->angles[] = array($this->ships[$i]->id, round(Math::addAngle($this->ships[$j]->getFacing(), Math::getAngle2($bPos, $aPos))));\n\n\t\t\t\t$this->ships[$i]->angles[] = array($this->ships[$j]->id, round(Math::getAngle2($aPos, $bPos)));\n\t\t\t\t$this->ships[$j]->angles[] = array($this->ships[$i]->id, round(Math::getAngle2($bPos, $aPos)));\n\t\t\t}\n\t\t}\n\t\treturn;\n\tfor ($i = 0; $i < sizeof($this->ships); $i++){\n\t\t\t\tDebug::log(\"FROM: #\".$this->ships[$i]->id);\n\t\t\tforeach ($this->ships[$i]->angles as $val){\n\t\t\t\tDebug::log(\"--> ANGLE TO: #\".$val[0].\": \".$val[1]);\n\t\t\t}\n\t\t\tforeach ($this->ships[$i]->distances as $val){\n\t\t\t\tDebug::log(\"-->  DIST TO: #\".$val[0].\": \".$val[1]);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function setShipLocks($ship){\n\t\tif (!$ship->ship){return;}\n\t\tDebug::log(\"ew for #\".$ship->id);\n\t\t$origin = $ship->getCurrentPosition();\n\t\t$sensor =  $ship->getSystemByName(\"Sensor\");\n\t\t$ew = $sensor->getEW($this->turn);\n\t\tif ($sensor->destroyed || $sensor->disabled  || !$ew){\n\t\t\treturn;\n\t\t}\n\t\telse if ($ew->type == 2 || $ew->type == 3){\n\t\t\tfor ($i = 0; $i < sizeof($this->ships); $i++){\n\t\t\t\tif ($this->ships[$i]->id == $ship->id || $ship->userid == $this->ships[$i]->userid){continue;}\n\t\t\t\tswitch ($ew->type){\n\t\t\t\t\tcase 2: $ship->locks[] = array($this->ships[$i]->id, 0.2); break;\n\t\t\t\t\tcase 3: $ship->masks[] = array($this->ships[$i]->id, 0.2); break;\n\t\t\t\t}\n\t\t\t}\t\n\n\t\t\tfor ($i = 0; $i < sizeof($this->ballistics); $i++){\n\t\t\t\tif ($this->ballistics[$i]->id == $ship->id || $ship->userid == $this->ballistics[$i]->userid){continue;}\n\t\t\t\tswitch ($ew->type){\n\t\t\t\t\tcase 2: $ship->locks[] = array($this->ballistics[$i]->id, 0.2); break;\n\t\t\t\t\tcase 3: $ship->masks[] = array($this->ballistics[$i]->id, 0.2); break;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t$str = $sensor->getOutput($this->turn);\n\t\t\t$len = $this->const[\"ew\"][\"len\"];\n\t\t\t$p = $this->const[\"ew\"][\"p\"];1;\n\t\t\t$w = min(180, $len * pow($str/$ew->dist, $p));\n\t\t\t$start = Math::addAngle(0 + $w-$ship->getFacing(), $ew->angle);\n\t\t\t$end = Math::addAngle(360 - $w-$ship->getFacing(), $ew->angle);\n\n\t\t\tDebug::log(\"specific EW for ship #\".$ship->id.\", EW from \".$start.\" to \".$end.\", dist: \".$ew->dist);\n\t\t\tfor ($i = 0; $i < sizeof($this->ships); $i++){\n\t\t\t\t$skip = 0;\n\t\t\t\tif ($this->ships[$i]->id == $ship->id || $ship->userid == $this->ships[$i]->userid){continue;}\n\n\t\t\t\tif ($ew->type == 0 && sizeof($ship->cc)){\n\t\t\t\t\tfor ($j = 0; $j < sizeof($ship->cc); $j++){\n\t\t\t\t\t\tif ($ship->cc[$j] == $this->ships[$i]->id){\n\t\t\t\t\t\t\tif ($this->ships[$i]->flight){\n\t\t\t\t\t\t\t\t$ship->locks[] = array($this->ships[$i]->id, round((0.5 / 180 * $w)*10)/10);\n\t\t\t\t\t\t\t\t$skip = 1; break;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if ($this->ships[$i]->salvo){\n\t\t\t\t\t\t\t\t$angle = Math::getAngle2($origin, $this->ships[$i]->getTrajectoryStart());\n\t\t\t\t\t\t\t\tif (Math::isInArc($a, $start, $end)){\n\t\t\t\t\t\t\t\t\t$ship->locks[] = array($this->ships[$i]->id, 0.5);\n\t\t\t\t\t\t\t\t\t$skip = 1; break;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ($skip){\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t$dest = $this->ships[$i]->getCurrentPosition();\n\t\t\t\tif (Math::getDist2($origin, $dest) <= $ew->dist){\n\t\t\t\t\t$a = Math::getAngle2($origin, $dest);\n\t\t\t\t\t//Debug::log(\"versus #\".$this->ships[$i]->id.\", a: \".$a);\n\t\t\t\t\tif (Math::isInArc($a, $start, $end)){\n\t\t\t\t\t\tif ($ew->type == 0){ // LOCK\n\t\t\t\t\t\t\t//Debug::log(\"locking onto: #\".$this->ships[$i]->id);\n\t\t\t\t\t\t\t$ship->locks[] = array($this->ships[$i]->id, 0.5);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if ($ew->type == 1){ // MASK\n\t\t\t\t\t\t\tif (!$this->ships[$i]->flight){\n\t\t\t\t\t\t\t\t//Debug::log(\"masking from #\".$this->ships[$i]->id);\n\t\t\t\t\t\t\t\t$ship->masks[] = array($this->ships[$i]->id, 0.5);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}// else Debug::log(\"out of arc\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tforeach ($ship->locks as $entry){\n\t\t\tDebug::log(\"lock vs #\".$entry[0].\" with val: \".$entry[1]);\n\t\t}\n\t}\n\n\tpublic function setFireOrderDetails(){\n\t\tfor ($i = sizeof($this->fires)-1; $i >= 0; $i--){\n\t\t\t//echo \"fire: \".$this->fires[$i]->id; echo \"</br></br>\";\n\t\t\t//var_export($this->fires[$i]); echo \"</br></br>\";\n\t\t\t$this->fires[$i]->shooter = $this->getUnitById($this->fires[$i]->shooterid);\n\t\t\t$this->fires[$i]->weapon = $this->fires[$i]->shooter->getSystemById($this->fires[$i]->weaponid);\n\t\t\t//$this->fires[$i]->shots = $this->fires[$i]->weapon->getShots($this->turn);\n\t\t\t$this->fires[$i]->shots = 1;\n\t\t\t$this->fires[$i]->target = $this->getUnitById($this->fires[$i]->targetid);\n\t\t\t//var_export($this->fires[$i]->weapon); echo \"</br></br>\";\n\t\t\t//var_export($this->fires[$i]->weapon->getBoostLevel($this->turn)); echo \"</br></br>\";\n\t\t}\n\t}\n\n\tpublic function sortFireOrders(){\n\t//order target id ASC, weapon priority ASC, shooterider id ASC\n\n\t\tusort($this->fires, function($a, $b){\n\t\t\tif ($a->targetid != $b->targetid){\n\t\t\t\treturn $a->targetid - $b->targetid;\n\t\t\t}\n\t\t\telse if ($a->weapon->priority != $b->weapon->priority){\n\t\t\t\treturn $a->weapon->priority - $b->weapon->priority;\n\t\t\t}\n\t\t\telse if ($a->shooterid != $b->shooterid){\n\t\t\t\treturn $a->shooterid - $b->shooterid;\n\t\t\t}\n\t\t\telse return $a->id - $b->id;\n\t\t});\n\t}\n\n\tpublic function resolveShipFireOrders(){\n\t\t// resolve ship vs ship / fighter\n\t\tfor ($i = 0; $i < sizeof($this->fires); $i++){\n\t\t\t//Debug::log(\"fire [\".$i.\"]\");\n\t\t\tif (!$this->fires[$i]->resolved){\n\t\t\t\t//Debug::log(\"HANDLING\");\n\t\t\t\tif ($this->fires[$i]->shooter->flight == false){\n\t\t\t\t\t//var_export($this->fires[$i]->id);\n\t\t\t\t\t$this->fires[$i]->target->resolveFireOrder($this->fires[$i]);\n\t\t\t\t\tif (sizeof($this->fires[$i]->damages)){\n\t\t\t\t\t\t$this->damages = array_merge($this->damages, $this->fires[$i]->damages);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//var_export($this->damages);\n\t}\n\n\tpublic function resolveFighterFireOrders(){\n\t\t// splice and delete fireorders from destroyed fighters\n\t\t$toDelete = array();\n\n\t\tfor ($i = sizeof($this->fires)-1; $i >= 0; $i--){\n\t\t\tif (!$this->fires[$i]->resolved){\n\t\t\t\tif ($this->fires[$i]->shooter->flight){\n\t\t\t\t\tif ($this->fires[$i]->shooter->getStructureById($this->fires[$i]->weapon->fighterId)->destroyed){\n\t\t\t\t\t\t$this->fires[$i]->resolved = -1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t/*\tfor ($i = 0; $i < sizeof($this->fires); $i++){\n\t\t\tif ($this->fires[$i]->resolved || !$this->fires[$i]->shooter->flight){continue;}\n\t\t\t//Debug::log(\"comparing :\".$this->fires[$i]->id);\n\t\t\tfor ($j = $i+1; $j < sizeof($this->fires); $j++){\n\t\t\t\tif ($this->fires[$j]->resolved || !$this->fires[$j]->shooter->flight){continue;}\n\t\t\t\t//Debug::log(\"to :\".$this->fires[$j]->id);\n\t\t\t\tif ($this->fires[$j]->shooterid == $this->fires[$i]->shooterid){\n\t\t\t\t\tif ($this->fires[$j]->targetid == $this->fires[$i]->targetid){\n\t\t\t\t\t\tif ($this->fires[$j]->weapon->name == $this->fires[$i]->weapon->name){\n\t\t\t\t\t\t\t//Debug::log(\"could add fire: \".$this->fires[$j]->id.\" to fire \".$this->fires[$i]->id);\n\t\t\t\t\t\t\t$this->fires[$i]->shots++;\n\t\t\t\t\t\t\t$this->fires[$j]->shots--;\n\t\t\t\t\t\t\t$this->fires[$j]->resolved = 1;\n\t\t\t\t\t\t\t//$this->fires[$j]->notes = \"+\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t*/\n\n\t\t// fighter vs fighter\n\n\t\tfor ($i = 0; $i < sizeof($this->fires); $i++){ // non-dogfights\n\t\t\tif (!$this->fires[$i]->resolved){\n\t\t\t\tif ($this->fires[$i]->shooter->flight && $this->fires[$i]->target->flight){\n\t\t\t\t\t$this->fires[$i]->target->resolveFireOrder($this->fires[$i]);\n\t\t\t\t\tif (sizeof($this->fires[$i]->damages)){\n\t\t\t\t\t\t$this->damages = array_merge($this->damages, $this->fires[$i]->damages);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// fighter vs non fighter (ball, ship);\n\t\tfor ($i = 0; $i < sizeof($this->fires); $i++){\n\t\t\tif (!$this->fires[$i]->resolved){\n\t\t\t\tif ($this->fires[$i]->shooter->flight == true && $this->fires[$i]->target->flight == false){\n\t\t\t\t\tif ($this->fires[$i]->shooter->getStructureById($this->fires[$i]->weapon->fighterId)->destroyed){\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t$this->fires[$i]->target->resolveFireOrder($this->fires[$i]);\n\t\t\t\t\t//Debug::log(\"resolving fire id: \".$this->fires[$i]->id);\n\t\t\t\t\tif (sizeof($this->fires[$i]->damages)){\n\t\t\t\t\t\t$this->damages = array_merge($this->damages, $this->fires[$i]->damages);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$index = 0;\n\t\tfor ($i = $index; $i < sizeof($this->fires); $i++){\n\t\t\tif ($this->fires[$i]->shooter->flight){\n\t\t\t\tif ($this->fires[$i]->shots >= 2){\n\t\t\t\t\tfor ($j = $i+1; $j < sizeof($this->fires); $j++){\n\t\t\t\t\t\tif ($this->fires[$i]->shooter->flight && $this->fires[$j]->shots == 0){\n\t\t\t\t\t\t\tif ($this->fires[$i]->targetid == $this->fires[$j]->targetid){\n\t\t\t\t\t\t\t\t$this->fires[$j]->req = $this->fires[$i]->req;\n\t\t\t\t\t\t\t/*\t$this->fires[$i]->shots--;\n\t\t\t\t\t\t\t\t$this->fires[$j]->shots++;\n\n\t\t\t\t\t\t\t\tif ($this->fires[$i]->hits > 1){\n\t\t\t\t\t\t\t\t\t$this->fires[$i]->hits--;\n\t\t\t\t\t\t\t\t\t$this->fires[$j]->hits++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif ($this->fires[$i]->shots == 1){\n\t\t\t\t\t\t\t\t\t$index = $j+1;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}*/\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function resolveBallisticFireOrders(){\n\t\tDebug::log(\"resolveBallisticFireOrders\");\n\t\t$fires = array();\n\n\t\tfor ($i = 0; $i < sizeof($this->ships); $i++){\n\t\t\tif ($this->ships[$i]->salvo && !$this->ships[$i]->isDestroyed()){\n\t\t\t\tif ($this->ships[$i]->mission->arrived){\n\t\t\t\t\t$target = $this->getUnitById($this->ships[$i]->mission->targetid);\n\t\t\t\t\t$fire = $this->ships[$i]->getFireOrder($this->gameid, $this->turn, $target);\n\t\t\t\t\t//Debug::log(\"Salvo #\".$this->ships[$i]->id.\" attacking: \".$fire->target->name.\" #\".$fire->target->id.\" with \".$fire->shooter->getShots($this->turn).\"x \".$fire->weapon->name);\n\t\t\t\t\t$fires[] = $fire;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (sizeof($fires)){\n\t\t\tDBManager::app()->insertServerFireOrder($fires);\n\n\t\t\tfor ($i = 0; $i < sizeof($fires); $i++){\n\t\t\t\t$fires[$i]->target->resolveFireOrder($fires[$i]);\n\t\t\t\tif (sizeof($fires[$i]->damages)){\n\t\t\t\t\t$this->damages = array_merge($this->damages, $fires[$i]->damages);\n\t\t\t\t}\n\t\t\t}\n\t\t\t$this->fires = array_merge($this->fires, $fires);\n\t\t}\n\t}\n\n\tpublic function cleanFireOrders(){\n\t\tDebug::log(\"cleanFireOrders, fires: \".sizeof($this->fires));\n\t\tDBManager::app()->updateFireOrders($this->fires);\n\t\tDBManager::app()->deleteUnresolvedFireOrders($this->gameid);\n\t}\n\n\tpublic function testCrits(){\n\t\tfor ($i = 0; $i < sizeof($this->ships); $i++){\n\t\t\t$this->ships[$i]->testCriticals($this->turn);\n\t\t}\n\t}\n\n\tpublic function writeDamageEntries(){\n\t\tif (sizeof($this->damages)){\n\t\t\tDBManager::app()->insertDamageEntries($this->damages);\n\t\t}\n\t}\n\n\tpublic function writeCritEntries(){\n\t\t//Debug::log(\"writeCritEntries\");\n\t\t$all = array();\n\t\tfor ($i = 0; $i < sizeof($this->ships); $i++){\n\t\t\t$all = array_merge($all, $this->ships[$i]->getNewCrits($this->turn));\n\t\t}\n\t\tDBManager::app()->insertCritEntries($all, $this->gameid);\n\t}\n\n\tpublic function setUnitStatus(){\n\t\tDBManager::app()->setUnitStatusDB($this->ships);\n\t}\n\n\tpublic function startDamageControlPhase(){\n\t\t//Debug::log(\"startDamageControlPhase\");\n\n\t\t$dbManager = DBManager::app();\n\t\t$this->phase = 3;\n\n\t\tif ($dbManager->setGameTurnPhase($this->gameid, $this->turn, $this->phase)){\n\t\t\t$this->updatePlayerStatus(\"waiting\");\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tpublic function finishTurn(){\n\t\t//Debug::log(\"finishTurn\");\n\t}\n\n\tpublic function getId(){\n\t\treturn 1 + sizeof($this->ships);\n\t}\n\n\tpublic function getUnitById($id){\n\t\t//Debug::log(\"looking for unit :\".$unitid);\n\t\tfor ($i = 0; $i < sizeof($this->ships); $i++){\n\t\t\tif ($this->ships[$i]->id == $id){\n\t\t\t\treturn $this->ships[$i];\n\t\t\t}\n\t\t}\n\t\tfor ($i = 0; $i < sizeof($this->ballistics); $i++){\n\t\t\tif ($this->ballistics[$i]->id == $id){\n\t\t\t\treturn $this->ballistics[$i];\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function getFactions(){\n\t\treturn array(\"Earth Alliance\", \"Centauri Republic\", \"Minbari Federation\", \"Narn Regime\");\n\t}\n\n\tpublic function getFightersForFaction($faction){\n\t\t//Debug::log(\"getFightersForFaction\");\n\t}\n\n\tpublic function getFlights(){\n\t\treturn array(array(\n\t\t\t\"name\" => \"Flight\",\n\t\t\t\"value\" => 500,\n\t\t\t\"eta\" => 2\n\t\t));\n\t}\n\n\tpublic function getReinforcementShips($faction){\n\t\t//Debug::log(\"getShipsForFaction\");\n\t\t$ships = array();\n\t\t$data = array();\n\n\t\tswitch ($faction){\n\t\t\tcase \"Earth Alliance\";\n\t\t\t\t$ships = array(\n\t\t\t\t\tarray(\"Omega\", 8, 2),\n\t\t\t\t\tarray(\"Hyperion\", 6, 1),\n\t\t\t\t\tarray(\"Artemis\", 5, 0),\n\t\t\t\t\tarray(\"Tethys\", 4, -1)\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase \"Centauri Republic\";\n\t\t\t\t$ships = array(\n\t\t\t\t\tarray(\"Primus\", 8, 2),\n\t\t\t\t\tarray(\"Altarian\", 5, 0),\n\t\t\t\t\tarray(\"Darkner\", 4, 0),\n\t\t\t\t\tarray(\"Demos\", 5, 0),\n\t\t\t\t\tarray(\"Vorchan\", 3, -1),\n\t\t\t\t\tarray(\"Haven\", 3, -1),\n\t\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase \"Minbari Federation\";\n\t\t\t\t$ships = array(\n\t\t\t\t\tarray(\"Sharlin\", 8, 1),\n\t\t\t\t\tarray(\"Tinashi\", 4, 0),\n\t\t\t\t\tarray(\"WhiteStar\", 5, -2),\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase \"Narn Regime\";\n\t\t\t\t$ships = array(\n\t\t\t\t\tarray(\"GQuan\", 6, 0)\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\n\t\t$ship;\n\n\t\tfor ($i = 0; $i < sizeof($ships); $i++){\n\t\t\t$name = $ships[$i][0];\n\t\t\t$ship = array(\n\t\t\t\t\"name\" => $ships[$i][0],\n\t\t\t\t\"value\" => $name::$value,\n\t\t\t\t\"weight\" => $ships[$i][1],\n\t\t\t\t\"eta\" => $ships[$i][2]\n\t\t\t);\n\t\t\t$data[] = $ship;\n\t\t}\n\n\t\treturn $data;\n\n\t}\n\n\tpublic function getShipsForFaction($faction){\n\t\t//Debug::log(\"getShipsForFaction\");\n\t\t$ships = array();\n\t\t$data = array();\n\n\t\tswitch ($faction){\n\t\t\tcase \"Earth Alliance\";\n\t\t\t\t$ships = array(\n\t\t\t\t\t\"Omega\",\n\t\t\t\t\t\"Avenger\",\n\t\t\t\t\t\"Hyperion\",\n\t\t\t\t\t\"Saggitarius\",\n\t\t\t\t\t\"Artemis\",\n\t\t\t\t\t\"Tethys\"\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase \"Centauri Republic\";\n\t\t\t\t$ships = array(\n\t\t\t\t\t\"Primus\",\n\t\t\t\t\t\"Altarian\",\n\t\t\t\t\t\"Darkner\",\n\t\t\t\t\t\"Demos\",\n\t\t\t\t\t\"Vorchan\",\n\t\t\t\t\t\"Haven\"\n\t\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase \"Minbari Federation\";\n\t\t\t\t$ships = array(\n\t\t\t\t\t\"Sharlin\",\n\t\t\t\t\t\"Tinashi\",\n\t\t\t\t\t\"WhiteStar\",\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase \"Narn Regime\";\n\t\t\t\t$ships = array(\n\t\t\t\t\t\"GQuan\"\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\n\t\t$ship;\n\n\t\tfor ($i = 0; $i < sizeof($ships); $i++){\n\t\t\t$name = $ships[$i];\n\t\t\t$ship = array(\n\t\t\t\t\"name\" => $ships[$i],\n\t\t\t\t\"value\" => $name::$value,\n\t\t\t\t\"eta\" => 0\n\t\t\t);\n\t\t\t$data[] = $ship;\n\t\t}\n\n\t\treturn $data;\n\t}\n\n\tpublic function getPreviewData($name){\n\t\t//Debug::log(\"asking for preview of: \".$name);\n\t\t$ship = new $name(1, 1, 0, \"\", 0);\n\t\t$ship->setState(0);\n\t\treturn $ship;\n\t}\n\n\tpublic function logSystemsByClass($array){\n\t\t$systems = array();\n\n\t\tfor ($i = 0; $i < sizeof($array); $i++){\n\t\t\tswitch ($array[$i]){\n\t\t\t\tcase \"Ion\":\n\t\t\t\t\t$systems[] = array(\"LightIon\", \"MediumTwinIon\", \"HeavyIon\"); break;\n\t\t\t\tcase \"Pulse\":\n\t\t\t\t\t$systems[] = array(\"LightPulse\", \"MediumPulse\"); break;\n\t\t\t\tcase \"Laser\":\n\t\t\t\t\t$systems[] = array(\"LightLaser\", \"MediumLaser\", \"HeavyLaser\"); break;\n\t\t\t\tcase \"Matter\":\n\t\t\t\t\t$systems[] = array(\"MediumRailGun\", \"HeavyRailGun\"); break;\n\t\t\t\tdefault: break;\n\t\t\t}\n\t\t}\n\n\t\t$return = array();\n\n\t\tfor ($i = 0; $i < sizeof($systems); $i++){\n\t\t\tfor ($j = 0; $j < sizeof($systems[$i]); $j++){\n\t\t\t\t$return[] = new $systems[$i][$j](0, 0, 0, 0);\n\t\t\t}\n\t\t}\n\t\treturn $return;\n\t}\n\n\tpublic function compareSystems($array){\n\t\t$systems = array();\n\n\t\tfor ($i = 0; $i < sizeof($array); $i++){\n\t\t\t$systems[$i] = new $array[$i](0, 0, 0, 0);\n\t\t}\n\t\treturn $systems;\n\t}\n\n\tpublic function logShips($elements){\n\t\t$data = func_get_args();\n\t\tif ($data[0] == \"all\"){\n\t\t\treturn $this->logAllShips();\n\t\t}\n\t\telse {\n\t\t\t$ships = array();\n\t\t\tfor ($i = 0; $i < sizeof($data); $i++){\n\t\t\t\t$ships[] = new $data[$i](0,0,0,0,0,0);\n\t\t\t\t$ships[sizeof($ships)-1]->setProps(0);\n\t\t\t}\n\t\t\treturn $ships;\n\t\t}\n\t}\n\n\tpublic function logAllShips(){\n\t\t$allShips = array();\n\n\t\t$factions = $this->getFactions();\n\t\tforeach ($factions as $faction){\n\t\t\t$ships = $this->getShipsForFaction($faction);\n\t\t\tforeach ($ships as $ship){\n\t\t\t\t$allShips[] = $ship;\n\t\t\t}\n\t\t}\n\n\t\tfor ($i = 0; $i < sizeof($allShips); $i++){\n\t\t\t$name = $allShips[$i][\"name\"];\n\t\t\t$ship = new $name(0, 0, 0, 0, 0, 0);\n\t\t\t$ship->setProps(1);\n\t\t\t$allShips[$i] = $ship;\n\t\t\tcontinue;\n\t\t}\n\n\treturn $allShips;\n\t}\n\n\tpublic function reset(){\n\t\tif (DBManager::app()->reset()){return true;}\n\t}\n\n\tstatic function convertToFireOrder($data){\n\t\treturn new FireOrder(\n\t\t\t$data[\"id\"],\n\t\t\t$data[\"gameid\"],\n\t\t\t$data[\"turn\"],\n\t\t\t$data[\"shooterid\"],\n\t\t\t$data[\"targetid\"],\n\t\t\t$data[\"weaponid\"],\n\t\t\t$data[\"shots\"],\n\t\t\t$data[\"req\"],\n\t\t\t$data[\"notes\"],\n\t\t\t$data[\"hits\"],\n\t\t\t$data[\"resolved\"]\n\t\t);\n\t}\n}\n?>\n",
			"file": "server/manager.php",
			"file_size": 43230,
			"file_write_time": 131499475812944960,
			"settings":
			{
				"buffer_size": 41786,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "\t<?php\n\n\tinclude_once 'global.php';\n\n\tclass DBManager {\n\n\t\tprivate $connection = null;\n\t\tstatic protected $instance = null;\n\n\t\tfunction __construct(){\n\n\t\t\tif ($this->connection === null){\n\t\t\t\t$user = \"aatu\"; $pass = \"Kiiski\";\n\t\t\t\t$user = \"root\"; $pass = \"147147\";\n\t\t\t\t$this->connection = new PDO(\"mysql:host=localhost;dbname=spacecombat\",$user,$pass);\n\t\t\t\t$this->connection->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\t\t\t\t$this->connection->setAttribute(PDO::ATTR_EMULATE_PREPARES, false);\n\t\t\t}\n\t\t}\n\t\t\n\t\tstatic public function app(){\n\t        if(self::$instance === null OR !is_a(self::$instance, \"DBManager\")) {\n\t            self::$instance = new DBManager();\n\t        }\n\t        return self::$instance;\n\t\t}\n\t\tpublic function getLastInsertId(){\n\t\t\treturn $this->connection->lastInsertId();\n\t\t}\n\n\t\tpublic function query($sql){\n\t\t\t///Debug::log(\"query: --\".$sql.\"--\");\n\t\t\t$stmt = $this->connection->prepare($sql);\n\t\t\t$stmt->execute();\n\t\t\treturn $stmt->fetchAll(PDO::FETCH_ASSOC);\n\t\t}\n\n\t\tpublic function delete($sql){\n\t\t\t\n\t\t\t$stmt = $this->connection->prepare($sql);\n\t\t\t$stmt->execute();\n\t\t\tif ($stmt->errorCode() == 0){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\tpublic function update($sql){\n\t\t\t\n\t\t\t//Debug::log(\"upd\");\n\t\t\t$stmt = $this->connection->prepare($sql);\n\t\t\t\n\t\t\tif ($stmt->execute()){\n\t\t\t\t//Debug::log(\"true\");\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t//Debug::log(\"false\");\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tpublic function registerAccount($name, $pass){\n\t\t\t\n\t\t\t$sql = \"SELECT * FROM users\";\n\t\t\t$result = $this->query($sql);\n\t\t\t\n\t\t\t$valid = true;\n\t\t\t\n\t\t\tif ($result){\n\t\t\t\tforeach ($result as $entry){\n\t\t\t\t\tif ($entry[\"username\"] == $name){\n\t\t\t\t\t\t$valid = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif ($valid){\n\t\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\t\tINSERT INTO users\n\t\t\t\t\t\t(username, password, access)\n\t\t\t\t\tVALUES\n\t\t\t\t\t\t(:username, :password, :access)\n\t\t\t\t\");\n\n\t\t\t\t$access = 0;\n\t\t\t\t\n\t\t\t\t$stmt->bindParam(\":username\", $name);\n\t\t\t\t$stmt->bindParam(\":password\", $pass);\n\t\t\t\t$stmt->bindParam(\":access\", $access);\n\t\t\t\t\n\t\t\t\t$stmt->execute();\n\t\t\t\tif ($stmt->errorCode() == 0){\n\t\t\t\t\techo \"<script>alert('Account created, please login');</script>\";\n\t\t\t\t}\n\t\t\t}\n\t\t\telse { \n\t\t\t\techo \"Account already exists !\";\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic function validateLogin($name, $pass){\t\t\n\t\t\t//Debug::log(\"validating login\");\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tSELECT id, access FROM users\n\t\t\t\tWHERE username = :username\n\t\t\t\tAND\tpassword = :password\n\t\t\t\");\n\t\t\t\n\t\t\t$stmt->bindParam(\":username\", $name);\n\t\t\t$stmt->bindParam(\":password\", $pass);\n\t\t\t$stmt->execute();\n\t\t\t\t\t\n\t\t\t$result = $stmt->fetch(PDO::FETCH_ASSOC);\n\t\t\t\n\t\t\tif ($result){\n\t\t\t\treturn $result;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn false;\n\t\t\t}\t\n\t\t}\n\n\t\tpublic function createNewGameAndJoin($userid, $name, $pv, $rv){\n\t\t\t$this->createNewGame($name, $pv, $rv);\n\t\t\t$id = $this->getLastInsertId();\n\t\t\t$this->createPlayerStatus($userid, $id, 0, -1, \"joined\");\n\t\t\tif ($id){\n\t\t\t\treturn $id;\n\t\t\t} else return 0;\n\t\t}\n\n\t\tpublic function createPlayerStatus($userid, $gameid, $turn, $phase, $status){\n\t\t\tDebug::log(\"createPlayerStatus\");\n\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tINSERT INTO playerstatus\n\t\t\t\t\t(userid, gameid, turn, phase, faction, value, status)\n\t\t\t\tVALUES\n\t\t\t\t\t(:userid, :gameid, :turn, :phase, :faction, :value, :status)\n\t\t\t\");\n\n\t\t\t$faction = \"\";\n\t\t\t$points = 0;\n\n\t\t\t$stmt->bindParam(\":userid\", $userid);\n\t\t\t$stmt->bindParam(\":gameid\", $gameid);\n\t\t\t$stmt->bindParam(\":turn\", $turn);\n\t\t\t$stmt->bindParam(\":phase\", $phase);\n\t\t\t$stmt->bindParam(\":faction\", $faction);\n\t\t\t$stmt->bindParam(\":value\", $points);\n\t\t\t$stmt->bindParam(\":status\", $status);\n\n\t\t\t$stmt->execute();\n\n\t\t\tif ($stmt->errorCode() == 0){\n\t\t\t\t//Debug::log(\"entry CREATE for player \".$userid.\" in game \".$gameid.\" phase: \".$phase.\" and status \".$status);\n\t\t\t\treturn true;\n\t\t\t} else return false;\n\t\t}\n\n\t\tpublic function getAllReinforcements($gameid, $userid){\n\t\t\t//Debug::log(\"getAvailableReinforcements\");\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tSELECT * FROM reinforcements \n\t\t\t\tWHERE gameid = :gameid\n\t\t\t\");\n\n\t\t\t$stmt->bindParam(\":gameid\", $gameid);\n\t\t\t//$stmt->bindParam(\":userid\", $userid);\n\n\t\t\t$stmt->execute();\n\n\t\t\t$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\n\n\t\t\tif ($result){\n\t\t\t\treturn $result;\n\t\t\t} else return null;\n\t\t}\n\n\t\tpublic function insertReinforcements($gameid, $userid, $ships){\n\t\t\tDebug::log(\"insertReinforcements: \".sizeof($ships));\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tINSERT INTO reinforcements\n\t\t\t\t\t(gameid, userid, name, eta, cost)\n\t\t\t\tVALUES\n\t\t\t\t\t(:gameid, :userid, :name, :eta, :cost)\n\t\t\t\");\n\n\t\t\tfor ($i = 0; $i < sizeof($ships); $i++){\n\t\t\t\t$stmt->bindParam(\":gameid\", $gameid);\n\t\t\t\t$stmt->bindParam(\":userid\", $userid);\n\t\t\t\t$stmt->bindParam(\":name\", $ships[$i][\"name\"]);\n\t\t\t\t$stmt->bindParam(\":eta\", $ships[$i][\"eta\"]);\n\t\t\t\t$stmt->bindParam(\":cost\", $ships[$i][\"value\"]);\n\t\t\t\t$stmt->execute();\n\t\t\t\t\n\t\t\t\tif ($stmt->errorCode() == 0){\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn $stmt->errorCode();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tpublic function createNewGame($name, $pv, $rv){\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tINSERT INTO games\n\t\t\t\t\t(name, status, turn, phase, pv, reinforce)\n\t\t\t\tVALUES\n\t\t\t\t\t(:name, :status, :turn, :phase, :pv, :reinforce)\n\t\t\t\");\n\t\t\t\n\t\t\t$status = \"open\";\n\t\t\t$turn = -1;\n\t\t\t$phase = -1;\n\t\t\t\n\t\t\t$stmt->bindParam(\":name\", $name);\n\t\t\t$stmt->bindParam(\":status\", $status);\n\t\t\t$stmt->bindParam(\":turn\", $turn);\n\t\t\t$stmt->bindParam(\":phase\", $phase);\n\t\t\t$stmt->bindParam(\":pv\", $pv);\n\t\t\t$stmt->bindParam(\":reinforce\", $rv);\n\t\t\t\n\t\t\t$stmt->execute();\n\t\t\t\n\t\t\tif ($stmt->errorCode() == 0){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse {\n\t\t\t\techo \"<script>alert('ERROR');</script>\";\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic function leaveGame($userid, $gameid){\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tDELETE FROM playerstatus\n\t\t\t\tWHERE gameid = :gameid\n\t\t\t\tAND userid = :userid\n\t\t\t\");\t\t\n\t\t\t\n\t\t\t$stmt->bindParam(\":gameid\", $gameid);\n\t\t\t$stmt->bindParam(\":userid\", $userid);\n\t\t\t$stmt->execute();\n\t\t\t\n\t\t\tif ($stmt->errorCode() == 0){\n\t\t\t\t$sql = \"(SELECT * FROM playerstatus where gameid = \".$gameid.\")\";\n\t\t\t\t$result = $this->query($sql);\n\t\t\t\tif (!sizeof($result)){\n\t\t\t\t\tDebug::log(\"deleting game\");\n\t\t\t\t\t$sql = \"DELETE FROM games WHERE id = \".$gameid;\n\t\t\t\t\tDebug::log($sql);\n\t\t\t\t\t$this->query($sql);\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn $stmt->errorCode();\n\t\t\t}\n\t\t}\n\n\t\tpublic function processInitialBuy($userid, $gameid, $units, $rem, $faction){\n\t\t\t$this->insertUnits($userid, $gameid, $units);\n\t\t\t$this->insertLoads($userid, $gameid, $units);\n\t\t\t$this->setReinforceFaction($userid, $gameid, $faction);\n\t\t\t$this->addReinforceValue($userid, $gameid, $rem);\n\t\t\t$this->setPlayerStatus($userid, $gameid, -1, -1, \"ready\");\n\t\t\treturn true;\n\t\t}\n\n\t\tpublic function insertUnits($userid, $gameid, &$units){\n\t\t\tDebug::log(\"DB insertUnits S: \".sizeof($units));\n\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tINSERT INTO units \n\t\t\t\t\t(gameid, userid, ship, ball, name, status, available, destroyed)\n\t\t\t\tVALUES\n\t\t\t\t\t(:gameid, :userid, :ship, :ball, :name, :status, :available, :destroyed)\n\t\t\t\");\n\n\t\t\t$missions = array();\n\n\t\t\t$ship = 0;\n\t\t\t$ball = 0;\n\t\t\t$status = \"\";\n\t\t\t$destroyed = 0;\n\n\t\t\tfor ($i = 0; $i < sizeof($units); $i++){\n\t\t\t\tif ($units[$i][\"type\"] == \"Flight\"){\n\t\t\t\t\t$status = \"deployed\";\n\t\t\t\t}\n\t\t\t\telse if ($units[$i][\"type\"] == \"Salvo\"){\n\t\t\t\t\t$ball = 1;\n\t\t\t\t\t$status = \"deployed\";\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$ship = 1;\n\t\t\t\t\t$status = \"bought\";\n\t\t\t\t}\n\n\t\t\t\tif (isset($units[$i][\"userid\"])){\n\t\t\t\t\t$userid = $units[$i][\"userid\"];\n\t\t\t\t}\n\n\t\t\t\t$stmt->bindParam(\":gameid\", $gameid);\n\t\t\t\t$stmt->bindParam(\":userid\", $userid);\n\t\t\t\t$stmt->bindParam(\":ship\", $ship);\n\t\t\t\t$stmt->bindParam(\":ball\", $ball);\n\t\t\t\t$stmt->bindParam(\":name\", $units[$i][\"name\"]);\n\t\t\t\t$stmt->bindParam(\":status\", $status);\n\t\t\t\t$stmt->bindValue(\":available\", (floor($units[$i][\"turn\"]) + floor($units[$i][\"eta\"])));\n\t\t\t\t$stmt->bindParam(\":destroyed\", $destroyed);\n\t\t\t\t$stmt->execute();\n\t\t\t\t\n\t\t\t\tif ($stmt->errorCode() == 0){\n\t\t\t\t\t$units[$i][\"id\"] = $this->getLastInsertId();\n\t\t\t\t\t$units[$i][\"mission\"][\"unitid\"] = $units[$i][\"id\"];\n\t\t\t\t\t$missions[] = $units[$i][\"mission\"];\n\t\t\t\t\tDebug::log(\"success, got id: \".$units[$i][\"id\"]);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tDebug::log($stmt->errorCode());\n\t\t\t\t\tDebug::log(\"error\");\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$this->insertSubUnits($units);\n\t\t\t$this->insertMissions($missions);\n\t\t\t$this->insertClientActions($units);\n\t\t}\n\n\n\t\tpublic function insertSubUnits($units){\n\t\t\tDebug::log(\"insertSubUnits\");\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tINSERT INTO subunits \n\t\t\t\t\t(unitid, amount, name)\n\t\t\t\tVALUES\n\t\t\t\t\t(:unitid, :amount, :name)\n\t\t\t\");\n\n\t\t\tfor ($i = 0; $i < sizeof($units); $i++){\n\t\t\t\tif (!isset($units[$i][\"launchData\"])){continue;}\n\n\t\t\t\t$stmt->bindParam(\":unitid\", $units[$i][\"id\"]);\n\t\t\t\tfor ($j = 0; $j < sizeof($units[$i][\"launchData\"][\"loads\"]); $j++){\n\t\t\t\t\t$stmt->bindValue(\":amount\", $units[$i][\"launchData\"][\"loads\"][$j][\"launch\"]);\n\t\t\t\t\t$stmt->bindValue(\":name\", $units[$i][\"launchData\"][\"loads\"][$j][\"name\"]);\n\t\t\t\t\t$stmt->execute();\n\n\t\t\t\t\tif ($stmt->errorCode() == 0){\n\t\t\t\t\t\tDebug::log(\"success insertSubUnits\");\n\t\t\t\t\t} else Debug::log(\"error insertSubUnits\");\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tpublic function insertMissions($missions){\n\t\t\tDebug::log(\"insertMissions s: \".sizeof($missions));\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tINSERT INTO missions \n\t\t\t\t\t(unitid, type, turn, targetid, x, y, arrived)\n\t\t\t\tVALUES\n\t\t\t\t\t(:unitid, :type, :turn, :targetid, :x, :y, :arrived)\n\t\t\t\");\n\n\t\t\tfor ($i = 0; $i < sizeof($missions); $i++){\n\t\t\t\tif ($missions[$i][\"new\"] == 0){continue;}\n\n\t\t\t\t$stmt->bindParam(\":unitid\", $missions[$i][\"unitid\"]);\n\t\t\t\t$stmt->bindParam(\":type\", $missions[$i][\"type\"]);\n\t\t\t\t$stmt->bindParam(\":turn\", $missions[$i][\"turn\"]);\n\t\t\t\t$stmt->bindParam(\":targetid\", $missions[$i][\"targetid\"]);\n\t\t\t\t$stmt->bindParam(\":x\", $missions[$i][\"x\"]);\n\t\t\t\t$stmt->bindParam(\":y\", $missions[$i][\"y\"]);\n\t\t\t\t$stmt->bindParam(\":arrived\", $missions[$i][\"arrived\"]);\n\t\t\t\t$stmt->execute();\n\t\t\t\t\n\t\t\t\tif ($stmt->errorCode() == 0){\n\t\t\t\t\tDebug::log(\"success insertMissions\");\n\t\t\t\t} else {\n\t\t\t\t\tDebug::log(\"error insertMissions\");\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tpublic function updateSystemLoad($data){\n\t\t\tDebug::log(\"updateSystemLoad: \".sizeof($data));\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tUPDATE loads\n\t\t\t\tSET amount = amount - :amount\n\t\t\t\tWHERE shipid = :shipid\n\t\t\t\tAND systemid = :systemid\n\t\t\t\tAND name = :name\n\t\t\t\");\n\n\t\t\tfor ($i = 0; $i < sizeof($data); $i++){\n\t\t\t\tif (!isset($data[$i][\"launchData\"])){continue;}\n\n\t\t\t\t$stmt->bindParam(\":shipid\", $data[$i][\"launchData\"][\"shipid\"]);\n\t\t\t\t$stmt->bindParam(\":systemid\", $data[$i][\"launchData\"][\"systemid\"]);\n\n\t\t\t\tfor ($j = 0; $j < sizeof($data[$i][\"launchData\"][\"loads\"]); $j++){\n\t\t\t\t\t$stmt->bindValue(\":name\", $data[$i][\"launchData\"][\"loads\"][$j][\"name\"]);\n\t\t\t\t\t$stmt->bindValue(\":amount\", $data[$i][\"launchData\"][\"loads\"][$j][\"launch\"]);\n\t\t\t\t\t$stmt->execute();\n\n\t\t\t\t\tif ($stmt->errorCode() == 0){\n\t\t\t\t\t\tDebug::log(\"success updateSystemLoad\");\n\t\t\t\t\t} else Debug::log(\"error updateSystemLoad\");\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tpublic function insertLoads($userid, $gameid, &$units){\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tINSERT INTO loads \n\t\t\t\t\t(shipid, systemid, name, amount)\n\t\t\t\tVALUES\n\t\t\t\t\t(:shipid, :systemid, :name, :amount)\n\t\t\t\");\n\n\t\t\tfor ($i = 0; $i < sizeof($units); $i++){\n\t\t\t\tif (isset($units[$i][\"upgrades\"])){\n\t\t\t\t\tfor ($j = 0; $j < sizeof($units[$i][\"upgrades\"]); $j++){\n\t\t\t\t\t\tfor ($k = 0; $k < sizeof($units[$i][\"upgrades\"][$j][\"loads\"]); $k++){\n\t\t\t\t\t\t\t$stmt->bindParam(\":shipid\", $units[$i][\"id\"]);\n\t\t\t\t\t\t\t$stmt->bindParam(\":systemid\", $units[$i][\"upgrades\"][$j][\"systemid\"]);\n\t\t\t\t\t\t\t$stmt->bindParam(\":name\", $units[$i][\"upgrades\"][$j][\"loads\"][$k][\"name\"]);\n\t\t\t\t\t\t\t$stmt->bindParam(\":amount\", $units[$i][\"upgrades\"][$j][\"loads\"][$k][\"amount\"]);\n\n\t\t\t\t\t\t\t$stmt->execute();\n\t\t\t\t\t\t\tif ($stmt->errorCode() == 0){\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tpublic function insertServerActions($units){\n\t\t\t//Debug::log(\"DB insertServerActions s: \".sizeof($units));\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tINSERT INTO actions \n\t\t\t\t\t(shipid, turn, type, dist, x, y, a, cost, delay, costmod, resolved)\n\t\t\t\tVALUES\n\t\t\t\t\t(:shipid, :turn, :type, :dist, :x, :y, :a, :cost, :delay, :costmod, :resolved)\n\t\t\t\");\n\n\t\t\tfor ($i = 0; $i < sizeof($units); $i++){\n\t\t\t\tfor ($j = 0; $j < sizeof($units[$i]->actions); $j++){\n\t\t\t\t\tif ($units[$i]->actions[$j]->resolved == 0){\n\t\t\t\t\t\t//Debug::log(\"Insert Action for unit: \".$units[$i]->id);\n\t\t\t\t\t\t$units[$i]->actions[$j]->resolved = 1;\n\t\t\t\t\t\t\n\t\t\t\t\t\t$stmt->bindParam(\":shipid\", $units[$i]->id);\n\t\t\t\t\t\t$stmt->bindParam(\":turn\", $units[$i]->actions[$j]->turn);\n\t\t\t\t\t\t$stmt->bindParam(\":type\", $units[$i]->actions[$j]->type);\n\t\t\t\t\t\t$stmt->bindParam(\":dist\", $units[$i]->actions[$j]->dist);\n\t\t\t\t\t\t$stmt->bindParam(\":x\", $units[$i]->actions[$j]->x);\n\t\t\t\t\t\t$stmt->bindParam(\":y\", $units[$i]->actions[$j]->y);\n\t\t\t\t\t\t$stmt->bindParam(\":a\", $units[$i]->actions[$j]->a);\n\t\t\t\t\t\t$stmt->bindParam(\":cost\", $units[$i]->actions[$j]->cost);\n\t\t\t\t\t\t$stmt->bindParam(\":delay\", $units[$i]->actions[$j]->delay);\n\t\t\t\t\t\t$stmt->bindParam(\":costmod\", $units[$i]->actions[$j]->costmod);\n\t\t\t\t\t\t$stmt->bindParam(\":resolved\",$units[$i]->actions[$j]->resolved);\n\t\t\t\t\t\t$stmt->execute();\t\t\n\t\t\t\t\t\tif ($stmt->errorCode() == 0){\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tpublic function gameIsReady($gameid){\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tSELECT playerstatus.status from playerstatus\n\t\t\t\tJOIN games\n\t\t\t\tON games.id = :gameid\n\t\t\t\tAND playerstatus.gameid = :gameid\n\t\t\t\");\n\t\t\t\n\t\t\t$stmt->bindParam(\":gameid\", $gameid);\n\t\t\t$stmt->execute();\n\t\t\t$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\n\n\t\t\tif (sizeof($result) > 1){\n\t\t\t\t$ready = true;\n\n\t\t\t\tforeach ($result as $player){\n\t\t\t\t\tif ($player[\"status\"] != \"ready\"){\n\t\t\t\t\t\t$ready = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ($ready){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tpublic function startGame($gameid){\n\t\t\t\n\t\t\t$players = $this->getPlayersInGame($gameid);\n\t\t\t$deploys = array();\n\n\n\t\t\tfor ($i = 0; $i < sizeof($players); $i++){\n\t\t\t\t$this->setPlayerstatus($players[$i][\"userid\"], $gameid, 1, -1, \"waiting\");\n\t\t\t\t$units = $this->query(\"SELECT * FROM units WHERE gameid = \".$gameid.\" AND userid = \".$players[$i][\"userid\"]);\n\t\t\t\tfor ($j = 0; $j < sizeof($units); $j++){\n\t\t\t\t\t$x = mt_rand(-700, -400) * (1-$i*2);\n\t\t\t\t\t$y = mt_rand(-600, 600) * (1-$i*2);\n\t\t\t\t\t$s = mt_rand(40, 70);\n\n\t\t\t\t\t$deploys[] = array(\"gameid\" => $gameid, \"userid\" => $players[$i][\"userid\"], \"turn\" => 1, \"phase\" => -1, \"x\" => $x, \"y\" => $y, \"s\" => $s);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t$this->insertDeployArea($deploys);\n\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tUPDATE games \n\t\t\t\tSET \n\t\t\t\t\tstatus = :status,\n\t\t\t\t\tturn = :turn\n\t\t\t\tWHERE\n\t\t\t\t\tid = :id\t\t\t\t\n\t\t\t\");\n\n\t\t\t$status = \"active\";\n\t\t\t$turn = 1;\n\n\t\t\t$stmt->bindParam(\":status\", $status);\n\t\t\t$stmt->bindParam(\":turn\", $turn);\n\t\t\t$stmt->bindParam(\":id\", $gameid);\n\n\t\t\t$stmt->execute();\n\n\t\t\tif ($stmt->errorCode() == 0){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse return false;\n\t\t}\n\n\t\tpublic function insertDeployArea($data){\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tINSERT INTO deploys\n\t\t\t\t(gameid, userid, turn, phase, x, y, s)\n\t\t\t\tVALUES\n\t\t\t\t(:gameid, :userid, :turn, :phase, :x, :y, :s)\t\n\t\t\t\");\n\n\t\t\tfor ($i = 0; $i < sizeof($data); $i++){\n\t\t\t\t$stmt->bindParam(\":gameid\", $data[$i][\"gameid\"]);\n\t\t\t\t$stmt->bindParam(\":userid\", $data[$i][\"userid\"]);\n\t\t\t\t$stmt->bindParam(\":turn\", $data[$i][\"turn\"]);\n\t\t\t\t$stmt->bindParam(\":phase\", $data[$i][\"phase\"]);\n\t\t\t\t$stmt->bindParam(\":x\", $data[$i][\"x\"]);\n\t\t\t\t$stmt->bindParam(\":y\", $data[$i][\"y\"]);\n\t\t\t\t$stmt->bindParam(\":s\", $data[$i][\"s\"]);\n\n\t\t\t\t$stmt->execute();\n\n\t\t\t\tif ($stmt->errorCode() == 0){\n\t\t\t\t\t//Debug::log(\"ding\");\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tpublic function getDeployArea($gameid, $turn){\n\t\t\t//Debug::log(\"getDeploy: \".$gameid.\"/\".$turn);\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tSELECT * FROM deploys\n\t\t\t\tWHERE gameid = :gameid\n\t\t\t\tAND turn = :turn\"\n\t\t\t);\n\n\t\t\t$stmt->bindParam(\":gameid\", $gameid);\n\t\t\t$stmt->bindParam(\":turn\", $turn);\n\n\t\t\t$stmt->execute();\n\t\t\treturn $stmt->fetchAll(PDO::FETCH_ASSOC);\n\t\t}\n\n\t\tpublic function requestShipsDB($userid, $gameid, $turn, $picks){\n\t\t\t//Debug::log(\"requestShipsDB, s: \".sizeof($picks));\n\t\t\t$avail = $this->getAllReinforcements($gameid, $userid);\n\t\t\t$delete = array();\n\t\t\t//Debug::log(\"a: \".sizeof($avail));\n\t\t\t$ships = array();\n\t\t\t$cost = 0;\n\n\t\t\tfor ($i = 0; $i < sizeof($picks); $i++){\n\t\t\t\tfor ($j = 0; $j < sizeof($avail); $j++){\n\t\t\t\t\t//Debug::log(\"s: \".$ships[$i][\"id\"].\" vs \".$avail[$j][\"id\"]);\n\t\t\t\t\tif (abs($picks[$i][\"id\"]) == $avail[$j][\"id\"]){\n\t\t\t\t\t\t$picks[$i][\"actions\"][0][\"turn\"] += $avail[$j][\"eta\"];\n\t\t\t\t\t\t$avail[$j][\"actions\"] = $picks[$i][\"actions\"];\n\t\t\t\t\t\t$avail[$j][\"turn\"] = $turn;\n\t\t\t\t\t\t$cost += $avail[$j][\"cost\"];\n\t\t\t\t\t\t$ships[] = $avail[$j];\n\t\t\t\t\t\t$delete[] = $avail[$j];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$this->deleteReinforcements($delete);\n\t\t\t$this->addReinforceValue($userid, $gameid, -$cost);\n\t\t\t$this->insertUnits($userid, $gameid, $ships);\n\t\t\t$this->insertClientActions($ships);\n\t\t}\n\n\t\tpublic function deleteReinforcements($units){\n\t\t\tfor ($i = 0; $i < sizeof($units); $i++){\n\t\t\t\t$sql = \"DELETE FROM reinforcements WHERE id = \".$units[$i][\"id\"];\n\t\t\t\t$this->delete($sql);\n\t\t\t}\n\t\t}\n\n\t\tpublic function deployShipsDB($gameid, $ships){\n\t\t\t//Debug::log(\"requestShipsDB, s: \".sizeof($ships));\n\t\t\t//$this->setUnitStatusDB($ships);\n\t\t\t$this->insertClientActions($ships);\n\t\t}\n\n\t\tpublic function deployFlightsDB($userid, $gameid, $flights){\n\t\t\tDebug::log(\"deployFlights \".sizeof($flights));\n\t\t\tif (sizeof($flights)){\n\t\t\t\t$this->insertUnits($userid, $gameid, $flights);\n\t\t\t\t$this->updateSystemLoad($flights);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tpublic function setNewMissions($data){\n\t\t\tDebug::log(\"setNewMission s: \".sizeof($data));\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tUPDATE missions\n\t\t\t\tSET type = :type,\n\t\t\t\t\tturn = :turn,\n\t\t\t\t\ttargetid = :targetid,\n\t\t\t\t\tx = :x,\n\t\t\t\t\ty = :y,\n\t\t\t\t\tarrived = :arrived\n\t\t\t\tWHERE unitid = :unitid\n\t\t\t\");\n\n\t\t\tfor ($i = 0; $i < sizeof($data); $i++){\n\t\t\t\t$stmt->bindParam(\":type\", $data[$i][\"type\"]);\n\t\t\t\t$stmt->bindParam(\":turn\", $data[$i][\"turn\"]);\n\t\t\t\t$stmt->bindParam(\":targetid\", $data[$i][\"targetid\"]);\n\t\t\t\t$stmt->bindParam(\":x\", $data[$i][\"x\"]);\n\t\t\t\t$stmt->bindParam(\":y\", $data[$i][\"y\"]);\n\t\t\t\t$stmt->bindParam(\":arrived\", $data[$i][\"arrived\"]);\n\t\t\t\t$stmt->bindParam(\":unitid\", $data[$i][\"unitid\"]);\n\n\t\t\t\t$stmt->execute();\n\t\t\t\tif ($stmt->errorCode() == 0){\n\t\t\t\t\tcontinue;\n\t\t\t\t} else Debug::log(\"ERROR\"); return false;\n\t\t\t}\n\t\t}\n\n\t\tpublic function setNewMissionsa($data){\n\t\t\tDebug::log(\"setNewMission s: \".sizeof($data));\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tUPDATE missions\n\t\t\t\tSET type = :type,\n\t\t\t\t\tturn = :turn,\n\t\t\t\t\ttargetid = :targetid,\n\t\t\t\t\tx = :x,\n\t\t\t\t\ty = :y,\n\t\t\t\t\tarrived = :arrived\n\t\t\t\tWHERE unitid = :unitid\n\t\t\t\");\n\n\t\t\tfor ($i = 0; $i < sizeof($data); $i++){\n\t\t\t\t$stmt->bindParam(\":type\", $data[$i][\"type\"]);\n\t\t\t\t$stmt->bindParam(\":turn\", $data[$i][\"turn\"]);\n\t\t\t\t$stmt->bindParam(\":targetid\", $data[$i][\"targetid\"]);\n\t\t\t\t$stmt->bindParam(\":x\", $data[$i][\"x\"]);\n\t\t\t\t$stmt->bindParam(\":y\", $data[$i][\"y\"]);\n\t\t\t\t$stmt->bindParam(\":arrived\", $data[$i][\"arrived\"]);\n\t\t\t\t$stmt->bindParam(\":unitid\", $data[$i][\"unitid\"]);\n\n\t\t\t\t$stmt->execute();\n\t\t\t\tif ($stmt->errorCode() == 0){\n\t\t\t\t\tcontinue;\n\t\t\t\t} else Debug::log(\"ERROR\"); return false;\n\t\t\t}\n\t\t}\n\n\t\tpublic function updateMissionState($data){\n\t\t\tDebug::log(\"updateMissionState\");\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tUPDATE missions\n\t\t\t\tSET type = :type,\n\t\t\t\t\tturn = :turn,\n\t\t\t\t\ttargetid = :targetid,\n\t\t\t\t\tx = :x,\n\t\t\t\t\ty = :y,\n\t\t\t\t\tarrived = :arrived\n\t\t\t\tWHERE id = :id\n\t\t\t\");\n\n\t\t\tfor ($i = 0; $i < sizeof($data); $i++){\n\t\t\t\t$stmt->bindParam(\":type\", $data[$i]->type);\n\t\t\t\t$stmt->bindParam(\":turn\", $data[$i]->turn);\n\t\t\t\t$stmt->bindParam(\":targetid\", $data[$i]->targetid);\n\t\t\t\t$stmt->bindParam(\":x\", $data[$i]->x);\n\t\t\t\t$stmt->bindParam(\":y\", $data[$i]->y);\n\t\t\t\t$stmt->bindParam(\":arrived\", $data[$i]->arrived);\n\t\t\t\t$stmt->bindParam(\":id\", $data[$i]->id);\n\n\t\t\t\t$stmt->execute();\n\t\t\t\tif ($stmt->errorCode() == 0){\n\t\t\t\t\tcontinue;\n\t\t\t\t} else Debug::log(\"ERROR\"); return false;\n\t\t\t}\n\t\t}\n\n\t\tpublic function updateUnitEndState($states, $turn, $phase){\n\t\t\tDebug::log(\"updateUnitEndState s:\".sizeof($states).\" \".$turn.\"/\".$phase);\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tUPDATE units\n\t\t\t\tSET x = :x,\n\t\t\t\t\ty = :y,\n\t\t\t\t\tangle = :angle,\n\t\t\t\t\tdelay = :delay,\n\t\t\t\t\tthrust = :thrust,\n\t\t\t\t\tturn = :turn,\n\t\t\t\t\tphase = :phase\n\t\t\t\tWHERE id = :id\n\t\t\t\");\n\n\t\t\tfor ($i = 0; $i < sizeof($states); $i++){\n\t\t\t\t//foreach ($states[$i] as $key => $value){Debug::log($key.\" / \".$value);}\n\n\t\t\t\t$stmt->bindParam(\":x\", $states[$i][\"x\"]);\n\t\t\t\t$stmt->bindParam(\":y\", $states[$i][\"y\"]);\n\t\t\t\t$stmt->bindParam(\":angle\", $states[$i][\"angle\"]);\n\t\t\t\t$stmt->bindParam(\":delay\", $states[$i][\"delay\"]);\n\t\t\t\t$stmt->bindParam(\":thrust\", $states[$i][\"thrust\"]);\n\t\t\t\t$stmt->bindParam(\":turn\", $turn);\n\t\t\t\t$stmt->bindParam(\":phase\", $phase);\n\t\t\t\t$stmt->bindParam(\":id\",  $states[$i][\"id\"]);\n\t\t\t\t$stmt->execute();\n\n\t\t\t\tif ($stmt->errorCode() == 0){\n\t\t\t\t\tcontinue;\n\t\t\t\t}// else var_dump($stmt->errorCode());\n\t\t\t}\t\n\t\t\treturn true;\n\t}\n\n\t\tpublic function setUnitStatusDB($units){\n\t\t\t//Debug::log(\"setUnitStatusDB\");\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tUPDATE units \n\t\t\t\tSET status = :status\n\t\t\t\tWHERE id = :id\n\t\t\t\");\n\n\t\t\tfor ($i = 0; $i < sizeof($units); $i++){\n\t\t\t\t$stmt->bindParam(\":status\", $units[$i]->status);\n\t\t\t\t$stmt->bindParam(\":id\", $units[$i]->id);\n\t\t\t\t$stmt->execute();\n\n\t\t\t\tif ($stmt->errorCode() == 0){\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tpublic function destroyUnitsDB($array){\n\t\t\tDebug::log(\"destroyUnitsDB\");\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tUPDATE units \n\t\t\t\tSET \n\t\t\t\t\tdestroyed = :destroyed\n\t\t\t\tWHERE\n\t\t\t\t\tid = :id\n\t\t\t\");\n\t\t\t\n\t\t\tfor ($i = 0; $i < sizeof($array); $i++){\n\t\t\t\tfor ($j = 0; $j < sizeof($array[$i]); $j++){\n\t\t\t\t\t$stmt->bindParam(\":id\", $array[$i][$j]->id);\n\t\t\t\t\t$stmt->bindParam(\":destroyed\",  $array[$i][$j]->destroyed);\n\t\t\t\t\t$stmt->execute();\n\n\t\t\t\t\tif ($stmt->errorCode() == 0){\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tpublic function insertDogfights($gameid, $turn, $dogfights){\n\t\t\tDebug::log(\"insertDogfights\");\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tINSERT INTO dogfights \n\t\t\t\t\t(gameid, turn, a, b)\n\t\t\t\tVALUES\n\t\t\t\t\t(:gameid, :turn, :a, :b)\n\t\t\t\");\n\n\t\t\tfor ($i = 0; $i < sizeof($dogfights); $i++){\n\t\t\t\t$stmt->bindParam(\":gameid\", $gameid);\n\t\t\t\t$stmt->bindParam(\":turn\", $turn);\n\t\t\t\t$stmt->bindParam(\":a\", $dogfights[$i][0]);\n\t\t\t\t$stmt->bindParam(\":b\", $dogfights[$i][1]);\n\t\t\t\t$stmt->execute();\n\n\t\t\t\tif ($stmt->errorCode() == 0){\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tpublic function getDogfights($units){\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tSELECT * FROM dogfights\n\t\t\t\tWHERE a = :a\n\t\t\t\tOR b = :b\n\t\t\t\");\n\n\t\t\tfor ($i = 0; $i < sizeof($units); $i++){\n\t\t\t\tif ($units[$i]->flight){\n\t\t\t\t\t$stmt->bindParam(\":a\", $units[$i]->id);\n\t\t\t\t\t$stmt->bindParam(\":b\", $units[$i]->id);\n\t\t\t\t\t$stmt->execute();\n\t\t\t\t\t$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\n\t\t\t\t\tif ($result){\n\t\t\t\t\t\tfor ($j = 0; $j < sizeof($result); $j++){\n\t\t\t\t\t\t\tif ($result[$j][\"a\"] == $units[$i]->id){\n\t\t\t\t\t\t\t\t$units[$i]->dogfights[] = $result[$j][\"b\"];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t$units[$i]->dogfights[] = $result[$j][\"a\"];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\n\t\tpublic function deleteDogfightKill($data, $gameid){\n\t\t\tDebug::log(\"deleteDogfightKill: \".sizeof($data));\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tDELETE FROM dogfights\n\t\t\t\tWHERE \n\t\t\t\t\tgameid = :gameid\n\t\t\t\tAND\n\t\t\t\t\ta = :a\n\t\t\t\tOR \n\t\t\t\t\tb = :b\n\t\t\t\");\n\n\t\t\tfor ($i = 0; $i < sizeof($data); $i++){\n\t\t\t\t$stmt->bindParam(\":gameid\", $gameid);\n\t\t\t\t$stmt->bindParam(\":a\", $data[$i]);\n\t\t\t\t$stmt->bindParam(\":b\", $data[$i]);\n\t\t\t\t$stmt->execute();\n\t\t\t}\n\t\t}\t\n\n\t\tpublic function deleteDogfightRange($data, $gameid){\n\t\t\tDebug::log(\"deleteDogfightRange: \".sizeof($data));\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tDELETE FROM dogfights\n\t\t\t\tWHERE \n\t\t\t\t\tgameid = :gameid\n\t\t\t\tAND\n\t\t\t\t\ta = :a\n\t\t\t\tAND \n\t\t\t\t\tb = :b\n\t\t\t\");\n\n\t\t\tfor ($i = 0; $i < sizeof($data); $i++){\n\t\t\t\t$stmt->bindParam(\":gameid\", $gameid);\n\t\t\t\t$stmt->bindParam(\":a\", $data[$i][\"a\"]);\n\t\t\t\t$stmt->bindParam(\":b\", $data[$i][\"b\"]);\n\t\t\t\t$stmt->execute();\n\t\t\t}\n\t\t}\n\n\t\tpublic function insertClientActions($units){\n\t\t\tDebug::log(\"insertClientActions s: \".sizeof($units));\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tINSERT INTO actions \n\t\t\t\t\t(shipid, turn, type, dist, x, y, a, cost, delay, costmod, resolved)\n\t\t\t\tVALUES\n\t\t\t\t\t(:shipid, :turn, :type, :dist, :x, :y, :a, :cost, :delay, :costmod, :resolved)\n\t\t\t\");\n\n\t\t\t$resolved = 0;\n\n\t\t\tfor ($i = 0; $i < sizeof($units); $i++){\n\t\t\t\t//Debug::log($i);\n\t\t\t\t$stmt->bindParam(\":shipid\", $units[$i][\"id\"]);\n\n\t\t\t\tfor ($j = 0; $j < sizeof($units[$i][\"actions\"]); $j++){\n\t\t\t\t\t//Debug::log($j);\n\t\t\t\t\tif ($units[$i][\"actions\"][$j][\"resolved\"]){\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t};\n\t\t\t\t\t//Debug::log(\"DING 1\");\n\t\t\t\t\t$stmt->bindParam(\":turn\", $units[$i][\"actions\"][$j][\"turn\"]);\n\t\t\t\t\t$stmt->bindParam(\":type\", $units[$i][\"actions\"][$j][\"type\"]);\n\t\t\t\t\t$stmt->bindParam(\":dist\", $units[$i][\"actions\"][$j][\"dist\"]);\n\t\t\t\t\t$stmt->bindParam(\":x\", $units[$i][\"actions\"][$j][\"x\"]);\n\t\t\t\t\t$stmt->bindParam(\":y\", $units[$i][\"actions\"][$j][\"y\"]);\n\t\t\t\t\t$stmt->bindParam(\":a\", $units[$i][\"actions\"][$j][\"a\"]);\n\t\t\t\t\t$stmt->bindParam(\":cost\", $units[$i][\"actions\"][$j][\"cost\"]);\n\t\t\t\t\t$stmt->bindParam(\":delay\", $units[$i][\"actions\"][$j][\"delay\"]);\n\t\t\t\t\t$stmt->bindParam(\":costmod\", $units[$i][\"actions\"][$j][\"costmod\"]);\n\t\t\t\t\t$stmt->bindParam(\":resolved\", $resolved);\n\t\t\t\t\t$stmt->execute();\n\n\t\t\t\t\tif ($stmt->errorCode() == 0){\n\t\t\t\t\t\t//Debug::log(\"DING 2\");\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t} \n\t\t\t\t\telse {\n\t\t\t\t\t\tDebug::log($stmt->errorCode());\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tpublic function insertPowers($gameid, $turn, $powers){\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tINSERT INTO powers \n\t\t\t\t\t( unitid, systemid, turn, type, cost )\n\t\t\t\tVALUES\n\t\t\t\t\t( :unitid, :systemid, :turn, :type, :cost )\n\t\t\t\");\n\n\t\t\tfor ($i = 0; $i < sizeof($powers); $i++){\n\t\t\t\t$stmt->bindParam(\":unitid\", $powers[$i][\"unitid\"]);\n\t\t\t\t$stmt->bindParam(\":systemid\", $powers[$i][\"systemid\"]);\n\t\t\t\t$stmt->bindParam(\":turn\", $powers[$i][\"turn\"]);\n\t\t\t\t$stmt->bindParam(\":type\", $powers[$i][\"type\"]);\n\t\t\t\t$stmt->bindParam(\":cost\", $powers[$i][\"cost\"]);\n\n\t\t\t\t$stmt->execute();\n\n\t\t\t\tif ($stmt->errorCode() == 0){\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse return false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tpublic function insertClientFireOrders($gameid, $turn, $fires){\n\t\t\t//Debug::log(\"insertClientFireOrders: \".sizeof($fires));\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tINSERT INTO fireorders \n\t\t\t\t\t(gameid, turn, shooterid, targetid, weaponid, resolved)\n\t\t\t\tVALUES\n\t\t\t\t\t(:gameid, :turn, :shooterid, :targetid, :weaponid, :resolved)\n\t\t\t\");\n\n\t\t\t$x = 0;\n\t\t\t$y = 0;\n\n\t\t\tfor ($i = 0; $i < sizeof($fires); $i++){\n\t\t\t\t$stmt->bindParam(\":gameid\", $gameid);\n\t\t\t\t$stmt->bindParam(\":turn\", $turn);\n\t\t\t\t$stmt->bindParam(\":shooterid\", $fires[$i][\"shooterid\"]);\n\t\t\t\t$stmt->bindParam(\":targetid\", $fires[$i][\"targetid\"]);\n\t\t\t\t$stmt->bindParam(\":weaponid\", $fires[$i][\"weaponid\"]);\n\t\t\t\t$stmt->bindParam(\":resolved\", $fires[$i][\"resolved\"]);\n\n\t\t\t\t$stmt->execute();\n\n\t\t\t\tif ($stmt->errorCode() == 0){\n\t\t\t\t\tcontinue;\n\t\t\t\t} else return false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\t//return new FireOrder(-1, $gameid, $turn, $this->id, $this->mission->id, $this->structures[0]->systems[0]->id, $this->getShots(), $0, \"\", 0, 0);\n\n\t\tpublic function insertServerFireOrder($fires){\n\t\t\tDebug::log(\"insertServerFireOrder: \".sizeof($fires));\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tINSERT INTO fireorders \n\t\t\t\t\t(gameid, turn, shooterid, targetid, weaponid, shots)\n\t\t\t\tVALUES\n\t\t\t\t\t(:gameid, :turn, :shooterid, :targetid, :weaponid, :shots)\n\t\t\t\");\n\n\t\t\t$x = 0;\n\t\t\t$y = 0;\n\n\t\t\tfor ($i = 0; $i < sizeof($fires); $i++){\n\t\t\t\t$stmt->bindParam(\":gameid\", $fires[$i]->gameid);\n\t\t\t\t$stmt->bindParam(\":turn\", $fires[$i]->turn);\n\t\t\t\t$stmt->bindParam(\":shooterid\", $fires[$i]->shooterid);\n\t\t\t\t$stmt->bindParam(\":targetid\", $fires[$i]->targetid);\n\t\t\t\t$stmt->bindParam(\":weaponid\",$fires[$i]->weaponid);\n\t\t\t\t$stmt->bindParam(\":shots\",$fires[$i]->shots);\n\n\t\t\t\t$stmt->execute();\n\n\t\t\t\tif ($stmt->errorCode() == 0){\n\t\t\t\t\t$fires[$i]->id = $this->getLastInsertId();\n\t\t\t\t\tcontinue;\n\t\t\t\t} else return false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\n\n\t\tpublic function insertEW($data){\n\t\t\t//Debug::log(\"insertSensorSettings\".sizeof($data));\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tINSERT INTO sensors \n\t\t\t\t\t(unitid, systemid, turn, angle, dist, type)\n\t\t\t\tVALUES\n\t\t\t\t\t(:unitid, :systemid, :turn, :angle, :dist, :type)\n\t\t\t\");\n\n\t\t\tfor ($i = 0; $i < sizeof($data); $i++){\n\t\t\t\t//Debug::log(\"loop\".$i);\n\t\t\t\t$stmt->bindParam(\":unitid\", $data[$i][\"unitid\"]);\n\t\t\t\t$stmt->bindParam(\":systemid\", $data[$i][\"systemid\"]);\n\t\t\t\t$stmt->bindParam(\":turn\", $data[$i][\"turn\"]);\n\t\t\t\t$stmt->bindParam(\":angle\", $data[$i][\"angle\"]);\n\t\t\t\t$stmt->bindParam(\":dist\", $data[$i][\"dist\"]);\n\t\t\t\t$stmt->bindParam(\":type\", $data[$i][\"type\"]);\n\t\t\t\tif  (!$stmt->execute()){\n\t\t\t\t\techo ($stmt->errorInfo());\n\t\t\t\t} else continue;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tpublic function deleteUnresolvedFireOrders($gameid){\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tDELETE FROM fireorders\n\t\t\t\tWHERE gameid = :gameid\n\t\t\t\tAND resolved = :resolved\n\t\t\t\");\n\n\t\t\t$resolved = -1;\n\n\t\t\t$stmt->bindParam(\":gameid\", $gameid);\n\t\t\t$stmt->bindParam(\":resolved\", $resolved);\n\t\t\t$stmt->execute();\n\n\t\t\tif ($stmt->errorCode() == 0){\n\t\t\t\treturn true;\n\t\t\t} else return false;\n\t\t}\n\n\t\tpublic function updateFireOrders($fires){\n\t\t\tDebug::log(\"DB updateFireOrders: \".sizeof($fires));\n\t\t\tif (!sizeof($fires)){return;}\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tUPDATE fireorders\n\t\t\t\tSET\n\t\t\t\t\tshots = :shots,\n\t\t\t\t\treq = :req,\n\t\t\t\t\tnotes = :notes,\n\t\t\t\t\thits = :hits,\n\t\t\t\t\tresolved = :resolved\n\t\t\t\tWHERE\n\t\t\t\t\tid = :id\n\t\t\t\");\n\n\t\t\tfor ($i = 0; $i < sizeof($fires); $i++){\n\t\t\t\t//Debug::log(\"fire id: \".$fires[$i]->id.\", resolved: \".$fires[$i]->resolved);\n\t\t\t\t$stmt->bindParam(\":shots\", $fires[$i]->shots);\n\t\t\t\t$stmt->bindParam(\":req\", $fires[$i]->req);\n\t\t\t\t$stmt->bindParam(\":notes\", $fires[$i]->notes);\n\t\t\t\t$stmt->bindParam(\":hits\", $fires[$i]->hits);\n\t\t\t\t$stmt->bindParam(\":resolved\",$fires[$i]->resolved);\n\t\t\t\t$stmt->bindParam(\":id\", $fires[$i]->id);\n\t\t\t\t$stmt->execute();\n\n\t\t\t\tif ($stmt->errorCode() == 0){\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse return false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tpublic function updateBallisticFireOrder($fires){\n\t\t\tDebug::log(\"DB updateBallisticFireOrder, s: \".sizeof($fires));\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tUPDATE fireorders\n\t\t\t\tSET\n\t\t\t\t\tshots = :shots,\n\t\t\t\t\tresolved = :resolved\n\t\t\t\tWHERE\n\t\t\t\t\tid = :id\n\t\t\t\");\n\n\t\t\t$resolved = 1;\n\n\t\t\tfor ($i = 0; $i < sizeof($fires); $i++){\n\t\t\t\t$stmt->bindParam(\":id\", $fires[$i]->id);\n\t\t\t\t$stmt->bindParam(\":shots\", $fires[$i]->shots);\n\t\t\t\t$stmt->bindParam(\":resolved\", $resolved);\n\t\t\t\t$stmt->execute();\n\n\t\t\t\tif ($stmt->errorCode() == 0){\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse return false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tpublic function getDamages($units){\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tSELECT * FROM damages\n\t\t\t\tWHERE shipid = :shipid\n\t\t\t\");\n\n\t\t\tfor ($i = 0; $i < sizeof($units); $i++){\n\t\t\t\t$stmt->bindParam(\":shipid\", $units[$i]->id);\n\t\t\t\t$stmt->execute();\n\t\t\t\t$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\n\t\t\t\tif ($result){\n\t\t\t\t\tfor ($j = 0; $j < (sizeof($result)); $j++){\n\t\t\t\t\t\t$dmg = new Damage(\n\t\t\t\t\t\t\t$result[$j][\"id\"],\n\t\t\t\t\t\t\t$result[$j][\"fireid\"],\n\t\t\t\t\t\t\t$result[$j][\"gameid\"],\n\t\t\t\t\t\t\t$result[$j][\"shipid\"],\n\t\t\t\t\t\t\t$result[$j][\"structureid\"],\n\t\t\t\t\t\t\t$result[$j][\"systemid\"],\n\t\t\t\t\t\t\t$result[$j][\"turn\"],\n\t\t\t\t\t\t\t$result[$j][\"roll\"],\n\t\t\t\t\t\t\t$result[$j][\"type\"],\n\t\t\t\t\t\t\t$result[$j][\"totalDmg\"],\n\t\t\t\t\t\t\t$result[$j][\"shieldDmg\"],\n\t\t\t\t\t\t\t$result[$j][\"structDmg\"],\n\t\t\t\t\t\t\t$result[$j][\"armourDmg\"],\n\t\t\t\t\t\t\t$result[$j][\"overkill\"],\n\t\t\t\t\t\t\t$result[$j][\"negation\"],\n\t\t\t\t\t\t\t$result[$j][\"destroyed\"],\n\t\t\t\t\t\t\t$result[$j][\"notes\"],\n\t\t\t\t\t\t\t$result[$j][\"new\"]\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t$result[$j] = $dmg;\n\t\t\t\t\t}\n\t\t\t\t\t$units[$i]->addDamageDB($result);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tpublic function getPowers($units){\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tSELECT * FROM powers\n\t\t\t\tWHERE unitid = :unitid\n\t\t\t\");\n\n\t\t\tfor ($i = 0; $i < sizeof($units); $i++){\n\t\t\t\t$stmt->bindParam(\":unitid\", $units[$i]->id);\n\t\t\t\t$stmt->execute();\n\t\t\t\t$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\n\t\t\t\tif ($result){\n\t\t\t\t\tfor ($j = 0; $j < (sizeof($result)); $j++){\n\t\t\t\t\t\t$power = new Power(\n\t\t\t\t\t\t\t$result[$j][\"id\"],\n\t\t\t\t\t\t\t$result[$j][\"unitid\"],\n\t\t\t\t\t\t\t$result[$j][\"systemid\"],\n\t\t\t\t\t\t\t$result[$j][\"turn\"],\n\t\t\t\t\t\t\t$result[$j][\"type\"],\n\t\t\t\t\t\t\t$result[$j][\"cost\"]\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t$result[$j] = $power;\n\t\t\t\t\t}\n\t\t\t\t\t$units[$i]->addPowerDB($result);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\t\n\n\t\tpublic function getCrits($units){\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tSELECT * FROM systemcrits\n\t\t\t\tWHERE shipid = :shipid\n\t\t\t\");\n\n\t\t\tfor ($i = 0; $i < sizeof($units); $i++){\n\t\t\t\t$stmt->bindParam(\":shipid\", $units[$i]->id);\n\t\t\t\t$stmt->execute();\n\t\t\t\t$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\n\t\t\t\tif ($result){\n\t\t\t\t\tfor ($j = 0; $j < (sizeof($result)); $j++){\n\t\t\t\t\t\t//var_export($result[$j]);\n\t\t\t\t\t\t$crit = new Crit(\n\t\t\t\t\t\t\t$result[$j][\"id\"],\n\t\t\t\t\t\t\t$result[$j][\"shipid\"],\n\t\t\t\t\t\t\t$result[$j][\"systemid\"],\n\t\t\t\t\t\t\t$result[$j][\"turn\"],\n\t\t\t\t\t\t\t$result[$j][\"type\"],\n\t\t\t\t\t\t\t$result[$j][\"duration\"],\n\t\t\t\t\t\t\t$result[$j][\"value\"],\n\t\t\t\t\t\t\t0\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t$result[$j] = $crit;\n\t\t\t\t\t}\n\t\t\t\t\t$units[$i]->addCritDB($result);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\t\n\n\t\tpublic function getFires($units){\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tSELECT * FROM fireorders\n\t\t\t\tWHERE shooterid = :shooterid\n\t\t\t\");\n\n\t\t\tfor ($i = 0; $i < sizeof($units); $i++){\n\t\t\t\t$stmt->bindParam(\":shooterid\", $units[$i]->id);\n\t\t\t\t$stmt->execute();\n\t\t\t\t$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\n\t\t\t\tif ($result){\n\t\t\t\t\tfor ($j = 0; $j < (sizeof($result)); $j++){\n\t\t\t\t\t\t$crit = new FireOrder(\n\t\t\t\t\t\t\t$result[$j][\"id\"],\n\t\t\t\t\t\t\t$result[$j][\"gameid\"],\n\t\t\t\t\t\t\t$result[$j][\"turn\"],\n\t\t\t\t\t\t\t$result[$j][\"shooterid\"],\n\t\t\t\t\t\t\t$result[$j][\"targetid\"],\n\t\t\t\t\t\t\t$result[$j][\"weaponid\"],\n\t\t\t\t\t\t\t$result[$j][\"shots\"],\n\t\t\t\t\t\t\t$result[$j][\"req\"],\n\t\t\t\t\t\t\t$result[$j][\"notes\"],\n\t\t\t\t\t\t\t$result[$j][\"hits\"],\n\t\t\t\t\t\t\t$result[$j][\"resolved\"]\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t$result[$j] = $crit;\n\t\t\t\t\t}\n\t\t\t\t\t$units[$i]->addFireDB($result);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\t\n\n\t\tpublic function getActions($units, $turn){\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tSELECT * FROM actions\n\t\t\t\tWHERE shipid = :shipid\n\t\t\t\tAND turn = :turn\n\t\t\t\");\n\n\t\t\tfor ($i = 0; $i < sizeof($units); $i++){\n\t\t\t\t$stmt->bindParam(\":shipid\", $units[$i]->id);\n\t\t\t\t$stmt->bindParam(\":turn\", $turn);\n\t\t\t\t$stmt->execute();\n\t\t\t\t$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\n\n\t\t\t\tif ($result){\n\t\t\t\t\tfor ($j = 0; $j < sizeof($result); $j++){\n\t\t\t\t\t\t$units[$i]->actions[] = new Action(\n\t\t\t\t\t\t\t$result[$j][\"id\"],\n\t\t\t\t\t\t\t$result[$j][\"turn\"],\n\t\t\t\t\t\t\t$result[$j][\"type\"],\n\t\t\t\t\t\t\t$result[$j][\"dist\"],\n\t\t\t\t\t\t\t$result[$j][\"x\"],\n\t\t\t\t\t\t\t$result[$j][\"y\"],\n\t\t\t\t\t\t\t$result[$j][\"a\"],\n\t\t\t\t\t\t\t$result[$j][\"cost\"],\n\t\t\t\t\t\t\t$result[$j][\"delay\"],\n\t\t\t\t\t\t\t$result[$j][\"costmod\"],\n\t\t\t\t\t\t\t$result[$j][\"resolved\"]\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tpublic function getEW($units, $turn){\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tSELECT * FROM sensors\n\t\t\t\tWHERE unitid = :unitid\n\t\t\t\tAND turn = :turn\n\t\t\t\");\n\n\t\t\tfor ($i = 0; $i < sizeof($units); $i++){\n\t\t\t\tif (!$units[$i]->ship){continue;}\n\t\t\t\t$stmt->bindParam(\":unitid\", $units[$i]->id);\n\t\t\t\t$stmt->bindParam(\":turn\", $turn);\n\t\t\t\t$stmt->execute();\n\t\t\t\t$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\n\n\t\t\t\tif ($result){\n\t\t\t\t\tfor ($j = 0; $j < sizeof($result); $j++){\n\t\t\t\t\t\t$units[$i]->getSystemById($result[$j][\"systemid\"])->ew[] = new EW(\n\t\t\t\t\t\t\t$result[$j][\"id\"],\n\t\t\t\t\t\t\t$result[$j][\"unitid\"],\n\t\t\t\t\t\t\t$result[$j][\"systemid\"],\n\t\t\t\t\t\t\t$result[$j][\"turn\"],\n\t\t\t\t\t\t\t$result[$j][\"angle\"],\n\t\t\t\t\t\t\t$result[$j][\"dist\"],\n\t\t\t\t\t\t\t$result[$j][\"type\"]\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\t//Debug::log($units[$i]->classname.\" facing: \".$units[$i]->facing);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tpublic function insertDamageEntries($damages){\n\t\t\tDebug::log(\" => DB insertDamageEntries: \".sizeof($damages));\n\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tINSERT INTO damages \n\t\t\t\t\t( fireid, shipid, gameid, structureid, systemid, turn, roll, type, totalDmg, shieldDmg, structDmg, armourDmg, overkill, negation, destroyed, notes, new)\n\t\t\t\tVALUES\n\t\t\t\t\t( :fireid, :shipid, :gameid, :structureid, :systemid, :turn, :roll, :type, :totalDmg, :shieldDmg, :structDmg, :armourDmg, :overkill, :negation, :destroyed, :notes, :new)\n\t\t\t\");\n\n\t\t\t$new = 0;\n\n\t\t\t//echo json_encode($damages[0]);\n\t\t\tfor ($i = 0; $i < sizeof($damages); $i++){\n\t\t\t\t$stmt->bindParam(\":fireid\", $damages[$i]->fireid);\n\t\t\t\t$stmt->bindParam(\":shipid\", $damages[$i]->shipid);\n\t\t\t\t$stmt->bindParam(\":gameid\", $damages[$i]->gameid);\n\t\t\t\t$stmt->bindParam(\":structureid\", $damages[$i]->structureid);\n\t\t\t\t$stmt->bindParam(\":systemid\", $damages[$i]->systemid);\n\t\t\t\t$stmt->bindParam(\":turn\", $damages[$i]->turn);\n\t\t\t\t$stmt->bindParam(\":roll\", $damages[$i]->roll);\n\t\t\t\t$stmt->bindParam(\":type\", $damages[$i]->type);\n\t\t\t\t$stmt->bindParam(\":totalDmg\", $damages[$i]->totalDmg);\n\t\t\t\t$stmt->bindParam(\":shieldDmg\", $damages[$i]->shieldDmg);\n\t\t\t\t$stmt->bindParam(\":structDmg\", $damages[$i]->structDmg);\n\t\t\t\t$stmt->bindParam(\":armourDmg\", $damages[$i]->armourDmg);\n\t\t\t\t$stmt->bindParam(\":overkill\", $damages[$i]->overkill);\n\t\t\t\t$stmt->bindParam(\":negation\", $damages[$i]->negation);\n\t\t\t\t$stmt->bindParam(\":destroyed\", $damages[$i]->destroyed);\n\t\t\t\t$stmt->bindParam(\":notes\", $damages[$i]->notes);\n\t\t\t\t$stmt->bindParam(\":new\", $new);\n\n\t\t\t\t$stmt->execute();\n\n\t\t\t\tif ($stmt->errorCode() == 0){\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse return false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\n\n\t\tpublic function insertCritEntries($crits, $gameid){\n\t\t\tDebug::log(\" => DB insertCritEntries: \".sizeof($crits));\n\t\t\t\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tINSERT INTO systemcrits \n\t\t\t\t\t( shipid, systemid, turn, type, duration, value)\n\t\t\t\tVALUES\n\t\t\t\t\t( :shipid, :systemid, :turn, :type, :duration, :value)\n\t\t\t\");\n\n\t\t\tfor ($i = 0; $i < sizeof($crits); $i++){\n\t\t\t\tif ($crits[$i]->new){\n\t\t\t\t\t$stmt->bindParam(\":shipid\", $crits[$i]->shipid);\n\t\t\t\t\t$stmt->bindParam(\":systemid\", $crits[$i]->systemid);\n\t\t\t\t\t$stmt->bindParam(\":turn\", $crits[$i]->turn);\n\t\t\t\t\t$stmt->bindParam(\":type\", $crits[$i]->type);\n\t\t\t\t\t$stmt->bindParam(\":duration\", $crits[$i]->duration);\n\t\t\t\t\t$stmt->bindParam(\":value\", $crits[$i]->value);\n\t\t\t\t\t$stmt->execute();\n\n\t\t\t\t\tif ($stmt->errorCode() == 0){\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\tvar_export($crits[$i]); return false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tpublic function getPlayerStatus($gameid){\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tSELECT * FROM playerstatus\n\t\t\t\tWHERE\n\t\t\t\t\tgameid = :gameid\n\t\t\t\");\n\n\t\t\t$stmt->bindParam(\":gameid\", $gameid);\n\t\t\t$stmt->execute();\n\n\t\t\t$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\n\n\t\t\tif ($result){\n\t\t\t\treturn $result;\n\t\t\t}\n\t\t\telse return false;\n\t\t}\n\n\t\tpublic function setPlayerstatus($userid, $gameid, $turn, $phase, $status){\n\t\t\t//Debug::log(\"setPlayerstatus for player \".$userid. \" adjusted to turn/phase: \".$turn.\"/\".$phase);\n\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tUPDATE playerstatus \n\t\t\t\tSET \n\t\t\t\t\tturn = :turn,\n\t\t\t\t\tphase = :phase,\n\t\t\t\t\tstatus = :status\n\t\t\t\tWHERE\n\t\t\t\t\tgameid = :gameid\n\t\t\t\tAND\n\t\t\t\t\tuserid = :userid\n\t\t\t\");\n\n\t\t\t$stmt->bindParam(\":userid\", $userid);\n\t\t\t$stmt->bindParam(\":gameid\", $gameid);\n\t\t\t$stmt->bindParam(\":turn\", $turn);\n\t\t\t$stmt->bindParam(\":phase\", $phase);\n\t\t\t$stmt->bindParam(\":status\", $status);\n\n\t\t\t$stmt->execute();\n\n\t\t\tif ($stmt->errorCode() == 0){\n\t\t\t\t//Debug::log(\"game \".$gameid.\",user \".$userid.\" adjusting to turn/phase/status \".$turn.\" \".$phase.\" \".$status);\n\t\t\t\treturn true;\n\t\t\t} else return false;\n\t\t}\n\n\t\tpublic function setReinforceFaction($userid, $gameid, $faction){\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tUPDATE playerstatus \n\t\t\t\tSET faction = :faction\n\t\t\t\tWHERE\n\t\t\t\t\tgameid = :gameid\n\t\t\t\tAND\n\t\t\t\t\tuserid = :userid\n\t\t\t\");\n\n\t\t\t$stmt->bindParam(\":faction\", $faction);\n\t\t\t$stmt->bindParam(\":gameid\", $gameid);\n\t\t\t$stmt->bindParam(\":userid\", $userid);\n\n\t\t\t$stmt->execute();\n\n\t\t\tif ($stmt->errorCode() == 0){\n\t\t\t\treturn true;\n\t\t\t} else return false;\n\t\t}\n\n\t\tpublic function addReinforceValue($userid, $gameid, $add){\n\t\t\t//Debug::log(\"addReinforceValue: \".$add);\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tUPDATE playerstatus \n\t\t\t\tSET\tvalue = value + :add\n\t\t\t\tWHERE\n\t\t\t\t\tgameid = :gameid\n\t\t\t\tAND\n\t\t\t\t\tuserid = :userid\n\t\t\t\");\n\n\t\t\t$stmt->bindParam(\":add\", $add);\n\t\t\t$stmt->bindParam(\":gameid\", $gameid);\n\t\t\t$stmt->bindParam(\":userid\", $userid);\n\n\t\t\t$stmt->execute();\n\n\t\t\tif ($stmt->errorCode() == 0){\n\t\t\t\treturn true;\n\t\t\t} else return false;\n\t\t}\n\n\t\tpublic function getAmountOfPlayersInGame($gameid){\n\t\t\t//\tSELECT COUNT(*) FROM users\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tSELECT * FROM users\n\t\t\t\tJOIN playerstatus \n\t\t\t\tON playerstatus.gameid = :gameid\n\t\t\t\tAND users.id = playerstatus.userid\n\t\t\t\t\");\n\n\n\t\t\t$stmt->bindParam(\":gameid\", $gameid);\n\n\t\t\t$stmt->execute();\n\n\t\t\tif ($stmt->errorCode() == 0){\n\t\t\t\treturn $stmt->fetch();\n\n\t\t\t}\n\t\t\telse \n\t\t\t\treturn $stmt->errorCode();\n\t\t}\n\t\t\n\t\tpublic function getUsername($id){\t\n\t\t\t$sql = \"(SELECT username FROM users WHERE ID = \".$id.\")\";\n\t\t\t$result = $this->query($sql);\t\t\n\t\t\treturn $result[0][\"username\"];\n\t\t}\n\t\t\n\n\t\tpublic function getCurrentTurn($gameid){\n\n\t\t\t$sql = \"(SELECT turn FROM games WHERE id = \".$gameid.\")\";\n\t\t\t$result = $this->query($sql);\n\t\t\treturn $result[0][\"turn\"];\n\t\t}\n\t\t\n\t\tpublic function getMyStatusForGame($gameid, $userid, $turn){\n\t\t\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tSELECT status FROM playerstatus\n\t\t\t\tWHERE gameid = :gameid\n\t\t\t\tAND userid = :userid\n\t\t\t\tAND turn = :turn\n\t\t\t\");\n\t\t\t\n\t\t\t$stmt->bindParam(\":gameid\", $gameid);\n\t\t\t$stmt->bindParam(\":userid\", $userid);\n\t\t\t$stmt->bindParam(\":turn\", $turn);\n\t\t\t$stmt->execute();\n\t\t\t\t\t\n\t\t\t$result = $stmt->fetch(PDO::FETCH_ASSOC);\n\t\t\t\n\t\t\tif ($result){\n\t\t\t\treturn $result;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tpublic function getGameDetails($gameid){\n\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tSELECT * FROM games WHERE id = :id\n\t\t\t\");\n\n\t\t\t$stmt->bindParam(\":id\", $gameid);\n\t\t\t$stmt->execute();\t\t\t\t\n\t\t\t$result = $stmt->fetch(PDO::FETCH_ASSOC);\n\t\t\treturn $result;\n\t\t}\n\n\t\tpublic function getIncomingShips($gameid, $turn){\n\t\t/*\t$stmt = $this->connection->prepare(\"\n\t\t\t\tSELECT * FROM units\n\t\t\t\tWHERE gameid = :gameid\n\t\t\t\tAND available > :turn\n\t\t\t\tAND destroyed = 0\n\t\t\t\tAND status = 'bought'\n\t\t\t\tORDER BY userid ASC\n\t\t\t\");\n\t\t*/\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tSELECT units.id, units.userid, units.available, units.name, actions.x, actions.y, actions.a FROM units\n\t\t\t\tINNER JOIN actions ON\n\t\t\t\t\tunits.id = actions.shipid\t\n\t\t\t\tWHERE gameid = :gameid\n\t\t\t\tAND available > :turn\n\t\t\t\tAND destroyed = 0\n\t\t\t\tAND status = 'bought'\n\t\t\t\tORDER BY userid ASC\n\t\t\t\");\n\t\t\t\n\t\t\t$stmt->bindParam(\":gameid\", $gameid);\n\t\t\t$stmt->bindParam(\":turn\", $turn);\n\t\t\t$stmt->execute();\n\t\t\t\t\t\n\t\t\t$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\n\t\t\t\n\t\t\tif ($result){\n\t\t\t\treturn $result;\n\t\t\t\treturn $this->getActions($result);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t}\n\n\t\tpublic function getActiveUnits($gameid, $turn){\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tSELECT * FROM units\n\t\t\t\tWHERE gameid = :gameid\n\t\t\t\tAND destroyed = 0\n\t\t\t\tAND available <= :turn\n\t\t\t\tORDER BY userid ASC\n\t\t\t\");\n\t\t\t\n\t\t\t$stmt->bindParam(\":gameid\", $gameid);\n\t\t\t$stmt->bindParam(\":turn\", $turn);\n\t\t\t$stmt->execute();\n\t\t\t\t\t\n\t\t\t$units = $stmt->fetchAll(PDO::FETCH_ASSOC);\n\t\t\t\n\t\t\tif ($units){\n\t\t\t\tfor ($i = 0; $i < sizeof($units); $i++){\n\t\t\t\t\tif ($units[$i][\"name\"] == \"Flight\" || $units[$i][\"ball\"]){\n\t\t\t\t\t\t$units[$i][\"subunits\"] = $this->getSubUnits($units[$i]);\n\t\t\t\t\t\t$units[$i][\"mission\"] = $this->getMission($units[$i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t//Debug::log(\"getting: \".sizeof($units).\" units\");\n\t\t\treturn $units;\n\t\t}\n\n\t\tpublic function getSubUnits($unit){\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tSELECT * FROM subunits\n\t\t\t\tWHERE subunits.unitid = :id\n\t\t\t\");\n\t\t\t\n\t\t\t$stmt->bindParam(\":id\", $unit[\"id\"]);\n\t\t\t$stmt->execute();\n\t\t\t\t\t\n\t\t\t$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\n\n\t\t\treturn $result;\n\t\t}\n\n\t\tpublic function getMission($unit){\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tSELECT * FROM missions\n\t\t\t\tWHERE missions.unitid = :id\n\t\t\t\tORDER BY TURN ASC\n\t\t\t\");\n\t\t\t\n\t\t\t$stmt->bindParam(\":id\", $unit[\"id\"]);\n\t\t\t$stmt->execute();\n\t\t\t\t\t\n\t\t\t$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\n\t\t\treturn $result;\n\t\t}\n\t\t\n\t\tpublic function getShipLoad($ships){\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tSELECT systemid, name, amount \n\t\t\t\tFROM loads \n\t\t\t\tWHERE shipid = :shipid\n\t\t\t\");\n\n\t\t\tfor ($i = 0; $i < sizeof($ships); $i++){\n\t\t\t\t$stmt->bindParam(\":shipid\", $ships[$i]->id);\n\t\t\t\t$stmt->execute();\n\t\t\t\t$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\n\n\t\t\t\tif ($result){\n\t\t\t\t\t$ships[$i]->addFighterLoad($result);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tpublic function deleteEmptyLoads(){\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tDELETE FROM loads\n\t\t\t\tWHERE amount = 0;\n\t\t\t\");\n\n\t\t\t$stmt->execute();\n\t\t\tif ($stmt->errorCode() == 0){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\tpublic function getAllFireOrders($gameid){\n\t\t\t//Debug::log(\"getAllFireOrders for game: \".$gameid);\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tSELECT * FROM fireorders\n\t\t\t\tWHERE gameid = :gameid\n\t\t\t\");\n\n\t\t\t$stmt->bindParam(\":gameid\", $gameid);\n\t\t\t$stmt->execute();\n\t\t\t$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\n\n\t\t\tif ($result){\n\t\t\t\tfor ($i = 0; $i < (sizeof($result)); $i++){\n\t\t\t\t\t$result[$i] = Manager::convertToFireOrder($result[$i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn $result;\n\t\t}\n\n\t\tpublic function getUnresolvedFireOrders($gameid, $turn){\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tSELECT * FROM fireorders\n\t\t\t\tWHERE gameid = :gameid\n\t\t\t\tAND resolved = :resolved\n\t\t\t\");\n\t\t\t$resolved = 0;\n\t\t\t$stmt->bindParam(\":gameid\", $gameid);\n\t\t\t$stmt->bindParam(\":resolved\", $resolved);\n\t\t\t$stmt->execute();\n\t\t\t$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\n\n\t\t\tif ($result){\n\t\t\t\tfor ($i = 0; $i < (sizeof($result)); $i++){\n\t\t\t\t\t$result[$i] = Manager::convertToFireOrder($result[$i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn $result;\n\t\t}\n\n\t\tpublic function resolveDeployActions($units){\n\t\t\tDebug::log(\"resolveDeployActions s: \".sizeof($units));\n\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tUPDATE actions\n\t\t\t\tSET resolved = :resolved\n\t\t\t\tWHERE shipid = :shipid\n\t\t\t\");\n\n\t\t\t$resolved = 1;\n\n\t\t\tfor ($i = 0; $i < sizeof($units); $i++){\n\t\t\t\t$stmt->bindParam(\":shipid\", $units[$i]);\n\t\t\t\t$stmt->bindParam(\":resolved\", $resolved);\n\t\t\t\t$stmt->execute();\n\t\t\t//\tDebug::log(\"aaa\");\n\n\t\t\t\tif ($stmt->errorCode() == 0){\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tpublic function resolveUnitMovementDB($ships){\n\t\t\tDebug::log(\"resolveUnitMovementDB\");\n\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tUPDATE actions\n\t\t\t\tSET resolved = 1\n\t\t\t\tWHERE \n\t\t\t\t\tshipid = :shipid\n\t\t\t\tAND\n\t\t\t\t\tresolved = 0\n\t\t\t\");\n\n\t\t\tfor ($i = 0; $i < sizeof($ships); $i++){\n\t\t\t\t$stmt->bindParam(\":shipid\", $ships[$i]->id);\n\t\t\t\t$stmt->execute();\n\n\t\t\t\tif ($stmt->errorCode() == 0){\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse return false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\t\t\t\n\t\tpublic function getPlayersInGame($gameid){\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tSELECT * FROM users\n\t\t\t\tJOIN playerstatus \n\t\t\t\tON playerstatus.gameid = :gameid\n\t\t\t\tAND users.id = playerstatus.userid\n\t\t\t\");\n\n\t\t\t$stmt->bindParam(\":gameid\", $gameid);\n\t\t\t$stmt->execute();\t\t\t\t\n\t\t\t$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\n\t\t\treturn $result;\n\t\t}\n\n\n\t\t\t\n\n\t\tpublic function getMyGames($userid){\n\t\t/*\t$stmt = $this->connection->prepare(\"\n\t\t\t\tSELECT * FROM games\n\t\t\t\tJOIN playerstatus \n\t\t\t\t\tON playerstatus.userid = :id\n\t\t\t\tAND games.id = playerstatus.userid\n\t\t\t\");\n\t\t*/\n\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tSELECT playerstatus.status as playerstatus, games.id, games.name, games.turn, games.phase, games.status FROM playerstatus\n\t\t\t\tRIGHT JOIN games\n\t\t\t\t\tON playerstatus.gameid = games.id\n\t\t\t\tWHERE playerstatus.userid = :userid\n\t\t\t\tAND games.status = :status\n\t\t\t\");\n\t\t\t$status = \"active\";\n\t\t\t$stmt->bindParam(\":status\", $status);\n\t\t\t$stmt->bindParam(\":userid\", $userid);\n\t\t\t$stmt->execute();\n\t\t\t\n\t\t\t$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\n\t\t\treturn $result;\n\t\t}\n\n\n\t\tpublic function getOpenGames($id){\n\t\t\n\t\t\t$null = 0;\n\t\t\t\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tSELECT * FROM games\n\t\t\t\tWHERE games.status = :status\n\t\t\t\");\n\t\t\t\n\t\t\t$open = \"open\";\n\t\t\t$stmt->bindParam (\":status\", $open);\n\t\t\t$stmt->execute();\n\t\t\t\n\t\t\t$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\t\t\n\n\n\t\t\tif ($result){\n\t\t\t\treturn $result;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\n\t\tpublic function getWaitingForOpponentGames($id){\n\t\t\n\t\t\t$null = 0;\n\t\t\t\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tSELECT id, name\n\t\t\t\tFROM games\n\t\t\t\tWHERE playerA = :value1\n\t\t\t\tAND playerB = 0\n\t\t\t\tOR playerB = :value1\n\t\t\t\tAND playerA = 0\n\t\t\t\");\n\t\t\t\n\t\t\t$stmt->bindParam(\":value1\", $id);\n\t\t\t$stmt->execute();\n\t\t\t\n\t\t\t$result = $stmt->fetchAll();\n\t\t\t\n\t\t\tif (sizeof($result) >= 1){\n\t\t\t//\tDebug::log(\"Games found: \".sizeof($result));\n\t\t\t\treturn $result;\n\t\t\t}\n\t\t\telse {\n\t\t\t//\tDebug::log(\"no gams found\");\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\n\n\t\tpublic function getAllUnfinishedGames(){\n\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tSELECT * FROM games\n\t\t\t\tWHERE status <> (:finished)\n\t\t\t\");\n\t\t\t$finished = \"finished\";\n\t\t\t$stmt->bindParam(\":finished\", $finished);\n\n\t\t\t$stmt->execute();\n\n\t\t\t$result = $stmt->FetchAll(PDO::FETCH_ASSOC);\n\t\t\t$playerInfo = array();\n\n\t\t\tfor ($i = 0; $i < sizeof($result); $i++){\n\t\t\t\t\n\t\t\t\t$result[$i][\"playerdata\"] = array();\n\n\t\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\t\tSELECT playerstatus.playerid, playerstatus.status, player.username FROM usersstatus\n\t\t\t\t\tINNER JOIN player\n\t\t\t\t\t\tON playerstatus.playerid = player.id\n\t\t\t\t\tWHERE playerstatus.gameid = :gameid\n\t\t\t\t\");\n\n\t\t\t\t$stmt->bindParam(\":gameid\", $result[$i][\"id\"]);\n\n\t\t\t\t$stmt->execute();\n\n\t\t\t\t$playerdata = $stmt->FetchAll(PDO::FETCH_ASSOC);\n\n\t\t\t\tif ($playerdata){\n\t\t\t\t\t$result[$i][\"playerdata\"] = $playerdata;\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t\n\t\t\tif ($result){\n\t\t\t\treturn $result;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tpublic function updateAllPlayerStatusForGame($gameid, $turn, $status){\n\t\t\tDebug::log(\"updateAllPlayerStatusForGame\");\n\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tUPDATE playerstatus\n\t\t\t\tSET \n\t\t\t\t\tturn = :turn,\n\t\t\t\t\tstatus = :status\n\t\t\t\tWHERE gameid = :gameid\n\t\t\t\");\n\n\t\t\t$newTurn = $turn +1;\n\n\t\t\t$stmt->bindParam(\":turn\", $newTurn);\n\t\t\t$stmt->bindParam(\":status\", $status);\n\t\t\t$stmt->bindParam(\":gameid\", $gameid);\n\n\t\t\t$stmt->execute();\n\n\t\t\tif ($stmt->errorCode() == 0){\n\t\t\t//\tDebug::log(\"done\");\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse return false;\n\t\t}\n\n\t\tpublic function setGameTurnPhase($gameid, $turn, $phase){\n\t\t\t//Debug::log(\"setGameTurnPhase: \".$turn.\"/\".$phase);\n\t\t\t$stmt = $this->connection->prepare(\"\n\t\t\t\tUPDATE games\n\t\t\t\tSET\n\t\t\t\t\tphase = :phase,\n\t\t\t\t\tturn = :turn\n\t\t\t\tWHERE id = :id\n\t\t\t\");\n\n\t\t\t$stmt->bindParam(\":turn\", $turn);\n\t\t\t$stmt->bindParam(\":phase\", $phase);\n\t\t\t$stmt->bindParam(\":id\", $gameid);\n\n\t\t\t$stmt->execute();\n\n\t\t\tif ($stmt->errorCode() == 0){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse return false;\n\t\t}\n\t}\t\t\n\n\t?>\n",
			"file": "server/dbManager.php",
			"file_size": 53154,
			"file_write_time": 131498633923587011,
			"settings":
			{
				"buffer_size": 51159,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "game.js",
			"settings":
			{
				"buffer_size": 61748,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "shared.js",
			"settings":
			{
				"buffer_size": 12609,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/debug.php",
			"settings":
			{
				"buffer_size": 184,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/systems/weapons/plasma.php",
			"settings":
			{
				"buffer_size": 3420,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/systems/weapons/matter.php",
			"settings":
			{
				"buffer_size": 2261,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "flights.js",
			"settings":
			{
				"buffer_size": 17975,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/systems/weapons/ammo.php",
			"settings":
			{
				"buffer_size": 3681,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "server/systems/weapons/area.php",
			"settings":
			{
				"buffer_size": 1057,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/ships/avenger.php",
			"settings":
			{
				"buffer_size": 3474,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "autoload.php",
			"settings":
			{
				"buffer_size": 7236,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "log.txt",
			"settings":
			{
				"buffer_size": 9990,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 14 files for \"setZoom\"\n\nC:\\xampp\\htdocs\\fire\\cam.js:\n   25  \t},\n   26  \n   27: \tsetZoom: function(val){\n   28  \t\tthis.z = val;\n   29  \n\nC:\\xampp\\htdocs\\fire\\game.js:\n  744  \n  745  \tthis.initDeployment = function(){\n  746: \t\tcam.setZoom(0.6);\n  747  \t\tgame.draw();\n  748  \t\t//cam.setFocus()\n  ...\n 1288  \t\twindow.then = Date.now();\n 1289  \t\twindow.startTime = then;\n 1290: \t\tcam.setZoom(0.7);\n 1291  \t\tthis.animating = 1;\n 1292  \t\tthis.animateDeployment();\n ....\n 1382  \t\t\tgame.getUnitById(aUnit).select();\n 1383  \t\t}\n 1384: \t\tcam.setZoom(1);\n 1385  \t\tsetFPS(60);\n 1386  \n\n4 matches across 2 files\n\n\nSearching 14 files for \"adjustZoom\"\n\nC:\\xampp\\htdocs\\fire\\cam.js:\n   39  \t},\n   40  \t\n   41: \tadjustZoom: function(e, pos){\n   42  \t\tif (e.originalEvent.wheelDelta == 120) {\n   43  \t\t\tthis.z = Math.min(2, this.z + 0.2);\n\nC:\\xampp\\htdocs\\fire\\script.js:\n   85  \tvar pos = new Point(e.clientX - offset.x, e.clientY - offset.y);\n   86  \tif (game){\n   87: \t\tcam.adjustZoom(e, pos);\n   88  \t\t//game.draw();\n   89  \t}\t\n\n2 matches across 2 files\n\n\nSearching 14 files for \"adjustZoom\"\n\nC:\\xampp\\htdocs\\fire\\cam.js:\n   40  \t},\n   41  \t\n   42: \tadjustZoom: function(e, pos){\n   43  \t\tif (e.originalEvent.wheelDelta == 120) {\n   44  \t\t\tthis.z = Math.min(2, this.z + 0.2);\n\nC:\\xampp\\htdocs\\fire\\script.js:\n   85  \tvar pos = new Point(e.clientX - offset.x, e.clientY - offset.y);\n   86  \tif (game){\n   87: \t\tcam.adjustZoom(e, pos);\n   88  \t\t//game.draw();\n   89  \t}\t\n\n2 matches across 2 files\n",
			"settings":
			{
				"buffer_size": 1490,
				"line_ending": "Windows",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "gameSetup.php",
			"settings":
			{
				"buffer_size": 17080,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/ships/tinashi.php",
			"settings":
			{
				"buffer_size": 2319,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/ships/sharlin.php",
			"settings":
			{
				"buffer_size": 3651,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/ships/whitestar.php",
			"settings":
			{
				"buffer_size": 1771,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/ships/primus.php",
			"settings":
			{
				"buffer_size": 2738,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/ships/demos.php",
			"settings":
			{
				"buffer_size": 1992,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "server/ships/vorchan.php",
			"settings":
			{
				"buffer_size": 1764,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/ships/haven.php",
			"settings":
			{
				"buffer_size": 1686,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/systems/weapons/linked.php",
			"settings":
			{
				"buffer_size": 3139,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "getGameData.php",
			"settings":
			{
				"buffer_size": 663,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "shiptest.php",
			"settings":
			{
				"buffer_size": 6815,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/ships/altarian.php",
			"settings":
			{
				"buffer_size": 2303,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "combattest.php",
			"settings":
			{
				"buffer_size": 2850,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "server/ships/gquan.php",
			"settings":
			{
				"buffer_size": 2688,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "index.php",
			"settings":
			{
				"buffer_size": 2379,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/systems/weapons/launcher.php",
			"settings":
			{
				"buffer_size": 2518,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "balltest.php",
			"settings":
			{
				"buffer_size": 1297,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "systemtest.php",
			"settings":
			{
				"buffer_size": 3559,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: List Packages"
			],
			[
				"Package Control: list",
				"Package Control: List Packages"
			],
			[
				"package control install package",
				"Package Control: Install Package"
			],
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"Package Control: in",
				"Package Control: Install Package"
			],
			[
				"brack",
				"Preferences: Browse Packages"
			]
		],
		"width": 512.0
	},
	"console":
	{
		"height": 426.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/C/xampp/htdocs/fire/server/systems/weapons/launcher.php",
		"/C/xampp/htdocs/fire/log.txt",
		"/C/xampp/htdocs/fire/server/wing.php",
		"/C/xampp/htdocs/fire/squadron.js",
		"/C/xampp/htdocs/fire/debug.php",
		"/C/xampp/htdocs/fire/server/debug.php",
		"/C/xampp/htdocs/fire/server/ship.php",
		"/C/xampp/htdocs/fire/server/salvo.php",
		"/C/xampp/htdocs/fire/shared.js",
		"/C/xampp/htdocs/fire/graphics.js",
		"/C/xampp/htdocs/fire/script.js",
		"/C/xampp/htdocs/fire/server/systems/weapons/laser.php",
		"/C/xampp/htdocs/fire/systems.js",
		"/C/xampp/htdocs/fire/shipclasses.js",
		"/C/xampp/htdocs/fire/server/flight.php",
		"/C/xampp/htdocs/fire/server/dbManager.php",
		"/C/xampp/htdocs/fire/server/manager.php",
		"/C/xampp/htdocs/fire/test.php",
		"/C/xampp/htdocs/fire/server/ships/tinashi.php",
		"/C/xampp/htdocs/fire/server/systems/weapons/paired.php",
		"/C/xampp/htdocs/fire/server/ships/sharlin.php",
		"/C/xampp/htdocs/fire/server/ships/Haven.php",
		"/C/xampp/htdocs/fire/server/systems/weapons/ammo.php",
		"/C/xampp/htdocs/fire/server/volley.php",
		"/C/xampp/htdocs/fire/server/systems/weapons/ballistic.php",
		"/C/xampp/htdocs/fire/server/systems/weapons/matter.php",
		"/C/xampp/htdocs/fire/server/ships/demos.php",
		"/C/xampp/htdocs/fire/dbManager.php",
		"/C/xampp/htdocs/fire/manager.php",
		"/C/xampp/htdocs/fire/gameManager.php",
		"/C/xampp/htdocs/fire/server/systems/systems.php",
		"/C/xampp/htdocs/fire/server/ships/tethys.php",
		"/C/xampp/htdocs/fire/server/ships/whitestar.php",
		"/C/xampp/htdocs/fire/lobby.css",
		"/C/xampp/htdocs/fire/createGame.php",
		"/C/xampp/htdocs/fire/imageloader.js",
		"/C/xampp/htdocs/fire/include.php",
		"/C/xampp/htdocs/fire/server/systems/laser.php",
		"/C/xampp/htdocs/fire/server/systems/particle.php",
		"/C/xampp/htdocs/fire/server/systems/systems",
		"/C/xampp/htdocs/fire/logout.php",
		"/C/xampp/htdocs/fire/jquery-2.1.1.min.js",
		"/C/xampp/htdocs/fire/jquery-ui.js",
		"/C/xampp/htdocs/fire/starships.php",
		"/D/SecureWAMP_Portable/htdocs/fire/getGameData.php",
		"/D/SecureWAMP_Portable/htdocs/fire/gameSetup.php",
		"/D/SecureWAMP_Portable/htdocs/fire/shipclasses.js",
		"/D/SecureWAMP_Portable/htdocs/fire/mathLib.js",
		"/D/SecureWAMP_Portable/htdocs/fire/log.txt",
		"/D/SecureWAMP_Portable/htdocs/fire/dbManager.php",
		"/D/SecureWAMP_Portable/htdocs/fire/gameManager.php",
		"/D/SecureWAMP_Portable/htdocs/fire/postGameData.php",
		"/D/SecureWAMP_Portable/htdocs/fire/script.js",
		"/D/SecureWAMP_Portable/htdocs/fire/graphics.js",
		"/D/SecureWAMP_Portable/htdocs/fire/ajax.js",
		"/D/SecureWAMP_Portable/htdocs/fire/style.css",
		"/D/SecureWAMP_Portable/htdocs/fire/shared.js",
		"/D/SecureWAMP_Portable/htdocs/fire/classes.js",
		"/D/SecureWAMP_Portable/htdocs/fire/systems.js",
		"/D/SecureWAMP_Portable/htdocs/fire/imageloader.js",
		"/D/SecureWAMP_Portable/htdocs/fire/index.php",
		"/D/SecureWAMP_Portable/htdocs/fire/lobby.php",
		"/D/SecureWAMP_Portable/htdocs/fire/game.php",
		"/D/SecureWAMP_Portable/htdocs/fire/game.js",
		"/D/SecureWAMP_Portable/htdocs/fire/index.html",
		"/D/SecureWAMP_Portable/htdocs/fire/starships.php",
		"/D/SecureWAMP_Portable/htdocs/fire/cam.js",
		"/D/SecureWAMP_Portable/htdocs/fire/graphics.txt",
		"/D/SecureWAMP_Portable/htdocs/fire/jquery-ui.js",
		"/D/SecureWAMP_Portable/htdocs/fire/createGame.php",
		"/D/SecureWAMP_Portable/htdocs/fire/debug.php",
		"/D/SecureWAMP_Portable/htdocs/fire/logout.php",
		"/D/SecureWAMP_Portable/htdocs/fire/jquery-2.1.1.min.js",
		"/D/SecureWAMP_Portable/htdocs/dbManager.php",
		"/D/SecureWAMP_Portable/htdocs/Grid.js",
		"/D/SecureWAMP_Portable/htdocs/baseEvents.js",
		"/D/SecureWAMP_Portable/htdocs/HexagonTools.js",
		"/D/SecureWAMP_Portable/htdocs/HexCalcs.js",
		"/D/SecureWAMP_Portable/htdocs/index.php",
		"/D/SecureWAMP_Portable/htdocs/index.html",
		"/D/SecureWAMP_Portable/htdocs/landing.html",
		"/D/SecureWAMP_Portable/htdocs/laneSubmit.php",
		"/D/SecureWAMP_Portable/htdocs/log.txt",
		"/D/SecureWAMP_Portable/htdocs/jquery-2.1.1.min.js",
		"/D/SecureWAMP_Portable/htdocs/movement.js",
		"/D/SecureWAMP_Portable/htdocs/manager.php",
		"/D/SecureWAMP_Portable/htdocs/style.css",
		"/D/SecureWAMP_Portable/htdocs/script.js",
		"/D/SecureWAMP_Portable/htdocs/test.php",
		"/D/SecureWAMP_Portable/htdocs/admin.js",
		"/D/SecureWAMP_Portable/htdocs/table.php",
		"/D/SecureWAMP_Portable/htdocs/baseClasses.js",
		"/D/SecureWAMP_Portable/htdocs/ajaxManager.js",
		"/C/Users/Chris/AppData/Local/Nox/record/727e8323665a4ce59d77aaa4c968d350",
		"/D/SecureWAMP_Portable/htdocs/fire/server/baseship.php",
		"/D/SecureWAMP_Portable/htdocs/fire/ships/primus.php",
		"/D/SecureWAMP_Portable/htdocs/fire/ships/omega.php",
		"/D/SecureWAMP_Portable/htdocs/fire/ships.php",
		"/D/SecureWAMP_Portable/htdocs/projectX/logout.php",
		"/D/SecureWAMP_Portable/htdocs/projectX/createGame.php",
		"/D/SecureWAMP_Portable/htdocs/projectX/gameSetup.php",
		"/D/SecureWAMP_Portable/htdocs/projectX/postGameData.php",
		"/D/SecureWAMP_Portable/htdocs/projectX/getGameData.php",
		"/D/SecureWAMP_Portable/htdocs/projectX/doProcess.php",
		"/D/SecureWAMP_Portable/htdocs/projectX/gameManager.php",
		"/D/SecureWAMP_Portable/htdocs/projectX/dbManager.php",
		"/D/SecureWAMP_Portable/htdocs/projectX/table.php",
		"/D/SecureWAMP_Portable/htdocs/projectX/gameProcess.php",
		"/D/SecureWAMP_Portable/htdocs/projectX/hexagon/HexagonTools.js",
		"/D/SecureWAMP_Portable/htdocs/projectX/log.txt",
		"/D/SecureWAMP_Portable/htdocs/projectX/style.css",
		"/D/SecureWAMP_Portable/htdocs/projectX/hexagon/script.js",
		"/D/SecureWAMP_Portable/htdocs/projectX/game.php",
		"/D/SecureWAMP_Portable/htdocs/projectX/hexagon/index.html",
		"/D/SecureWAMP_Portable/htdocs/projectX/hexagon/baseEvents.js",
		"/D/SecureWAMP_Portable/htdocs/projectX/ajax.js",
		"/D/SecureWAMP_Portable/htdocs/projectX/hexagon/Grid.js",
		"/D/SecureWAMP_Portable/htdocs/projectX/hexagon/movement.js",
		"/D/SecureWAMP_Portable/htdocs/projectX/hexagon/transfer.js",
		"/D/SecureWAMP_Portable/htdocs/projectX/hexagon/admin.js",
		"/D/SecureWAMP_Portable/htdocs/projectX/hexagon/baseClasses.js",
		"/D/SecureWAMP_Portable/htdocs/projectX/hexagon/cam.js",
		"/D/SecureWAMP_Portable/htdocs/projectX/hexagon/jquery-2.1.1.min.js",
		"/D/SecureWAMP_Portable/htdocs/projectX/projectx.sublime-workspace",
		"/D/SecureWAMP_Portable/htdocs/projectX/projectx.sublime-project",
		"/D/Downloads/Urho3D-1.5/Urho3D-1.5/bin/Data/Scripts/25_Urho2DParticle.as",
		"/D/Downloads/Urho3D-1.5-Windows-SHARED/Urho3D-1.5-Windows-SHARED/share/Urho3D/Resources/Data/Scripts/01_HelloWorld.as",
		"/D/Downloads/Urho3D-1.5-Windows-SHARED/Urho3D-1.5-Windows-SHARED/share/Urho3D/Resources/Data/Scripts/03_Sprites.as"
	],
	"find":
	{
		"height": 40.0
	},
	"find_in_files":
	{
		"height": 104.0,
		"where_history":
		[
			"*.js",
			"*.php",
			"",
			"*.js",
			"",
			"*.php",
			"",
			"setPureImage",
			"",
			"flights.js",
			"",
			"*.js",
			"",
			"*.php",
			"",
			"*.php",
			"",
			"*.php",
			"",
			"*.php",
			"",
			"*.php",
			"*.pphp",
			"",
			"*.js",
			"*.php",
			".php",
			"",
			"*.php",
			"",
			"*.php",
			"",
			"style.css",
			"",
			"*.php",
			"",
			"*.php",
			"",
			"*.js",
			"",
			"this.turnAngles = {}",
			"",
			"*.php",
			"",
			"*.js",
			"",
			"*.php",
			"",
			"*.php",
			"manager.php",
			"*.php",
			"",
			"*.js",
			"",
			"classes.js",
			"",
			"*.php",
			"",
			"*.php",
			"",
			"*.php",
			"",
			"*.php",
			"*,php",
			"",
			"*.php",
			"\t",
			"",
			"*.js",
			"",
			"classes.js",
			"",
			"*.js",
			".js",
			"",
			"systems.js",
			"",
			"*.php",
			"",
			"*.php",
			"",
			"*.php",
			"",
			"*.php",
			"",
			"*.js",
			"",
			"*.php",
			"",
			"lobby.php",
			"",
			"*.php",
			"",
			"addFighter",
			"",
			"*.php",
			"",
			"*.php",
			"",
			"*.php",
			"",
			"*.js",
			"",
			"*.js",
			"",
			"aUnit",
			"",
			"aShip",
			"",
			"*.js",
			"",
			"*.php",
			"",
			"*.js",
			"",
			"*.php",
			"",
			"*.php",
			"",
			"*.php",
			"",
			"*.php",
			"",
			"*.js",
			"",
			"*.js",
			"",
			"#"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"setFocus",
			"adjustZoom",
			"setfocus",
			"setfocus,",
			"setfocus",
			"adjustZoom",
			"setZoom",
			"focus",
			"setFocus",
			"focus",
			"focus = ",
			"focus ",
			"cam.setfocus",
			"setzoom",
			"createcombatloge",
			"guns = ",
			"combatlogentry",
			"Trajectory",
			"getremainingammo",
			"initbal",
			"calculate",
			"calculateo",
			"calculateot",
			"this.getFireDistance = functio",
			"elapsed",
			"getOffensiveBonus",
			"insert into actions",
			"insert into units",
			"insert into a",
			"getActiveBallistics",
			"setmiss",
			"canLaunchFlight",
			"game.enableFlightDeployment()",
			"insertMissions",
			"insertinto m",
			"error",
			"insertmis",
			"insertMissions",
			"insertMission",
			"into miss",
			"into mi",
			"deployOverlay",
			"deployOverlay\n",
			"ueMission = function(pos)",
			"-3",
			"switchdiv",
			"updateSystemLoad",
			"insertUnits",
			"updateSystemLoad",
			"popup",
			"confirmfiring",
			"getDeployState",
			"setfireorder ",
			"setfireorder",
			"highlightFireOrder",
			"setfireorder ",
			"dodeployflight",
			"return Mixed.p",
			"return Ship.p",
			"hasUnresolvedFireOrder",
			"hasFireorder",
			"hasfireo",
			"popup",
			"switchToUnit",
			"popup(h",
			"hasNoFires",
			"disengage f",
			"confirmOrders",
			"flight f",
			"combatloge",
			"weaponaimevent",
			"setPreMoveImage",
			"setlayout",
			"getPointInDirection",
			"fsize",
			"const.ew.l",
			"setshiplock",
			"drawSensorArc",
			"len",
			"/20",
			"drawEW",
			"sensore",
			"testCriticals",
			"fire id:",
			"getResolvingFireOrders",
			"weaponaime",
			"flightDiv",
			"new Missile",
			"systems.",
			"gettabled",
			"settimeloaded",
			"setstate",
			"getLoadLevel",
			"setTimeLoaded",
			"doboost = fu",
			"doboost()",
			"doboost ",
			"doboost",
			"getloadlevel",
			"settimeloaded()",
			"settimeloaded",
			"copyPowers",
			"setState",
			"\n\tif (this.id == 14 && this.parentId == 6){\n\t\tconsole.log(\"ding\");\n\t}",
			"copy",
			"TimeLoad",
			"settimel",
			"this.ball",
			"this.ballistics",
			"dodeployfl",
			"rototype.select =",
			"hangarLoadoutDiv",
			"disableMissionMode",
			"enableDeployment",
			"this.deploying = ",
			"game.deploying = ",
			"this.drawImg ",
			"setTimeLoaded",
			"if (game.getUnitById(aUnit).available < game.turn){",
			"\"speed\"",
			"speedChange",
			"baseturncost",
			"drawallp",
			"if (game.deploying)",
			"if (game.deployin",
			"drawCtx",
			"baseimpulse ",
			"basei"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"selectFromPopup",
			"speed",
			"font16",
			"font15",
			"DBManager::app()->updateFireOrders",
			"getFireAngle",
			"getImpactAngle",
			"insertClientFireOrder",
			"getAngledHitSection",
			"getAngledHitChance",
			"getAnglesHitChance",
			"target.",
			"setRawImage",
			"setPureImage",
			"",
			"Local Units",
			"shipImages",
			"game.getUnitByClick",
			"getUnitById",
			"resolveFlightMovement",
			"isCloseCombat($id)",
			"getHitSection",
			"s",
			"pSize",
			"isCloseCombat",
			"setPostMoveFacing",
			"updateIntercepts",
			"[$j]",
			"$stack[$i][j]",
			"planCtx",
			"inRange",
			"updateTargets",
			"resolveUnitMovement",
			"animateUnitMovement",
			"getIncomingUnits",
			"drawMovePlan",
			"launchData",
			"$",
			"$unit",
			"\"<td>\"",
			"\"<tr>\"",
			", ",
			");",
			"draw",
			"isExposed",
			"MediumTwinIon",
			"#27e627",
			"#24de24",
			"lime",
			"lime;",
			"getCurrentImpulse();",
			"getCurrentImplse();",
			"x.drawX",
			"shooter.drawX",
			"setDrawData",
			"setDrawData()",
			"getPlannedPosition",
			"remainingDelay",
			"delay",
			"getPlannedFacing()",
			"salvo",
			".getCurrentImpulse()",
			"this.getCurrentImpulse",
			"this.getCurrentImPulse",
			"new Action(-1, ",
			"unitGUI",
			"getDmgRangeMod($fire)",
			"\"Thrust",
			"getDmgString",
			"Damage loss",
			".getRangeDmgMod",
			"getDmgRangeMod",
			"getDmgRangePenalty",
			"dmgLoss",
			"mouse",
			"salvo",
			"mouseCtx",
			"system",
			"this.turnAngles = {}",
			"IsOnMovementArc",
			"getTurnStep",
			"$this->updatePlayerStatus",
			"\"Disabled\"",
			"doOverkill",
			"applyOverkill",
			"new",
			"$this->boostEffect[] = new",
			"$manager->incoming[$i]",
			"$units",
			"insertServerActions",
			"$units[$i][\"actions\"][$j]",
			"insertClientActions",
			"drawMovePlan",
			"element",
			"",
			"getRemainingIntegrity",
			"getImpulseProfileMod",
			"getShots($this->turn)",
			"public function getShots($turn){",
			"getEWSettings",
			"ctx",
			"</span>",
			"<span class='red'",
			"<span",
			"ballistics",
			"if (this.destroyed || this.disabled || this.locked){",
			"$this",
			"doDamage($fire, $roll, $system)",
			"rollToHit",
			"getSection",
			"angle",
			"section",
			"$negation = $fire->target->getArmourValue($fire, $hitSystem);",
			"$negation = $fire->target->getArmourElement($fire) * $hitSystem->getArmourMod();",
			"salvo",
			"move",
			"moveAngles",
			"getPlannedFacing",
			"planCtx",
			"moveCtx",
			"Debug::",
			"drawEW",
			"mouse",
			"loc",
			"salvoCtx",
			"salvoPathCtx",
			".",
			"= data."
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 24,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "ajax.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5896,
						"regions":
						{
						},
						"selection":
						[
							[
								1599,
								1599
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1018.0,
						"zoom_level": 1.0
					},
					"stack_index": 43,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "server/classes.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5249,
						"regions":
						{
						},
						"selection":
						[
							[
								741,
								741
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"auto_name": "<?php",
							"bh_regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 194.0,
						"zoom_level": 1.0
					},
					"stack_index": 46,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "classes.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15597,
						"regions":
						{
						},
						"selection":
						[
							[
								2837,
								2837
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2499.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "style.css",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20328,
						"regions":
						{
						},
						"selection":
						[
							[
								16825,
								16825
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"syntax": "Packages/CSS/CSS.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 21932.0,
						"zoom_level": 1.0
					},
					"stack_index": 26,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "test.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2951,
						"regions":
						{
						},
						"selection":
						[
							[
								392,
								392
							]
						],
						"settings":
						{
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 108,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "mixed.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13578,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 6558.0,
						"zoom_level": 1.0
					},
					"stack_index": 53,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "shipclasses.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 84910,
						"regions":
						{
						},
						"selection":
						[
							[
								6943,
								6943
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 4019.0,
						"zoom_level": 1.0
					},
					"stack_index": 44,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "mathLib.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6014,
						"regions":
						{
						},
						"selection":
						[
							[
								6014,
								6014
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 4956.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "global.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 457,
						"regions":
						{
						},
						"selection":
						[
							[
								457,
								457
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 82,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "server/math.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3193,
						"regions":
						{
						},
						"selection":
						[
							[
								240,
								240
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 78.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "server/systems/weapons/particle.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3046,
						"regions":
						{
						},
						"selection":
						[
							[
								591,
								591
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 24,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "server/systems/weapons/em.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2481,
						"regions":
						{
						},
						"selection":
						[
							[
								1894,
								1894
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 829.0,
						"zoom_level": 1.0
					},
					"stack_index": 68,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "game.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18255,
						"regions":
						{
						},
						"selection":
						[
							[
								13945,
								13953
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 708.0,
						"zoom_level": 1.0
					},
					"stack_index": 39,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "server/flight.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1532,
						"regions":
						{
						},
						"selection":
						[
							[
								1063,
								1063
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"auto_name": "<?php",
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 402.0,
						"zoom_level": 1.0
					},
					"stack_index": 33,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "server/ships/darkner.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1619,
						"regions":
						{
						},
						"selection":
						[
							[
								452,
								452
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 98,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "server/ships/omega.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3748,
						"regions":
						{
						},
						"selection":
						[
							[
								402,
								402
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 80,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "server/ships/hyperion.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2775,
						"regions":
						{
						},
						"selection":
						[
							[
								1780,
								1780
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 36.0,
						"zoom_level": 1.0
					},
					"stack_index": 54,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "server/ships/saggitarius.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2568,
						"regions":
						{
						},
						"selection":
						[
							[
								2366,
								2366
							]
						],
						"settings":
						{
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 133.0,
						"zoom_level": 1.0
					},
					"stack_index": 93,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "server/ships/artemis.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2273,
						"regions":
						{
						},
						"selection":
						[
							[
								1130,
								1130
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 27.0,
						"zoom_level": 1.0
					},
					"stack_index": 57,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "server/ships/tethys.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1611,
						"regions":
						{
						},
						"selection":
						[
							[
								386,
								386
							]
						],
						"settings":
						{
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 87,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "imageloader.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4540,
						"regions":
						{
						},
						"selection":
						[
							[
								882,
								882
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 78,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "server/ships/battlecrab.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1686,
						"regions":
						{
						},
						"selection":
						[
							[
								107,
								107
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 56.0,
						"zoom_level": 1.0
					},
					"stack_index": 94,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "server/systems/structure.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5248,
						"regions":
						{
						},
						"selection":
						[
							[
								3209,
								3224
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2355.0,
						"zoom_level": 1.0
					},
					"stack_index": 65,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "server/systems/weapons/dual.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2688,
						"regions":
						{
						},
						"selection":
						[
							[
								586,
								586
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 99,
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "cam.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2399,
						"regions":
						{
						},
						"selection":
						[
							[
								398,
								398
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 25,
					"file": "server/systems/system.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4866,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2865.0,
						"zoom_level": 1.0
					},
					"stack_index": 55,
					"type": "text"
				},
				{
					"buffer": 26,
					"file": "server/systems/weapon.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4819,
						"regions":
						{
						},
						"selection":
						[
							[
								3503,
								3503
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1680.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				},
				{
					"buffer": 27,
					"file": "server/systems/nonweapon.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5055,
						"regions":
						{
						},
						"selection":
						[
							[
								4557,
								4557
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 245.0,
						"zoom_level": 1.0
					},
					"stack_index": 84,
					"type": "text"
				},
				{
					"buffer": 28,
					"file": "server/systems/weapons/laser.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6601,
						"regions":
						{
						},
						"selection":
						[
							[
								6319,
								6319
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"history_list_is_closing": true,
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3270.0,
						"zoom_level": 1.0
					},
					"stack_index": 27,
					"type": "text"
				},
				{
					"buffer": 29,
					"file": "postGameData.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2952,
						"regions":
						{
						},
						"selection":
						[
							[
								1505,
								1505
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 54.0,
						"zoom_level": 1.0
					},
					"stack_index": 41,
					"type": "text"
				},
				{
					"buffer": 30,
					"file": "server/salvo.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1614,
						"regions":
						{
						},
						"selection":
						[
							[
								1270,
								1270
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 654.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 31,
					"file": "server/mixed.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5993,
						"regions":
						{
						},
						"selection":
						[
							[
								4988,
								4988
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"auto_name": "<?php",
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3210.0,
						"zoom_level": 1.0
					},
					"stack_index": 36,
					"type": "text"
				},
				{
					"buffer": 32,
					"file": "server/fighter.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4485,
						"regions":
						{
						},
						"selection":
						[
							[
								549,
								549
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"auto_name": "<php",
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 169.0,
						"zoom_level": 1.0
					},
					"stack_index": 74,
					"type": "text"
				},
				{
					"buffer": 33,
					"file": "salvo.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9290,
						"regions":
						{
						},
						"selection":
						[
							[
								8970,
								8970
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 4996.0,
						"zoom_level": 1.0
					},
					"stack_index": 35,
					"type": "text"
				},
				{
					"buffer": 34,
					"file": "server/ship.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 29303,
						"regions":
						{
						},
						"selection":
						[
							[
								20405,
								20405
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 13074.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 35,
					"file": "server/systems/weapons/pulse.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4111,
						"regions":
						{
						},
						"selection":
						[
							[
								4111,
								4111
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2294.0,
						"zoom_level": 1.0
					},
					"stack_index": 23,
					"type": "text"
				},
				{
					"buffer": 36,
					"file": "systems.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 87162,
						"regions":
						{
						},
						"selection":
						[
							[
								44764,
								44764
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 28860.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 37,
					"file": "graphics.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8389,
						"regions":
						{
						},
						"selection":
						[
							[
								2526,
								2526
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"spell_check": true,
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1345.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "server/systems/weapons/particle.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3046,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 86,
					"type": "text"
				},
				{
					"buffer": 38,
					"file": "server/ships/olympus.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1590,
						"regions":
						{
						},
						"selection":
						[
							[
								711,
								711
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 49,
					"type": "text"
				},
				{
					"buffer": 39,
					"file": "createGame.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1418,
						"regions":
						{
						},
						"selection":
						[
							[
								860,
								860
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 81,
					"type": "text"
				},
				{
					"buffer": 40,
					"file": "script.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16154,
						"regions":
						{
						},
						"selection":
						[
							[
								7324,
								7324
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 4461.0,
						"zoom_level": 1.0
					},
					"stack_index": 28,
					"type": "text"
				},
				{
					"buffer": 41,
					"file": "lobby.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6997,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								6997
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 290.0,
						"zoom_level": 1.0
					},
					"stack_index": 83,
					"type": "text"
				},
				{
					"buffer": 42,
					"file": "server/manager.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 41786,
						"regions":
						{
						},
						"selection":
						[
							[
								28615,
								28615
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 16890.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 43,
					"file": "server/dbManager.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 51159,
						"regions":
						{
						},
						"selection":
						[
							[
								9206,
								9206
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"history_list_is_closing": true,
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 6405.0,
						"zoom_level": 1.0
					},
					"stack_index": 40,
					"type": "text"
				},
				{
					"buffer": 44,
					"file": "game.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 61748,
						"regions":
						{
						},
						"selection":
						[
							[
								53228,
								53228
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 34953.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 45,
					"file": "shared.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12609,
						"regions":
						{
						},
						"selection":
						[
							[
								11341,
								11343
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"history_list_is_closing": true,
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 7854.0,
						"zoom_level": 1.0
					},
					"stack_index": 50,
					"type": "text"
				},
				{
					"buffer": 46,
					"file": "server/debug.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 184,
						"regions":
						{
						},
						"selection":
						[
							[
								184,
								184
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 79,
					"type": "text"
				},
				{
					"buffer": 47,
					"file": "server/systems/weapons/plasma.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3420,
						"regions":
						{
						},
						"selection":
						[
							[
								700,
								700
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 51,
					"type": "text"
				},
				{
					"buffer": 48,
					"file": "server/systems/weapons/matter.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2261,
						"regions":
						{
						},
						"selection":
						[
							[
								1313,
								1313
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 270.0,
						"zoom_level": 1.0
					},
					"stack_index": 25,
					"type": "text"
				},
				{
					"buffer": 49,
					"file": "flights.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17975,
						"regions":
						{
						},
						"selection":
						[
							[
								6108,
								6108
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3101.0,
						"zoom_level": 1.0
					},
					"stack_index": 45,
					"type": "text"
				},
				{
					"buffer": 50,
					"file": "server/systems/weapons/ammo.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3681,
						"regions":
						{
						},
						"selection":
						[
							[
								516,
								516
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"history_list_is_closing": true,
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 58,
					"type": "text"
				}
			]
		},
		{
			"selected": 9,
			"sheets":
			[
				{
					"buffer": 51,
					"file": "server/systems/weapons/area.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1057,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 36.0,
						"zoom_level": 1.0
					},
					"stack_index": 102,
					"type": "text"
				},
				{
					"buffer": 30,
					"file": "server/salvo.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1614,
						"regions":
						{
						},
						"selection":
						[
							[
								793,
								793
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 216.0,
						"zoom_level": 1.0
					},
					"stack_index": 63,
					"type": "text"
				},
				{
					"buffer": 52,
					"file": "server/ships/avenger.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3474,
						"regions":
						{
						},
						"selection":
						[
							[
								512,
								512
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 92.0,
						"zoom_level": 1.0
					},
					"stack_index": 95,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "server/systems/weapons/dual.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2688,
						"regions":
						{
						},
						"selection":
						[
							[
								795,
								795
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 197.0,
						"zoom_level": 1.0
					},
					"stack_index": 103,
					"type": "text"
				},
				{
					"buffer": 34,
					"file": "server/ship.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 29303,
						"regions":
						{
						},
						"selection":
						[
							[
								3181,
								3181
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1914.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 27,
					"file": "server/systems/nonweapon.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5055,
						"regions":
						{
						},
						"selection":
						[
							[
								4648,
								4648
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2796.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 26,
					"file": "server/systems/weapon.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4819,
						"regions":
						{
						},
						"selection":
						[
							[
								791,
								791
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 198.0,
						"zoom_level": 1.0
					},
					"stack_index": 66,
					"type": "text"
				},
				{
					"buffer": 53,
					"file": "autoload.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7236,
						"regions":
						{
						},
						"selection":
						[
							[
								664,
								664
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 42,
					"type": "text"
				},
				{
					"buffer": 54,
					"file": "log.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9990,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 37,
					"file": "graphics.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8389,
						"regions":
						{
						},
						"selection":
						[
							[
								627,
								627
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"spell_check": true,
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 526.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "server/systems/weapons/em.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2481,
						"regions":
						{
						},
						"selection":
						[
							[
								223,
								223
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 105,
					"type": "text"
				},
				{
					"buffer": 25,
					"file": "server/systems/system.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4866,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 88,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "shipclasses.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 84910,
						"regions":
						{
						},
						"selection":
						[
							[
								71282,
								71282
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 44707.0,
						"zoom_level": 1.0
					},
					"stack_index": 32,
					"type": "text"
				},
				{
					"buffer": 36,
					"file": "systems.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 87162,
						"regions":
						{
						},
						"selection":
						[
							[
								78972,
								78972
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 50703.0,
						"zoom_level": 1.0
					},
					"stack_index": 38,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "mathLib.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6014,
						"regions":
						{
						},
						"selection":
						[
							[
								2586,
								2586
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1575.0,
						"zoom_level": 1.0
					},
					"stack_index": 64,
					"type": "text"
				},
				{
					"buffer": 43,
					"file": "server/dbManager.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 51159,
						"regions":
						{
						},
						"selection":
						[
							[
								44756,
								44756
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"history_list_is_closing": true,
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 30284.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 37,
					"file": "graphics.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8389,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"spell_check": true,
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 109,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "classes.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15597,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3555.0,
						"zoom_level": 1.0
					},
					"stack_index": 72,
					"type": "text"
				},
				{
					"buffer": 43,
					"file": "server/dbManager.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 51159,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"history_list_is_closing": true,
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 71,
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "cam.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2399,
						"regions":
						{
						},
						"selection":
						[
							[
								240,
								240
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 44,
					"file": "game.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 61748,
						"regions":
						{
						},
						"selection":
						[
							[
								48142,
								48142
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 32424.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 55,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1490,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										90,
										97
									],
									[
										239,
										246
									],
									[
										389,
										396
									],
									[
										541,
										548
									],
									[
										704,
										714
									],
									[
										968,
										978
									],
									[
										1145,
										1155
									],
									[
										1409,
										1419
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								1412,
								1412
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 3,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 882.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 45,
					"file": "shared.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12609,
						"regions":
						{
						},
						"selection":
						[
							[
								7466,
								7466
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"history_list_is_closing": true,
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 5205.0,
						"zoom_level": 1.0
					},
					"stack_index": 48,
					"type": "text"
				},
				{
					"buffer": 40,
					"file": "script.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16154,
						"regions":
						{
						},
						"selection":
						[
							[
								2095,
								2095
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1284.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 56,
					"file": "gameSetup.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17080,
						"regions":
						{
						},
						"selection":
						[
							[
								2548,
								2548
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1316.0,
						"zoom_level": 1.0
					},
					"stack_index": 62,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "mixed.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13578,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 6749.0,
						"zoom_level": 1.0
					},
					"stack_index": 52,
					"type": "text"
				},
				{
					"buffer": 57,
					"file": "server/ships/tinashi.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2319,
						"regions":
						{
						},
						"selection":
						[
							[
								1627,
								1627
							]
						],
						"settings":
						{
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 252.0,
						"zoom_level": 1.0
					},
					"stack_index": 91,
					"type": "text"
				},
				{
					"buffer": 58,
					"file": "server/ships/sharlin.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3651,
						"regions":
						{
						},
						"selection":
						[
							[
								421,
								421
							]
						],
						"settings":
						{
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 92,
					"type": "text"
				},
				{
					"buffer": 59,
					"file": "server/ships/whitestar.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1771,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 160.0,
						"zoom_level": 1.0
					},
					"stack_index": 90,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "server/math.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3193,
						"regions":
						{
						},
						"selection":
						[
							[
								390,
								390
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 69.0,
						"zoom_level": 1.0
					},
					"stack_index": 67,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "server/classes.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5249,
						"regions":
						{
						},
						"selection":
						[
							[
								3792,
								3800
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"auto_name": "<?php",
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3084.0,
						"zoom_level": 1.0
					},
					"stack_index": 75,
					"type": "text"
				},
				{
					"buffer": 60,
					"file": "server/ships/primus.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2738,
						"regions":
						{
						},
						"selection":
						[
							[
								1345,
								1345
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 180.0,
						"zoom_level": 1.0
					},
					"stack_index": 61,
					"type": "text"
				},
				{
					"buffer": 61,
					"file": "server/ships/demos.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1992,
						"regions":
						{
						},
						"selection":
						[
							[
								813,
								813
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 30.0,
						"zoom_level": 1.0
					},
					"stack_index": 85,
					"type": "text"
				},
				{
					"buffer": 62,
					"file": "server/ships/vorchan.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1764,
						"regions":
						{
						},
						"selection":
						[
							[
								408,
								409
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 96,
					"type": "text"
				},
				{
					"buffer": 63,
					"file": "server/ships/haven.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1686,
						"regions":
						{
						},
						"selection":
						[
							[
								446,
								446
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 97,
					"type": "text"
				},
				{
					"buffer": 64,
					"file": "server/systems/weapons/linked.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3139,
						"regions":
						{
						},
						"selection":
						[
							[
								1860,
								1860
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 672.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"type": "text"
				},
				{
					"buffer": 49,
					"file": "flights.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17975,
						"regions":
						{
						},
						"selection":
						[
							[
								4794,
								4794
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2965.0,
						"zoom_level": 1.0
					},
					"stack_index": 30,
					"type": "text"
				},
				{
					"buffer": 33,
					"file": "salvo.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9290,
						"regions":
						{
						},
						"selection":
						[
							[
								7441,
								7441
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3920.0,
						"zoom_level": 1.0
					},
					"stack_index": 77,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "server/flight.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1532,
						"regions":
						{
						},
						"selection":
						[
							[
								1213,
								1213
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"auto_name": "<?php",
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 306.0,
						"zoom_level": 1.0
					},
					"stack_index": 31,
					"type": "text"
				},
				{
					"buffer": 50,
					"file": "server/systems/weapons/ammo.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3681,
						"regions":
						{
						},
						"selection":
						[
							[
								627,
								627
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"history_list_is_closing": true,
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 59,
					"type": "text"
				},
				{
					"buffer": 0,
					"file": "ajax.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5896,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3187.0,
						"zoom_level": 1.0
					},
					"stack_index": 107,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "server/systems/structure.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5248,
						"regions":
						{
						},
						"selection":
						[
							[
								2615,
								2615
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1639.0,
						"zoom_level": 1.0
					},
					"stack_index": 73,
					"type": "text"
				},
				{
					"buffer": 32,
					"file": "server/fighter.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4485,
						"regions":
						{
						},
						"selection":
						[
							[
								4221,
								4221
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"auto_name": "<php",
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2474.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"type": "text"
				},
				{
					"buffer": 29,
					"file": "postGameData.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2952,
						"regions":
						{
						},
						"selection":
						[
							[
								1331,
								1331
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 241.0,
						"zoom_level": 1.0
					},
					"stack_index": 47,
					"type": "text"
				},
				{
					"buffer": 65,
					"file": "getGameData.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 663,
						"regions":
						{
						},
						"selection":
						[
							[
								652,
								652
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 110,
					"type": "text"
				},
				{
					"buffer": 42,
					"file": "server/manager.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 41786,
						"regions":
						{
						},
						"selection":
						[
							[
								14683,
								14689
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 8990.0,
						"zoom_level": 1.0
					},
					"stack_index": 34,
					"type": "text"
				},
				{
					"buffer": 66,
					"file": "shiptest.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6815,
						"regions":
						{
						},
						"selection":
						[
							[
								163,
								163
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 89,
					"type": "text"
				},
				{
					"buffer": 67,
					"file": "server/ships/altarian.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2303,
						"regions":
						{
						},
						"selection":
						[
							[
								769,
								769
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 56,
					"type": "text"
				},
				{
					"buffer": 68,
					"file": "combattest.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2850,
						"regions":
						{
						},
						"selection":
						[
							[
								1064,
								1064
							]
						],
						"settings":
						{
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 100,
					"type": "text"
				},
				{
					"buffer": 69,
					"file": "server/ships/gquan.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2688,
						"regions":
						{
						},
						"selection":
						[
							[
								1922,
								1922
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 153.0,
						"zoom_level": 1.0
					},
					"stack_index": 29,
					"type": "text"
				},
				{
					"buffer": 70,
					"file": "index.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2379,
						"regions":
						{
						},
						"selection":
						[
							[
								1860,
								1860
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 618.0,
						"zoom_level": 1.0
					},
					"stack_index": 76,
					"type": "text"
				},
				{
					"buffer": 71,
					"file": "server/systems/weapons/launcher.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2518,
						"regions":
						{
						},
						"selection":
						[
							[
								566,
								566
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 72,
					"file": "balltest.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1297,
						"regions":
						{
						},
						"selection":
						[
							[
								198,
								198
							]
						],
						"settings":
						{
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 106,
					"type": "text"
				},
				{
					"buffer": 73,
					"file": "systemtest.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3559,
						"regions":
						{
						},
						"selection":
						[
							[
								594,
								594
							]
						],
						"settings":
						{
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 48.0,
						"zoom_level": 1.0
					},
					"stack_index": 104,
					"type": "text"
				},
				{
					"buffer": 28,
					"file": "server/systems/weapons/laser.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6601,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"history_list_is_closing": true,
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 101,
					"type": "text"
				},
				{
					"buffer": 31,
					"file": "server/mixed.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5993,
						"regions":
						{
						},
						"selection":
						[
							[
								3372,
								3372
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"auto_name": "<?php",
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 2166.0,
						"zoom_level": 1.0
					},
					"stack_index": 37,
					"type": "text"
				},
				{
					"buffer": 35,
					"file": "server/systems/weapons/pulse.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4111,
						"regions":
						{
						},
						"selection":
						[
							[
								1944,
								1944
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 686.0,
						"zoom_level": 1.0
					},
					"stack_index": 60,
					"type": "text"
				},
				{
					"buffer": 47,
					"file": "server/systems/weapons/plasma.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3420,
						"regions":
						{
						},
						"selection":
						[
							[
								1651,
								1653
							]
						],
						"settings":
						{
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 18.0,
						"zoom_level": 1.0
					},
					"stack_index": 70,
					"type": "text"
				},
				{
					"buffer": 48,
					"file": "server/systems/weapons/matter.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2261,
						"regions":
						{
						},
						"selection":
						[
							[
								857,
								857
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 325.0,
						"zoom_level": 1.0
					},
					"stack_index": 69,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 34.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.495347130319,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "p1.sublime-project",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"game",
				"C:\\xampp\\htdocs\\fire\\game.js"
			],
			[
				"cam",
				"C:\\xampp\\htdocs\\fire\\cam.js"
			],
			[
				"sys",
				"C:\\xampp\\htdocs\\fire\\systems.js"
			],
			[
				"gra",
				"C:\\xampp\\htdocs\\fire\\graphics.js"
			],
			[
				"gam",
				"C:\\xampp\\htdocs\\fire\\game.js"
			],
			[
				"sy",
				"C:\\xampp\\htdocs\\fire\\systems.js"
			],
			[
				"clas",
				"C:\\xampp\\htdocs\\fire\\classes.js"
			],
			[
				"gae",
				"C:\\xampp\\htdocs\\fire\\game.js"
			],
			[
				"game.",
				"C:\\xampp\\htdocs\\fire\\game.js"
			],
			[
				"game.js",
				"C:\\xampp\\htdocs\\fire\\game.js"
			],
			[
				"log",
				"C:\\xampp\\htdocs\\fire\\log.txt"
			],
			[
				"man",
				"C:\\xampp\\htdocs\\fire\\server\\manager.php"
			],
			[
				"ma",
				"C:\\xampp\\htdocs\\fire\\mathLib.js"
			],
			[
				"mat",
				"C:\\xampp\\htdocs\\fire\\server\\math.php"
			],
			[
				"db",
				"C:\\xampp\\htdocs\\fire\\server\\dbManager.php"
			],
			[
				"sh",
				"C:\\xampp\\htdocs\\fire\\server\\ship.php"
			],
			[
				"mana",
				"C:\\xampp\\htdocs\\fire\\server\\manager.php"
			],
			[
				"fi",
				"C:\\xampp\\htdocs\\fire\\server\\fighter.php"
			],
			[
				"gr",
				"C:\\xampp\\htdocs\\fire\\graphics.js"
			],
			[
				"figh",
				"C:\\xampp\\htdocs\\fire\\server\\fighter.php"
			],
			[
				"lin",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\weapons\\linked.php"
			],
			[
				"puls",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\weapons\\pulse.php"
			],
			[
				"par",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\weapons\\particle.php"
			],
			[
				"amtt",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\weapons\\matter.php"
			],
			[
				"st",
				"C:\\xampp\\htdocs\\fire\\style.css"
			],
			[
				"las",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\weapons\\laser.php"
			],
			[
				"scr",
				"C:\\xampp\\htdocs\\fire\\script.js"
			],
			[
				"gq",
				"C:\\xampp\\htdocs\\fire\\server\\ships\\gquan.php"
			],
			[
				"fl",
				"C:\\xampp\\htdocs\\fire\\server\\flight.php"
			],
			[
				"d",
				"C:\\xampp\\htdocs\\fire\\server\\dbManager.php"
			],
			[
				"sal",
				"C:\\xampp\\htdocs\\fire\\server\\salvo.php"
			],
			[
				"m",
				"C:\\xampp\\htdocs\\fire\\server\\manager.php"
			],
			[
				"pos",
				"C:\\xampp\\htdocs\\fire\\postGameData.php"
			],
			[
				"lo",
				"C:\\xampp\\htdocs\\fire\\autoload.php"
			],
			[
				"ga",
				"C:\\xampp\\htdocs\\fire\\game.js"
			],
			[
				"p",
				"C:\\xampp\\htdocs\\fire\\postGameData.php"
			],
			[
				"aja",
				"C:\\xampp\\htdocs\\fire\\ajax.js"
			],
			[
				"g",
				"C:\\xampp\\htdocs\\fire\\game.js"
			],
			[
				"sc",
				"C:\\xampp\\htdocs\\fire\\script.js"
			],
			[
				"po",
				"C:\\xampp\\htdocs\\fire\\postGameData.php"
			],
			[
				"sha",
				"C:\\xampp\\htdocs\\fire\\shared.js"
			],
			[
				"sty",
				"C:\\xampp\\htdocs\\fire\\style.css"
			],
			[
				"w",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\weapon.php"
			],
			[
				"laser",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\weapons\\laser.php"
			],
			[
				"mix",
				"C:\\xampp\\htdocs\\fire\\mixed.js"
			],
			[
				"mi",
				"C:\\xampp\\htdocs\\fire\\mixed.js"
			],
			[
				"flight",
				"C:\\xampp\\htdocs\\fire\\server\\flight.php"
			],
			[
				"hyp",
				"C:\\xampp\\htdocs\\fire\\server\\ships\\hyperion.php"
			],
			[
				"art",
				"C:\\xampp\\htdocs\\fire\\server\\ships\\artemis.php"
			],
			[
				"amm",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\weapons\\ammo.php"
			],
			[
				"lau",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\weapons\\launcher.php"
			],
			[
				"gamej.s",
				"C:\\xampp\\htdocs\\fire\\game.js"
			],
			[
				"plasma",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\weapons\\plasma.php"
			],
			[
				"styl",
				"C:\\xampp\\htdocs\\fire\\style.css"
			],
			[
				"pri",
				"C:\\xampp\\htdocs\\fire\\server\\ships\\primus.php"
			],
			[
				"alt",
				"C:\\xampp\\htdocs\\fire\\server\\ships\\altarian.php"
			],
			[
				"pr",
				"C:\\xampp\\htdocs\\fire\\server\\ships\\primus.php"
			],
			[
				"games",
				"C:\\xampp\\htdocs\\fire\\gameSetup.php"
			],
			[
				"math",
				"C:\\xampp\\htdocs\\fire\\mathLib.js"
			],
			[
				"s",
				"C:\\xampp\\htdocs\\fire\\shipclasses.js"
			],
			[
				"cla",
				"C:\\xampp\\htdocs\\fire\\server\\classes.php"
			],
			[
				"mx",
				"C:\\xampp\\htdocs\\fire\\server\\mixed.php"
			],
			[
				"pla",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\weapons\\plasma.php"
			],
			[
				"we",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\weapon.php"
			],
			[
				"pul",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\weapons\\pulse.php"
			],
			[
				"pu",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\weapons\\pulse.php"
			],
			[
				"am",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\weapons\\ammo.php"
			],
			[
				"game.php",
				"C:\\xampp\\htdocs\\fire\\game.php"
			],
			[
				"str",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\structure.php"
			],
			[
				"shared",
				"C:\\xampp\\htdocs\\fire\\shared.js"
			],
			[
				"stru",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\structure.php"
			],
			[
				"auto",
				"C:\\xampp\\htdocs\\fire\\autoload.php"
			],
			[
				"f",
				"C:\\xampp\\htdocs\\fire\\flights.js"
			],
			[
				"sj",
				"C:\\xampp\\htdocs\\fire\\shipclasses.js"
			],
			[
				"gamejs",
				"C:\\xampp\\htdocs\\fire\\game.js"
			],
			[
				"ima",
				"C:\\xampp\\htdocs\\fire\\imageloader.js"
			],
			[
				"iam",
				"C:\\xampp\\htdocs\\fire\\imageloader.js"
			],
			[
				"",
				"C:\\xampp\\htdocs\\fire\\flights.js"
			],
			[
				"de",
				"C:\\xampp\\htdocs\\fire\\server\\debug.php"
			],
			[
				"l",
				"C:\\xampp\\htdocs\\fire\\log.txt"
			],
			[
				"post",
				"C:\\xampp\\htdocs\\fire\\postGameData.php"
			],
			[
				"stly",
				"C:\\xampp\\htdocs\\fire\\style.css"
			],
			[
				"mag",
				"C:\\xampp\\htdocs\\fire\\server\\manager.php"
			],
			[
				"cr",
				"C:\\xampp\\htdocs\\fire\\createGame.php"
			],
			[
				"os",
				"C:\\xampp\\htdocs\\fire\\postGameData.php"
			],
			[
				"gl",
				"C:\\xampp\\htdocs\\fire\\global.php"
			],
			[
				"shi",
				"C:\\xampp\\htdocs\\fire\\shipclasses.js"
			],
			[
				"sa",
				"C:\\xampp\\htdocs\\fire\\server\\salvo.php"
			],
			[
				"sjh",
				"C:\\xampp\\htdocs\\fire\\shipclasses.js"
			],
			[
				"lgo",
				"C:\\xampp\\htdocs\\fire\\log.txt"
			],
			[
				"fig",
				"C:\\xampp\\htdocs\\fire\\server\\fighter.php"
			],
			[
				"nonw",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\nonweapon.php"
			],
			[
				"ome",
				"C:\\xampp\\htdocs\\fire\\server\\ships\\omega.php"
			],
			[
				"ar",
				"C:\\xampp\\htdocs\\fire\\server\\ships\\artemis.php"
			],
			[
				"gamj",
				"C:\\xampp\\htdocs\\fire\\game.js"
			],
			[
				"style",
				"C:\\xampp\\htdocs\\fire\\style.css"
			],
			[
				"dem",
				"C:\\xampp\\htdocs\\fire\\server\\ships\\demos.php"
			],
			[
				"tet",
				"C:\\xampp\\htdocs\\fire\\server\\ships\\tethys.php"
			],
			[
				"plas",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\weapons\\plasma.php"
			],
			[
				"shipt",
				"C:\\xampp\\htdocs\\fire\\shiptest.php"
			],
			[
				"al",
				"C:\\xampp\\htdocs\\fire\\server\\ships\\altarian.php"
			],
			[
				"no",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\nonweapon.php"
			],
			[
				"non",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\nonweapon.php"
			],
			[
				"omg",
				"C:\\xampp\\htdocs\\fire\\server\\ships\\omega.php"
			],
			[
				"fgl",
				"C:\\xampp\\htdocs\\fire\\flights.js"
			],
			[
				"salv",
				"C:\\xampp\\htdocs\\fire\\salvo.js"
			],
			[
				"c",
				"C:\\xampp\\htdocs\\fire\\classes.js"
			],
			[
				"wi",
				"C:\\xampp\\htdocs\\fire\\server\\wing.php"
			],
			[
				"lob",
				"C:\\xampp\\htdocs\\fire\\lobby.php"
			],
			[
				"vor",
				"C:\\xampp\\htdocs\\fire\\server\\ships\\vorchan.php"
			],
			[
				"dual",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\weapons\\dual.php"
			],
			[
				"ship",
				"C:\\xampp\\htdocs\\fire\\server\\ship.php"
			],
			[
				"deb",
				"C:\\xampp\\htdocs\\fire\\server\\debug.php"
			],
			[
				"part",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\weapons\\particle.php"
			],
			[
				"em",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\weapons\\em.php"
			],
			[
				"lase",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\weapons\\laser.php"
			],
			[
				"lobb",
				"C:\\xampp\\htdocs\\fire\\lobby.php"
			],
			[
				"tina",
				"C:\\xampp\\htdocs\\fire\\server\\ships\\tinashi.php"
			],
			[
				"dar",
				"C:\\xampp\\htdocs\\fire\\server\\ships\\darkner.php"
			],
			[
				"dark",
				"C:\\xampp\\htdocs\\fire\\server\\ships\\darkner.php"
			],
			[
				"au",
				"C:\\xampp\\htdocs\\fire\\autoload.php"
			],
			[
				"plasm",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\weapons\\plasma.php"
			],
			[
				"stl",
				"C:\\xampp\\htdocs\\fire\\style.css"
			],
			[
				"omeg",
				"C:\\xampp\\htdocs\\fire\\server\\ships\\omega.php"
			],
			[
				"mn",
				"C:\\xampp\\htdocs\\fire\\server\\manager.php"
			],
			[
				"game.s",
				"C:\\xampp\\htdocs\\fire\\game.js"
			],
			[
				"sscr",
				"C:\\xampp\\htdocs\\fire\\script.js"
			],
			[
				"are",
				"C:\\xampp\\htdocs\\fire\\server\\systems\\weapons\\area.php"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 89.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
